{"version":3,"file":"@aptero/axolotis-core-plugins/modules/portals/PortalsService.5628a086da912b487113.js","mappings":";;;;;;;;;;;wVAaO,MAAMA,EACXC,eAEmB,oBAACC,GAClB,MAAMC,QAAqBD,EAASE,WAClC,qDAEIC,QAA2BF,EAC9BG,iBACAC,wBAAuCC,EAAAA,cAAAA,MAIpCC,SAHmBJ,EAAmBD,WAC1C,uEAEsBF,EAASE,WAC/B,8CAEIM,QAAcR,EAASE,WAC3B,wDAEF,IAAIO,EAAiB,UACrB,IACEA,EAAiBC,OAAOC,SAASC,KACjC,MAAOC,IAGT,OAAO,IAAIC,EAAeb,EAAcM,EAAWC,EAAOC,IAI9D,MAAMM,EAAS,GAER,MAAMD,EACXf,YACUC,EACRO,EACQC,EACRQ,GACA,KAJQhB,SAAAA,EAIR,KAFQQ,MAAAA,EAER,WAYE,GAZF,sBAyDkC,IAzDlC,4BA0DmC,IAzDnCS,KAAKC,aAAaF,EAAShB,EAASI,kBACpCG,EAAUY,QAAQL,EAAeM,MAAOC,IACtC,IAAK,MAAMC,KAAQL,KAAKM,aACtBD,EAAKD,MAGTJ,KAAKT,MAAMgB,cAAcC,MAAK,KAC5BR,KAAKS,YAMTA,SACE,MAAMC,EAAKV,KAAKT,MAAMoB,SAASC,aAE/BZ,KAAKT,MAAMoB,SAASE,OAAM,GAAM,GAAM,GAEtCb,KAAKT,MAAMoB,SAASG,WAAY,EAEhC,IAAK,MAAMT,KAAQL,KAAKe,mBACtBV,IAGFK,EAAGM,WAAU,GAAM,GAAM,GAAM,GAC/BN,EAAGO,WAAU,GAGfC,UACE,OAAOrB,EAAeM,KAGxBgB,eAAepB,GAKb,OAJAA,EAAQqB,QAAQ,KAAM,IACjBrB,EAAQsB,WAAW,UACtBtB,EAAUN,OAAOC,SAAS4B,OAAS,IAAMvB,GAEpC,IAAIwB,IAAIxB,GAASyB,WAG1BvB,aAAawB,EAAaC,GACxBD,EAAMzB,KAAKmB,eAAeM,GACrB3B,EAAO2B,KACV3B,EAAO2B,GAAOC,GAIlBC,SAASF,GAEP,OADAA,EAAMzB,KAAKmB,eAAeM,GACnB3B,EAAO2B,GAGhBG,WAAWH,GACT,QAASzB,KAAK2B,SAASF,GAMzBI,cAAcC,GACZ9B,KAAKM,aAAaE,KAAKsB,GAGzBC,oBAAoBD,GAClB9B,KAAKe,mBAAmBP,KAAKsB","sources":["webpack://axolotis-core-plugins/./src/lib/modules/portals/PortalsService.ts"],"sourcesContent":["import Component from \"@aptero/axolotis-player/build/types/modules/core/ecs/Component\";\nimport { WorldEntity } from \"@aptero/axolotis-player/build/types/modules/core/ecs/WorldEntity\";\nimport { CodeLoaderComponent } from \"@aptero/axolotis-player/build/types/modules/core/loader/CodeLoaderComponent\";\nimport { WebpackLazyModule } from \"@aptero/axolotis-player/build/types/modules/core/loader/WebpackLoader\";\nimport {\n  LazyServices,\n  Service,\n} from \"@aptero/axolotis-player/build/types/modules/core/service/LazyServices\";\nimport { ServiceEntity } from \"@aptero/axolotis-player\";\nimport { WorldService } from \"@aptero/axolotis-player/build/types/modules/core/WorldService\";\nimport { FrameLoop } from \"@aptero/axolotis-player/build/types/modules/FrameLoop\";\nimport { ThreeLib } from \"../three/ThreeLib\";\n\nexport class Factory implements WebpackLazyModule, Service<PortalsService> {\n  constructor() {}\n\n  async createService(services: LazyServices): Promise<PortalsService> {\n    const worldService = await services.getService<WorldService>(\n      \"@aptero/axolotis-player/modules/core/WorldService\"\n    );\n    const actualWorldService = await worldService\n      .getActiveWorld()\n      .getFirstComponentByType<ServiceEntity>(ServiceEntity.name);\n    const codeLoader = await actualWorldService.getService<CodeLoaderComponent>(\n      \"@aptero/axolotis-player/modules/core/loader/CodeLoaderService\"\n    );\n    const frameLoop = await services.getService<FrameLoop>(\n      \"@aptero/axolotis-player/modules/FrameLoop\"\n    );\n    const three = await services.getService<ThreeLib>(\n      \"@aptero/axolotis-core-plugins/modules/three/ThreeLib\"\n    );\n    let initialRoomUrl = \"initial\";\n    try {\n      initialRoomUrl = window.location.href;\n    } catch (e) {\n      /* ignore*/\n    }\n    return new PortalsService(worldService, frameLoop, three, initialRoomUrl);\n  }\n}\n\nconst worlds = {};\n\nexport class PortalsService implements Component {\n  constructor(\n    private services: WorldService,\n    frameLoop: FrameLoop,\n    private three: ThreeLib,\n    roomUrl: string\n  ) {\n    this.notifylWorld(roomUrl, services.getActiveWorld());\n    frameLoop.addLoop(PortalsService.name, (delta) => {\n      for (const loop of this.portalsLoops) {\n        loop(delta);\n      }\n    });\n    this.three.preRenderPass.push(() => {\n      this.render();\n    });\n  }\n\n  i = 0;\n\n  render() {\n    const gl = this.three.renderer.getContext();\n    // clear buffers now: color, depth, stencil\n    this.three.renderer.clear(true, true, true);\n    // do not clear buffers before each render pass\n    this.three.renderer.autoClear = false;\n\n    for (const loop of this.portalsRenderLoops) {\n      loop();\n    }\n\n    gl.colorMask(true, true, true, true);\n    gl.depthMask(true);\n  }\n\n  getType(): string {\n    return PortalsService.name;\n  }\n\n  cleanUpRoomUrl(roomUrl: string) {\n    roomUrl.replace(\"./\", \"\");\n    if (!roomUrl.startsWith(\"http\")) {\n      roomUrl = window.location.origin + \"/\" + roomUrl;\n    }\n    return new URL(roomUrl).toString();\n  }\n\n  notifylWorld(url: string, world: WorldEntity) {\n    url = this.cleanUpRoomUrl(url);\n    if (!worlds[url]) {\n      worlds[url] = world;\n    }\n  }\n\n  getWorld(url: string) {\n    url = this.cleanUpRoomUrl(url);\n    return worlds[url];\n  }\n\n  worldExist(url: string) {\n    return !!this.getWorld(url);\n  }\n\n  portalsLoops: ((delta) => void)[] = [];\n  portalsRenderLoops: (() => void)[] = [];\n\n  addPortalLoop(callback: (delta) => void) {\n    this.portalsLoops.push(callback);\n  }\n\n  addPortalRenderLoop(callback: () => void) {\n    this.portalsRenderLoops.push(callback);\n  }\n}\n"],"names":["Factory","constructor","services","worldService","getService","actualWorldService","getActiveWorld","getFirstComponentByType","ServiceEntity","frameLoop","three","initialRoomUrl","window","location","href","e","PortalsService","worlds","roomUrl","this","notifylWorld","addLoop","name","delta","loop","portalsLoops","preRenderPass","push","render","gl","renderer","getContext","clear","autoClear","portalsRenderLoops","colorMask","depthMask","getType","cleanUpRoomUrl","replace","startsWith","origin","URL","toString","url","world","getWorld","worldExist","addPortalLoop","callback","addPortalRenderLoop"],"sourceRoot":""}