/*!
 * 
 *   @aptero/axolotis-core-plugins v1.0.0
 *   https://github.com/ApteroSAS/axolotis-player
 *
 *   Copyright (c) Aptero (https://github.com/ApteroSAS/axolotis-player) and project contributors.
 *
 *   This source code is licensed under the MIT license found in the
 *   LICENSE file in the root directory of this source tree.
 *
 */
"use strict";(self.webpackChunkaxolotis_core_plugins=self.webpackChunkaxolotis_core_plugins||[]).push([[968],{481:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Factory": function() { return /* binding */ Factory; },\n/* harmony export */   "PortalLink": function() { return /* binding */ PortalLink; }\n/* harmony export */ });\n/* harmony import */ var _aptero_axolotis_player__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(919);\n/* harmony import */ var _aptero_axolotis_player__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_aptero_axolotis_player__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(212);\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n //https://barthaweb.com/2020/09/webgl-portal/\n//https://github.com/stemkoski/AR-Examples/blob/master/portal-view.html\n//https://stemkoski.github.io/AR-Examples/portal-view.html\n//https://discourse.threejs.org/t/multiple-scenes-vs-layers/12503/10\n//TODO an iframe per world maybe?\n//https://web.dev/origin-agent-cluster/\n\nclass Factory {\n  async createComponent(world, config) {\n    var _config$in, _config$in2, _config$in3, _config$out, _config$out2, _config$out3;\n\n    let services = world.getFirstComponentByType(_aptero_axolotis_player__WEBPACK_IMPORTED_MODULE_0__.ServiceEntity.name);\n    let codeLoader = await services.getService("@aptero/axolotis-player/modules/core/loader/CodeLoaderService");\n    let three = await services.getService("@aptero/axolotis-core-plugins/modules/three/ThreeLib");\n    let service = await services.getService("@aptero/axolotis-core-plugins/modules/portals/PortalsService");\n    let playerService = await services.getService("@aptero/axolotis-core-plugins/modules/controller/PlayerService");\n    let worldService = await services.getService("@aptero/axolotis-player/modules/core/WorldService");\n    let portalLink = new PortalLink(service, three, playerService, worldService, {\n      position: new three__WEBPACK_IMPORTED_MODULE_1__.Vector3((_config$in = config.in) === null || _config$in === void 0 ? void 0 : _config$in.x, (_config$in2 = config.in) === null || _config$in2 === void 0 ? void 0 : _config$in2.y, (_config$in3 = config.in) === null || _config$in3 === void 0 ? void 0 : _config$in3.z)\n    }, {\n      position: new three__WEBPACK_IMPORTED_MODULE_1__.Vector3((_config$out = config.out) === null || _config$out === void 0 ? void 0 : _config$out.x, (_config$out2 = config.out) === null || _config$out2 === void 0 ? void 0 : _config$out2.y, (_config$out3 = config.out) === null || _config$out3 === void 0 ? void 0 : _config$out3.z)\n    });\n    codeLoader.awaitInitialLoading().then(async value => {\n      let world;\n\n      if (service.worldExist(config.url)) {\n        world = service.getWorld(config.url);\n      } else {\n        world = await (0,_aptero_axolotis_player__WEBPACK_IMPORTED_MODULE_0__.initHtmlFromUrl)(config.url);\n        service.notifylWorld(config.url, world);\n      }\n\n      portalLink.setTargetWorld(world);\n    });\n    return portalLink;\n  }\n\n}\nconst invisibleLayer = 31;\nconst tmpVisibleLayer = 30;\nconst regularLayer = 0;\nclass PortalLink {\n  async setTargetWorld(world) {\n    this.targetWorld = world;\n    let targetWorldService = await this.targetWorld.getFirstComponentByType(_aptero_axolotis_player__WEBPACK_IMPORTED_MODULE_0__.ServiceEntity.name);\n    this.targetThreeLib = await targetWorldService.getService("@aptero/axolotis-core-plugins/modules/three/ThreeLib");\n    this.targetPlayerService = await targetWorldService.getService("@aptero/axolotis-core-plugins/modules/controller/PlayerService");\n    let otherPortals = await world.getComponentByType(PortalLink.name);\n\n    if (otherPortals.length === 0) {\n      console.error("no destination portal present");\n    }\n\n    for (const op of otherPortals) {\n      if (op.inPosition.position.equals(this.outPosition.position)) {\n        // && op.key === this.key\n        this.targetLink = op;\n      }\n    }\n\n    if (this.targetLink) {\n      this.portals.addPortalRenderLoop(() => {\n        this.renderPortal();\n      });\n      this.portals.addPortalLoop(delta => {\n        this.computerPortalEnter();\n      });\n    } else {\n      throw new Error("invalid portal init: target portal in wrong state");\n    }\n  }\n\n  constructor(portals, three, playerService, worldService, inPosition, outPosition) {\n    this.portals = portals;\n    this.three = three;\n    this.playerService = playerService;\n    this.worldService = worldService;\n    this.inPosition = inPosition;\n    this.outPosition = outPosition;\n\n    _defineProperty(this, "otherCamera", void 0);\n\n    _defineProperty(this, "portalA", void 0);\n\n    _defineProperty(this, "portalB", void 0);\n\n    _defineProperty(this, "targetWorld", null);\n\n    _defineProperty(this, "targetThreeLib", null);\n\n    _defineProperty(this, "boundingBox", void 0);\n\n    _defineProperty(this, "targetLink", null);\n\n    _defineProperty(this, "portalPlane", void 0);\n\n    _defineProperty(this, "targetPlayerService", null);\n\n    _defineProperty(this, "tmpPos", new three__WEBPACK_IMPORTED_MODULE_1__.Vector3());\n\n    _defineProperty(this, "tmpDir", new three__WEBPACK_IMPORTED_MODULE_1__.Vector3());\n\n    _defineProperty(this, "tmpBox", new three__WEBPACK_IMPORTED_MODULE_1__.Box3());\n\n    _defineProperty(this, "tmpPlane", new three__WEBPACK_IMPORTED_MODULE_1__.Plane());\n\n    _defineProperty(this, "collidingLastFrame", false);\n\n    _defineProperty(this, "lastDistance", 0);\n\n    _defineProperty(this, "gracePeriode", 0);\n\n    this.otherCamera = new three__WEBPACK_IMPORTED_MODULE_1__.PerspectiveCamera(three.camera.fov, window.innerWidth / window.innerHeight, this.three.camera.near, this.three.camera.far);\n    three.scene.add(this.otherCamera); // Portal A (Portal View) ================================\n\n    let defaultMaterial = new three__WEBPACK_IMPORTED_MODULE_1__.MeshBasicMaterial({\n      color: 0xff0000,\n      side: three__WEBPACK_IMPORTED_MODULE_1__.DoubleSide,\n      transparent: true\n    });\n    this.portalA = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(new three__WEBPACK_IMPORTED_MODULE_1__.CircleGeometry(1, 64), //new THREE.BoxGeometry( 1, 1, 1 ),\n    defaultMaterial.clone());\n    this.portalA.material.opacity = 0;\n    this.portalA.position.copy(inPosition.position);\n\n    if (inPosition.rotation) {\n      this.portalA.setRotationFromEuler(inPosition.rotation);\n    }\n\n    this.portalA.layers.set(invisibleLayer); //invisible layer storage\n\n    three.scene.add(this.portalA);\n    this.portalA.geometry.computeBoundingBox();\n    this.portalPlane = new three__WEBPACK_IMPORTED_MODULE_1__.Plane(new three__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 1)); //TODO remember to move and oriente the plan to follow the portal\n    //const helper = new THREE.PlaneHelper( this.portalPlane, 1, 0xffff00 );\n    //this.three.scene.add( helper );\n\n    this.boundingBox = new three__WEBPACK_IMPORTED_MODULE_1__.Box3();\n    this.boundingBox.copy(this.portalA.geometry.boundingBox || new three__WEBPACK_IMPORTED_MODULE_1__.Box3());\n    let minBox = new three__WEBPACK_IMPORTED_MODULE_1__.Box3(new three__WEBPACK_IMPORTED_MODULE_1__.Vector3(-0.2, -0.2, -0.2), new three__WEBPACK_IMPORTED_MODULE_1__.Vector3(0.2, 0.2, 0.2));\n    this.boundingBox = this.boundingBox.union(minBox); //const helper = new THREE.Box3Helper( this.boundingBox,0xffff00 as any );\n    //this.three.scene.add( helper );\n    // Portal B (Point of View position and rotation) ================================\n    // material for portals and blockers\n\n    let defaultMaterial2 = new three__WEBPACK_IMPORTED_MODULE_1__.MeshBasicMaterial({\n      color: 0xffffff,\n      side: three__WEBPACK_IMPORTED_MODULE_1__.DoubleSide,\n      transparent: true\n    });\n    this.portalB = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(new three__WEBPACK_IMPORTED_MODULE_1__.CircleGeometry(1, 64), defaultMaterial2.clone());\n    this.portalB.material.opacity = 0;\n    this.portalB.position.copy(outPosition.position);\n\n    if (outPosition.rotation) {\n      this.portalB.setRotationFromEuler(outPosition.rotation);\n    }\n\n    three.scene.add(this.portalB);\n  }\n\n  //in FPS\n  computerPortalEnter() {\n    if (!this.worldService.isActiveWorld()) {\n      return;\n    }\n\n    if (this.gracePeriode > 0) {\n      this.gracePeriode--;\n    } //compute collision\n\n\n    this.tmpBox.copy(this.boundingBox);\n    this.tmpPlane.copy(this.portalPlane);\n    this.tmpBox.applyMatrix4(this.portalA.matrixWorld);\n    this.tmpPlane.applyMatrix4(this.portalA.matrixWorld);\n    this.playerService.getCurrentPlayer().getHeadPosition(this.tmpPos);\n    this.three.camera.getWorldDirection(this.tmpDir); //this.tmpPos.add(this.tmpDir.multiplyScalar(0.30));\n\n    const isColliding = this.tmpBox.containsPoint(this.tmpPos);\n\n    if (isColliding) {\n      if (this.lastDistance !== 0) {\n        // - * + => - / + * - => - => this means we traversed the plan\n        if (this.tmpPlane.distanceToPoint(this.tmpPos) * this.lastDistance < 0) {\n          //enter\n          console.log("enter");\n\n          if (this.targetWorld && this.targetLink && this.targetPlayerService && this.gracePeriode == 0) {\n            this.targetLink.gracePeriode = 5;\n            this.targetLink.collidingLastFrame = true; //sync colliding flag\n\n            this.targetLink.lastDistance = this.lastDistance;\n            this.playerService.getCurrentPlayer().getHeadPosition(this.tmpPos); //right head position before teleport\n\n            this.targetPlayerService.getCurrentPlayer().teleportToLocation(this.tmpPos.x, this.tmpPos.y, this.tmpPos.z);\n            console.log("teleport");\n            this.worldService.setActiveWorld(this.targetWorld);\n            this.targetPlayerService.getCurrentPlayer().teleportToLocation(this.tmpPos.x, this.tmpPos.y, this.tmpPos.z);\n          }\n        }\n      }\n\n      this.lastDistance = this.tmpPlane.distanceToPoint(this.tmpPos);\n    } else if (!isColliding && this.lastDistance !== 0) {\n      //leave\n      this.lastDistance = 0;\n      console.log("leave");\n    }\n\n    this.collidingLastFrame = isColliding;\n  }\n\n  renderPortal() {\n    if (!this.targetThreeLib) {\n      return;\n    }\n\n    this.portalA.layers.set(tmpVisibleLayer); //Portal to render to layer 1\n    // relatively align other camera with main camera\n\n    let relativePosition = this.portalA.worldToLocal(this.three.camera.position.clone());\n    this.otherCamera.position.copy(this.portalB.localToWorld(relativePosition));\n    let relativeRotation = this.three.camera.quaternion.clone().multiply(this.portalA.quaternion.clone().invert());\n    this.otherCamera.quaternion.copy(relativeRotation.multiply(this.portalB.quaternion)); // keep camera tilt in sync\n\n    this.otherCamera.rotation.x = this.three.camera.rotation.x;\n    let gl = this.three.renderer.getContext(); // FIRST PASS\n    // goal: using the stencil buffer, place 1\'s in position of first portal\n    // enable the stencil buffer\n\n    gl.enable(gl.STENCIL_TEST); // layer 1 contains only the first portal\n\n    this.three.camera.layers.set(tmpVisibleLayer);\n    gl.stencilFunc(gl.ALWAYS, 1, 0xff);\n    gl.stencilOp(gl.KEEP, gl.KEEP, gl.REPLACE);\n    gl.stencilMask(0xff); // only write to stencil buffer (not color or depth)\n\n    gl.colorMask(false, false, false, false);\n    gl.depthMask(false);\n    this.three.renderer.render(this.three.scene, this.three.camera); //this.three.renderer.render( this.targetThreeLib.scene, this.targetThreeLib.camera );\n    // SECOND PASS\n    // goal: draw from the portal camera perspective (which is aligned relative to the second portal)\n    //   in the first portal region (set by the stencil in the previous pass)\n    // set up a clipping plane, so that portal camera does not see anything between\n    //   the portal camera and the second portal\n    // default normal of a plane is 0,0,1. apply mesh rotation to it.\n    // determine which side of the plane camera is on, for clipping plane orientation.\n\n    let portalToCamera = new three__WEBPACK_IMPORTED_MODULE_1__.Vector3().subVectors(this.three.camera.position.clone(), this.portalA.position.clone()); //  applyQuaternion( mainMover.quaternion );\n\n    let normalPortal = new three__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, 1).applyQuaternion(this.portalA.quaternion);\n    let clipSide = -Math.sign(portalToCamera.dot(normalPortal));\n    let clipNormal = new three__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, clipSide).applyQuaternion(this.portalB.quaternion);\n    let clipPoint = this.portalB.position;\n    let clipPlane = new three__WEBPACK_IMPORTED_MODULE_1__.Plane().setFromNormalAndCoplanarPoint(clipNormal, clipPoint);\n    this.three.renderer.clippingPlanes = [clipPlane];\n    gl.colorMask(true, true, true, true);\n    gl.depthMask(true);\n    gl.stencilFunc(gl.EQUAL, 1, 0xff);\n    gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n    this.otherCamera.layers.set(regularLayer); //this.three.renderer.render( this.three.scene, this.otherCamera );//TODO maybe here scene 2\n\n    this.three.renderer.render(this.targetThreeLib.scene, this.otherCamera); // disable clipping planes\n\n    this.three.renderer.clippingPlanes = []; // THIRD PASS\n    // goal: set the depth buffer data for the first portal,\n    //   so that it can be occluded by other objects\n    // finished with stencil\n\n    gl.disable(gl.STENCIL_TEST);\n    gl.colorMask(false, false, false, false);\n    gl.depthMask(true); // need to clear the depth buffer, in case of occlusion\n\n    this.three.renderer.render(this.three.scene, this.three.camera);\n    this.three.camera.layers.set(regularLayer); // layer 0 contains everything but portals\n\n    this.portalA.layers.set(invisibleLayer); //Portal to render to layer 1\n  }\n\n  getType() {\n    return PortalLink.name;\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///481\n')}}]);