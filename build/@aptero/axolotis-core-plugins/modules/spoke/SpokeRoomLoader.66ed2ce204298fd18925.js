/*!
 * 
 *   @aptero/axolotis-core-plugins v1.0.0
 *   https://github.com/ApteroSAS/axolotis-player
 *
 *   Copyright (c) Aptero (https://github.com/ApteroSAS/axolotis-player) and project contributors.
 *
 *   This source code is licensed under the MIT license found in the
 *   LICENSE file in the root directory of this source tree.
 *
 */
"use strict";(self.webpackChunkaxolotis_core_plugins=self.webpackChunkaxolotis_core_plugins||[]).push([["@aptero/axolotis-core-plugins/modules/spoke/SpokeRoomLoader"],{"./src/lib/modules/spoke/PhoenixUtils.ts":
/*!***********************************************!*\
  !*** ./src/lib/modules/spoke/PhoenixUtils.ts ***!
  \***********************************************/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "connectToReticulum": function() { return /* binding */ connectToReticulum; },\n/* harmony export */   "createHubChannelParams": function() { return /* binding */ createHubChannelParams; },\n/* harmony export */   "denoisePresence": function() { return /* binding */ denoisePresence; },\n/* harmony export */   "discordBridgesForPresences": function() { return /* binding */ discordBridgesForPresences; },\n/* harmony export */   "getPresenceContextForSession": function() { return /* binding */ getPresenceContextForSession; },\n/* harmony export */   "getPresenceEntryForSession": function() { return /* binding */ getPresenceEntryForSession; },\n/* harmony export */   "getPresenceProfileForSession": function() { return /* binding */ getPresenceProfileForSession; },\n/* harmony export */   "hasEmbedPresences": function() { return /* binding */ hasEmbedPresences; },\n/* harmony export */   "invalidateReticulumMeta": function() { return /* binding */ invalidateReticulumMeta; },\n/* harmony export */   "load": function() { return /* binding */ load; },\n/* harmony export */   "migrateChannelToSocket": function() { return /* binding */ migrateChannelToSocket; },\n/* harmony export */   "migrateToChannel": function() { return /* binding */ migrateToChannel; },\n/* harmony export */   "presenceEventsForHub": function() { return /* binding */ presenceEventsForHub; }\n/* harmony export */ });\n/* harmony import */ var phoenix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! phoenix */ "./node_modules/phoenix/priv/static/phoenix.esm.js");\n\nlet configs = {\n  RETICULUM_SOCKET_SERVER_PORT: "443",\n  RETICULUM_SOCKET_SERVER: "alphahub.aptero.co",\n  //TODO\n  RETICULUM_SOCKET_PROTOCOL: "wss:"\n};\nfunction createHubChannelParams() {\n  let authToken = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let permsToken = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n  /*{\n        "profile": {\n        "avatarId": "https://hub.aptero.co/data/avatar/A031/base.glb",\n            "displayName": "Pierre"\n    },\n        "push_subscription_endpoint": null,\n        "auth_token": "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJyZXQiLCJleHAiOjE2MjM2Nzc4NzUsImlhdCI6MTYxNjQyMDI3NSwiaXNzIjoicmV0IiwianRpIjoiMTBkMWFkZmYtYjBlMi00N2RkLWFiMTgtMjY3MGY0ZDVhMTFkIiwibmJmIjoxNjE2NDIwMjc0LCJzdWIiOiI2NDA0MDcwNTA5NjYyNjk5NjEiLCJ0eXAiOiJhY2Nlc3MifQ.qp29Ip4AKkpRPtVVOUikytL1u-lGPJidUglsWlW8H9izgdRsoH_c0yZuA04Miwi6K2iN-GsoCr8Kd1fTH0yp2g",\n        "perms_token": null,\n        "context": {\n        "mobile": false,\n            "embed": true\n    },\n        "hub_invite_id": null\n    }*/\n  const params = {\n    profile: {\n      avatarId: "",\n      displayName: ""\n    },\n    push_subscription_endpoint: null,\n    auth_token: null,\n    perms_token: null,\n    bot_access_key: null,\n    context: {\n      mobile: false,\n      embed: true\n    },\n    hub_invite_id: null\n  };\n  return params;\n}\nasync function load(hubid) {\n  const socket = await connectToReticulum();\n  socket.onClose(e => {\n    console.error(e);\n  });\n  const {\n    data,\n    hubPhxChannel,\n    vapiddata\n  } = await new Promise((resolve, reject) => {\n    // Reticulum global channel\n    let retChannel = socket.channel("ret", {\n      hub_id: hubid\n    });\n    retChannel.join().receive("ok", vapiddata => {\n      const hubPhxChannel = socket.channel("hub:" + hubid, createHubChannelParams());\n      hubPhxChannel.join().receive("ok", async data => {\n        resolve({\n          data,\n          hubPhxChannel,\n          vapiddata\n        });\n      }).receive("error", res => {\n        reject(res);\n      });\n    }).receive("error", res => {\n      reject(res);\n    });\n  });\n  return {\n    data,\n    hubPhxChannel,\n    vapiddata\n  };\n}\nlet reticulumMeta = null;\nlet invalidatedReticulumMetaThisSession = false;\nlet directReticulumHostAndPort;\n\nasync function refreshDirectReticulumHostAndPort() {\n  const qs = new URLSearchParams(location.search);\n  let host = qs.get("phx_host");\n  host = host || configs.RETICULUM_SOCKET_SERVER;\n  const port = configs.RETICULUM_SOCKET_SERVER_PORT;\n  directReticulumHostAndPort = {\n    host,\n    port\n  };\n}\n\nasync function invalidateReticulumMeta() {\n  invalidatedReticulumMetaThisSession = true;\n  reticulumMeta = null;\n} //TODO important function\n\nasync function connectToReticulum() {\n  let debug = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let socketClass = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : phoenix__WEBPACK_IMPORTED_MODULE_0__.Socket;\n  const qs = new URLSearchParams(location.search);\n\n  const getNewSocketUrl = async () => {\n    await refreshDirectReticulumHostAndPort();\n    const {\n      host,\n      port\n    } = directReticulumHostAndPort;\n    const protocol = qs.get("phx_protocol") || configs.RETICULUM_SOCKET_PROTOCOL || (document.location.protocol === "https:" ? "wss:" : "ws:");\n    return "".concat(protocol, "//").concat(host).concat(port ? ":".concat(port) : "");\n  };\n\n  const socketUrl = await getNewSocketUrl();\n  console.log("Phoenix Socket URL: ".concat(socketUrl));\n  const socketSettings = {};\n\n  if (debug) {\n    socketSettings.logger = (kind, msg, data) => {\n      console.log("".concat(kind, ": ").concat(msg), data);\n    };\n  }\n\n  if (params) {\n    socketSettings.params = params;\n  }\n\n  const socket = new socketClass("".concat(socketUrl, "/socket"), socketSettings);\n  socket.connect();\n  socket.onError(async () => {\n    // On error, underlying reticulum node may have died, so rebalance by\n    // fetching a new healthy node to connect to.\n    invalidateReticulumMeta();\n    const endPointPath = new URL(socket.endPoint).pathname;\n    const newSocketUrl = await getNewSocketUrl();\n    const newEndPoint = "".concat(newSocketUrl).concat(endPointPath);\n    console.log("Socket error, changed endpoint to ".concat(newEndPoint));\n    socket.endPoint = newEndPoint;\n  });\n  return socket;\n}\nfunction getPresenceEntryForSession(presences, sessionId) {\n  const entry = Object.entries(presences || {}).find(_ref => {\n    let [k] = _ref;\n    return k === sessionId;\n  }) || [];\n  const presence = entry[1];\n  return presence && presence.metas && presence.metas[0] || {};\n}\nfunction getPresenceContextForSession(presences, sessionId) {\n  return (getPresenceEntryForSession(presences, sessionId) || {}).context || {};\n}\nfunction getPresenceProfileForSession(presences, sessionId) {\n  return (getPresenceEntryForSession(presences, sessionId) || {}).profile || {};\n}\n\nfunction migrateBindings(oldChannel, newChannel) {\n  const doNotDuplicate = ["phx_close", "phx_error", "phx_reply", "presence_state", "presence_diff"];\n\n  const shouldDuplicate = event => {\n    return !event.startsWith("chan_reply_") && !doNotDuplicate.includes(event);\n  };\n\n  for (let i = 0, l = oldChannel.bindings.length; i < l; i++) {\n    const item = oldChannel.bindings[i];\n\n    if (shouldDuplicate(item.event)) {\n      newChannel.bindings.push(item);\n    }\n  }\n\n  newChannel.bindingRef = oldChannel.bindingRef;\n} // Takes the given channel, and creates a new channel with the same bindings\n// with the given socket, joins it, and leaves the old channel after joining.\n//\n// NOTE: This function relies upon phoenix channel object internals, so this\n// function will need to be reviewed if/when we ever update phoenix.js\n\n\nfunction migrateChannelToSocket(oldChannel, socket, params) {\n  const channel = socket.channel(oldChannel.topic, params || oldChannel.params);\n  migrateBindings(oldChannel, channel);\n\n  for (let i = 0, l = oldChannel.pushBuffer.length; i < l; i++) {\n    const item = oldChannel.pushBuffer[i];\n    channel.push(item.event, item.payload, item.timeout);\n  }\n\n  const oldJoinPush = oldChannel.joinPush;\n  const joinPush = channel.join();\n\n  for (let i = 0, l = oldJoinPush.recHooks.length; i < l; i++) {\n    const item = oldJoinPush.recHooks[i];\n    joinPush.receive(item.status, item.callback);\n  }\n\n  return new Promise(resolve => {\n    joinPush.receive("ok", () => {\n      // Clear all event handlers first so no duplicate messages come in.\n      oldChannel.bindings = [];\n      resolve(channel);\n    });\n  });\n}\nfunction migrateToChannel(oldChannel, newChannel) {\n  migrateBindings(oldChannel, newChannel);\n  return new Promise((resolve, reject) => {\n    newChannel.join().receive("ok", data => {\n      oldChannel.leave();\n      oldChannel.bindings = [];\n      resolve(data);\n    }).receive("error", data => {\n      newChannel.leave();\n      reject(data);\n    });\n  });\n}\nfunction discordBridgesForPresences(presences) {\n  const channels = [];\n\n  for (const p of Object.values(presences)) {\n    for (const m of p.metas) {\n      if (m.profile && m.profile.discordBridges) {\n        Array.prototype.push.apply(channels, m.profile.discordBridges.map(b => b.channel.name));\n      }\n    }\n  }\n\n  return channels;\n}\nfunction hasEmbedPresences(presences) {\n  for (const p of Object.values(presences)) {\n    for (const m of p.metas) {\n      if (m.context && m.context.embed) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\nfunction denoisePresence(_ref2) {\n  let {\n    onJoin,\n    onLeave,\n    onChange\n  } = _ref2;\n  return {\n    rawOnJoin: (key, beforeJoin, afterJoin) => {\n      if (beforeJoin === undefined) {\n        onJoin(key, afterJoin.metas[0]);\n      }\n    },\n    rawOnLeave: (key, remaining, removed) => {\n      if (remaining.metas.length === 0) {\n        onLeave(key, removed.metas[0]);\n      } else {\n        onChange(key, removed.metas[removed.metas.length - 1], remaining.metas[remaining.metas.length - 1]);\n      }\n    }\n  };\n}\nfunction presenceEventsForHub(events) {\n  const onJoin = (key, meta) => {\n    events.trigger("hub:join", {\n      key,\n      meta\n    });\n  };\n\n  const onLeave = (key, meta) => {\n    events.trigger("hub:leave", {\n      key,\n      meta\n    });\n  };\n\n  const onChange = (key, previous, current) => {\n    events.trigger("hub:change", {\n      key,\n      previous,\n      current\n    });\n  };\n\n  return {\n    onJoin,\n    onLeave,\n    onChange\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lib/modules/spoke/PhoenixUtils.ts\n')},"./src/lib/modules/spoke/SceneLoader.ts":
/*!**********************************************!*\
  !*** ./src/lib/modules/spoke/SceneLoader.ts ***!
  \**********************************************/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": function() { return /* binding */ SceneLoader; }\n/* harmony export */ });\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nclass SceneLoader {\n  constructor() {\n    _defineProperty(this, "scene", void 0);\n\n    _defineProperty(this, "mesh", void 0);\n\n    _defineProperty(this, "navMesh", void 0);\n  }\n\n  async loadScene(sceneUrl, threeLib) {\n    this.scene = threeLib.scene;\n    this.mesh = await threeLib.loadAssets(sceneUrl);\n    this.mesh = this.mesh.scene;\n    this.mesh.traverse(node => {\n      if (node.isMesh) {\n        if (node.name === "navMesh") {\n          this.navMesh = node;\n        }\n      }\n    });\n    this.scene.add(this.mesh);\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbGliL21vZHVsZXMvc3Bva2UvU2NlbmVMb2FkZXIudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBRWUsTUFBTUEsV0FBTixDQUFrQjtBQUsvQkMsRUFBQUEsV0FBVyxHQUFHO0FBQUE7O0FBQUE7O0FBQUE7QUFBRTs7QUFFRCxRQUFUQyxTQUFTLENBQUNDLFFBQUQsRUFBbUJDLFFBQW5CLEVBQXVDO0FBQ3BELFNBQUtDLEtBQUwsR0FBYUQsUUFBUSxDQUFDQyxLQUF0QjtBQUNBLFNBQUtDLElBQUwsR0FBWSxNQUFNRixRQUFRLENBQUNHLFVBQVQsQ0FBb0JKLFFBQXBCLENBQWxCO0FBQ0EsU0FBS0csSUFBTCxHQUFZLEtBQUtBLElBQUwsQ0FBVUQsS0FBdEI7QUFFQSxTQUFLQyxJQUFMLENBQVVFLFFBQVYsQ0FBb0JDLElBQUQsSUFBVTtBQUMzQixVQUFJQSxJQUFJLENBQUNDLE1BQVQsRUFBaUI7QUFDZixZQUFJRCxJQUFJLENBQUNFLElBQUwsS0FBYyxTQUFsQixFQUE2QjtBQUMzQixlQUFLQyxPQUFMLEdBQWVILElBQWY7QUFDRDtBQUNGO0FBQ0YsS0FORDtBQVFBLFNBQUtKLEtBQUwsQ0FBV1EsR0FBWCxDQUFlLEtBQUtQLElBQXBCO0FBQ0Q7O0FBckI4QiIsInNvdXJjZXMiOlsid2VicGFjazovL2F4b2xvdGlzLWNvcmUtcGx1Z2lucy8uL3NyYy9saWIvbW9kdWxlcy9zcG9rZS9TY2VuZUxvYWRlci50cz8zNjg4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRocmVlTGliIH0gZnJvbSBcIkByb290L2xpYi9tb2R1bGVzL3RocmVlL1RocmVlTGliXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNjZW5lTG9hZGVyIHtcbiAgcHJpdmF0ZSBzY2VuZTogYW55O1xuICBwcml2YXRlIG1lc2g6IGFueTtcbiAgcHVibGljIG5hdk1lc2g6IGFueTtcblxuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgYXN5bmMgbG9hZFNjZW5lKHNjZW5lVXJsOiBzdHJpbmcsIHRocmVlTGliOiBUaHJlZUxpYikge1xuICAgIHRoaXMuc2NlbmUgPSB0aHJlZUxpYi5zY2VuZTtcbiAgICB0aGlzLm1lc2ggPSBhd2FpdCB0aHJlZUxpYi5sb2FkQXNzZXRzKHNjZW5lVXJsKTtcbiAgICB0aGlzLm1lc2ggPSB0aGlzLm1lc2guc2NlbmU7XG5cbiAgICB0aGlzLm1lc2gudHJhdmVyc2UoKG5vZGUpID0+IHtcbiAgICAgIGlmIChub2RlLmlzTWVzaCkge1xuICAgICAgICBpZiAobm9kZS5uYW1lID09PSBcIm5hdk1lc2hcIikge1xuICAgICAgICAgIHRoaXMubmF2TWVzaCA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMuc2NlbmUuYWRkKHRoaXMubWVzaCk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJTY2VuZUxvYWRlciIsImNvbnN0cnVjdG9yIiwibG9hZFNjZW5lIiwic2NlbmVVcmwiLCJ0aHJlZUxpYiIsInNjZW5lIiwibWVzaCIsImxvYWRBc3NldHMiLCJ0cmF2ZXJzZSIsIm5vZGUiLCJpc01lc2giLCJuYW1lIiwibmF2TWVzaCIsImFkZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/lib/modules/spoke/SceneLoader.ts\n')},"./src/lib/modules/spoke/SpokeRoomLoader.ts":
/*!**************************************************!*\
  !*** ./src/lib/modules/spoke/SpokeRoomLoader.ts ***!
  \**************************************************/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Factory": function() { return /* binding */ Factory; },\n/* harmony export */   "SpokeRoomLoader": function() { return /* binding */ SpokeRoomLoader; }\n/* harmony export */ });\n/* harmony import */ var _aptero_axolotis_player__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aptero/axolotis-player */ "../axolotis-player/build/index.js");\n/* harmony import */ var _aptero_axolotis_player__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_aptero_axolotis_player__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _root_lib_modules_spoke_SceneLoader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @root/lib/modules/spoke/SceneLoader */ "./src/lib/modules/spoke/SceneLoader.ts");\n/* harmony import */ var _root_lib_modules_spoke_PhoenixUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @root/lib/modules/spoke/PhoenixUtils */ "./src/lib/modules/spoke/PhoenixUtils.ts");\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//import { ServiceEntity } from "@aptero/axolotis-player/build/types/modules/core/service/ServiceEntity";\n\n\n\nclass SpokeRoomLoader {\n  constructor(threeLib) {\n    this.threeLib = threeLib;\n\n    _defineProperty(this, "sceneLoader", null);\n  }\n\n  async loadRoom(hubid) {\n    const {\n      data,\n      hubPhxChannel,\n      vapiddata\n    } = await (0,_root_lib_modules_spoke_PhoenixUtils__WEBPACK_IMPORTED_MODULE_2__.load)(hubid);\n    const sceneURL = data.hubs[0].scene.model_url.replace(".bin", ".glb");\n    this.sceneLoader = new _root_lib_modules_spoke_SceneLoader__WEBPACK_IMPORTED_MODULE_1__["default"]();\n    await this.sceneLoader.loadScene(sceneURL, this.threeLib);\n  }\n\n  getType() {\n    return SpokeRoomLoader.name;\n  }\n\n}\nclass Factory {\n  async createComponent(world, config) {\n    let services = world.getFirstComponentByType(_aptero_axolotis_player__WEBPACK_IMPORTED_MODULE_0__.ServiceEntity.name);\n    let three = await services.getService("@aptero/axolotis-core-plugins/modules/three/ThreeLib");\n    let playerService = await services.getService("@aptero/axolotis-core-plugins/modules/controller/PlayerService");\n    let spokeRoomLoader = new SpokeRoomLoader(three);\n    await spokeRoomLoader.loadRoom(config.room);\n\n    if (spokeRoomLoader.sceneLoader) {\n      playerService.getCurrentPlayer().declareNavMesh(spokeRoomLoader.sceneLoader.navMesh);\n    }\n\n    return spokeRoomLoader;\n  }\n\n}\n/*\nHave to connect to the phoenix websocket\nand get scene url from message from\n["2", "2", "hub:yUXD7A2", "phx_reply", {\n    "response": {\n        "hub_requires_oauth": false,\n        "hubs": [{\n            "allow_promotion": true,\n            "description": null,\n            "embed_token": "c223b27b9e6f48c5591b4b140fe7de6f",\n            "entry_code": 180429,\n            "entry_mode": "allow",\n            "host": "dedicatedwebrtc3.aptero.co",\n            "hub_id": "yUXD7A2",\n            "lobby_count": 0,\n            "member_count": 0,\n            "member_permissions": {\n                "fly": true,\n                "pin_objects": true,\n                "spawn_and_move_media": true,\n                "spawn_camera": true,\n                "spawn_drawing": true,\n                "spawn_emoji": true\n            },\n            "name": "Lightweight Empty Room",\n            "port": "443",\n            "room_size": 50,\n            "scene": {\n                "account_id": null,\n                "allow_promotion": false,\n                "allow_remixing": false,\n                "attribution": null,\n                "attributions": { "content": [], "creator": "" },\n                "description": null,\n                "model_url": "https://alphahub.aptero.co/files/598eeed3-0768-408a-a75b-b0fcb8e907af.bin",\n                "name": "Museum",\n                "parent_scene_id": null,\n                "project_id": "wwDyQ8t",\n                "scene_id": "br4pVT2",\n                "screenshot_url": "https://alphahub.aptero.co/files/38473f11-615f-487d-b20b-f3b6558abea6.jpg",\n                "type": "scene",\n                "url": "https://alphahub.aptero.co/scenes/br4pVT2/museum"\n            },\n            "slug": "lightweight-empty-room",\n            "turn": {\n                "credential": "CWBiIUroBx9x7OITbxMrm54HiJw=",\n                "enabled": true,\n                "transports": [{ "port": 5349 }],\n                "username": "1636140736:coturn"\n            },\n            "user_data": null\n        }],\n        "perms_token": "eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50X2lkIjoiNjQwNDA3MDUwOTY2MjY5OTYxIiwiYW1wbGlmeV9hdWRpbyI6dHJ1ZSwiYXVkIjoicmV0X3Blcm1zIiwiY2xvc2VfaHViIjp0cnVlLCJjcmVhdGVfaHViIjp0cnVlLCJlbWJlZF9odWIiOnRydWUsImV4cCI6MTYzNjE0MDkxNiwiZmx5Ijp0cnVlLCJodWJfaWQiOiJ5VVhEN0EyIiwiaWF0IjoxNjM2MTQwNjE2LCJpc3MiOiIiLCJqb2luX2h1YiI6dHJ1ZSwianRpIjoiZjhkNGU2MDMtMWE0NC00MWRmLTg5NWMtNjE3ZGVhYzc5ZDI4Iiwia2lja191c2VycyI6dHJ1ZSwibXV0ZV91c2VycyI6dHJ1ZSwibmJmIjoxNjM2MTQwNjE1LCJwaW5fb2JqZWN0cyI6dHJ1ZSwicG9zdGdyZXN0X3JvbGUiOiJyZXRfYWRtaW4iLCJzcGF3bl9hbmRfbW92ZV9tZWRpYSI6dHJ1ZSwic3Bhd25fY2FtZXJhIjp0cnVlLCJzcGF3bl9kcmF3aW5nIjp0cnVlLCJzcGF3bl9lbW9qaSI6dHJ1ZSwic3ViIjoiNjQwNDA3MDUwOTY2MjY5OTYxX3lVWEQ3QTIiLCJ0d2VldCI6ZmFsc2UsInR5cCI6ImFjY2VzcyIsInVwZGF0ZV9odWIiOnRydWUsInVwZGF0ZV9odWJfcHJvbW90aW9uIjp0cnVlLCJ1cGRhdGVfcm9sZXMiOnRydWV9.qlNJloKYDmc2wSTaKF1eVYKKV_lCuuwzfdRnq3Jc-OP9P5uhKiFzo1i9N6rHBCIfITEwp8fJouD7TNOrBvpwFgxR1JHTgOpgWTdD6ltxRGspbtJRMJQ7qa66WTrVxKup4fI1ah70dFIsHu26GNdUaaNp8503VYuo41Dzs0XnTT1bLjbNM0ugJ_ZaF_d24b1m_7dLKdAn0-aZkoTQSCl3wzNDKLE90B2FJT6Mc7hqeo8d0mhr3yNQSRyJ4xLS0TBG4fvFZQL5H_bRD4Fk-q17jeMAgIAvtquElbs1cYRnQFE3g-PcsRYYRsejWaz4PEJUlZ5MM5tbohM5XoVHdRT8ZA",\n        "session_id": "a3c750b8-6446-4a1e-a638-c516073d8861",\n        "session_token": "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJyZXRfc2Vzc2lvbiIsImV4cCI6MTYzNjIyNzAxNiwiaWF0IjoxNjM2MTQwNjE2LCJpc3MiOiIiLCJqdGkiOiIzNDk4Yjg4OC01NjA0LTQxYzctYWFmZC0xMjI5NmU4YmNlYTIiLCJuYmYiOjE2MzYxNDA2MTUsInNlc3Npb25faWQiOiJhM2M3NTBiOC02NDQ2LTRhMWUtYTYzOC1jNTE2MDczZDg4NjEiLCJzdWIiOiJhM2M3NTBiOC02NDQ2LTRhMWUtYTYzOC1jNTE2MDczZDg4NjEiLCJ0eXAiOiJhY2Nlc3MifQ.EbEzkgwNJ8_H4g8vxFI-ch9HprbzNh12xkfj-OrUOkUqTF-j-qEpsF-XFIZozSlCU2cwJVD7RLuxNOuqDVF76g",\n        "subscriptions": { "favorites": true, "web_push": null }\n    }, "status": "ok"\n}];\n\n *///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lib/modules/spoke/SpokeRoomLoader.ts\n')}}]);