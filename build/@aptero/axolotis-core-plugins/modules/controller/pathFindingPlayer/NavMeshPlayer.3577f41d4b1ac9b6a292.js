/*!
 * 
 *   @aptero/axolotis-core-plugins v1.0.0
 *   https://github.com/ApteroSAS/axolotis-player
 *
 *   Copyright (c) Aptero (https://github.com/ApteroSAS/axolotis-player) and project contributors.
 *
 *   This source code is licensed under the MIT license found in the
 *   LICENSE file in the root directory of this source tree.
 *
 */
"use strict";(self.webpackChunkaxolotis_core_plugins=self.webpackChunkaxolotis_core_plugins||[]).push([["@aptero/axolotis-core-plugins/modules/controller/pathFindingPlayer/NavMeshPlayer"],{"./src/lib/modules/controller/pathFindingPlayer/NavMeshPathfinder.ts":
/*!***************************************************************************!*\
  !*** ./src/lib/modules/controller/pathFindingPlayer/NavMeshPathfinder.ts ***!
  \***************************************************************************/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "NavMeshPathfinder": function() { return /* binding */ NavMeshPathfinder; }\n/* harmony export */ });\n/* harmony import */ var three_pathfinding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three-pathfinding */ "./node_modules/three-pathfinding/dist/three-pathfinding.module.js");\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three */ "./node_modules/three/build/three.module.js");\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nclass NavMeshPathfinder {\n  constructor() {\n    _defineProperty(this, "pathfinder", void 0);\n\n    _defineProperty(this, "mesh", void 0);\n\n    _defineProperty(this, "zone", "character");\n\n    _defineProperty(this, "navGroup", null);\n\n    _defineProperty(this, "navNode", null);\n\n    _defineProperty(this, "findPOVPositionAboveNavMesh", (() => {\n      const startingFeetPosition = new three__WEBPACK_IMPORTED_MODULE_1__.Vector3();\n      const desiredFeetPosition = new three__WEBPACK_IMPORTED_MODULE_1__.Vector3(); // TODO: Here we assume the player is standing straight up, but in VR it is often the case\n      // that you want to lean over the edge of a balcony/table that does not have nav mesh below.\n      // We should find way to allow leaning over the edge of a balcony and maybe disallow putting\n      // your head through a wall.\n\n      return (startPOVPosition, desiredPOVPosition, outPOVPosition) => {\n        //const playerHeight = getCurrentPlayerHeight(true);\n        const playerHeight = 2;\n        startingFeetPosition.copy(startPOVPosition);\n        startingFeetPosition.y -= playerHeight;\n        desiredFeetPosition.copy(desiredPOVPosition);\n        desiredFeetPosition.y -= playerHeight;\n        this.findPositionOnNavMesh(startingFeetPosition, desiredFeetPosition, outPOVPosition);\n        outPOVPosition.y += playerHeight;\n        return outPOVPosition;\n      };\n    })());\n  }\n\n  isEnabled() {\n    return this.pathfinder && this.zone in this.pathfinder.zones;\n  }\n\n  loadMesh(mesh) {\n    let zone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.zone;\n    this.pathfinder = new three_pathfinding__WEBPACK_IMPORTED_MODULE_0__.Pathfinding();\n    this.mesh = null;\n    this.zone = zone;\n\n    if (this.mesh) {\n      console.error("tried to load multiple nav meshes");\n      this.removeNavMeshData();\n    }\n\n    const geometry = mesh.geometry;\n    geometry.applyMatrix4(mesh.matrixWorld);\n    this.pathfinder.setZoneData(zone, three_pathfinding__WEBPACK_IMPORTED_MODULE_0__.Pathfinding.createZone(geometry));\n    this.mesh = mesh;\n  }\n\n  getClosestNode(pos) {\n    const pathfinder = this.pathfinder;\n\n    if (!pathfinder.zones[this.zone].groups[this.navGroup]) {\n      return null;\n    }\n\n    return pathfinder.getClosestNode(pos, this.zone, this.navGroup, true) || pathfinder.getClosestNode(pos, this.zone, this.navGroup);\n  }\n\n  findPositionOnNavMesh(start, end, outPos) {\n    let shouldRecomputeGroupAndNode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    const pathfinder = this.pathfinder;\n    if (!(this.zone in pathfinder.zones)) return;\n    this.navGroup = shouldRecomputeGroupAndNode || this.navGroup === null ? pathfinder.getGroup(this.zone, end, true, true) : this.navGroup;\n    this.navNode = shouldRecomputeGroupAndNode || this.navNode === null || this.navNode === undefined ? this.getClosestNode(end) : this.navNode;\n\n    if (this.navNode === null || this.navNode === undefined) {\n      // this.navNode can be null if it has never been set or if getClosestNode fails,\n      // and it can be undefined if clampStep fails, so we have to check both. We do not\n      // simply check if it is falsey (!this.navNode), because 0 (zero) is a valid value,\n      // and 0 is falsey.\n      outPos.copy(end);\n    } else {\n      this.navNode = pathfinder.clampStep(start, end, this.navNode, this.zone, this.navGroup, outPos);\n    }\n\n    return outPos;\n  }\n  /*findPositionOnNavMesh(\n    start: Vector3,\n    end: Vector3,\n    outPos: Vector3,\n    shouldRecomputeGroupAndNode: boolean = false\n  ) {\n    const pathfinder = this.pathfinder;\n    if (!(this.zone in pathfinder.zones)) return;\n    this.navGroup =\n      shouldRecomputeGroupAndNode || this.navGroup === null\n        ? pathfinder.getGroup(this.zone, end, true, true)\n        : this.navGroup;\n    this.navNode =\n      shouldRecomputeGroupAndNode ||\n      this.navNode === null ||\n      this.navNode === undefined\n        ? this.getClosestNode(end)\n        : this.navNode;\n    if (this.navNode === null || this.navNode === undefined) {\n      // this.navNode can be null if it has never been set or if getClosestNode fails,\n      // and it can be undefined if clampStep fails, so we have to check both. We do not\n      // simply check if it is falsey (!this.navNode), because 0 (zero) is a valid value,\n      // and 0 is falsey.\n      outPos.copy(end);\n    } else {\n      try {\n        this.navNode = pathfinder.clampStep(\n          start,\n          end,\n          this.navNode,\n          this.zone,\n          this.navGroup,\n          outPos\n        );\n      } catch (e) {\n        console.error(e);\n        outPos.copy(start);\n        this.navNode = null;\n        this.navGroup = null;\n      }\n    }\n    return outPos;\n  }*/\n\n\n  removeNavMeshData() {\n    if (this.mesh && this.mesh.geometry && this.mesh.geometry.dispose) {\n      this.mesh.geometry.dispose();\n    }\n\n    this.mesh = null;\n    this.pathfinder.zones = {};\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lib/modules/controller/pathFindingPlayer/NavMeshPathfinder.ts\n')},"./src/lib/modules/controller/pathFindingPlayer/NavMeshPlayer.ts":
/*!***********************************************************************!*\
  !*** ./src/lib/modules/controller/pathFindingPlayer/NavMeshPlayer.ts ***!
  \***********************************************************************/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Factory": function() { return /* binding */ Factory; },\n/* harmony export */   "default": function() { return /* binding */ NavMeshPlayer; }\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ "./node_modules/three/build/three.module.js");\n/* harmony import */ var _aptero_axolotis_player__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aptero/axolotis-player */ "../axolotis-player/build/index.js");\n/* harmony import */ var _aptero_axolotis_player__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_aptero_axolotis_player__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _root_lib_modules_controller_pathFindingPlayer_NavMeshPathfinder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @root/lib/modules/controller/pathFindingPlayer/NavMeshPathfinder */ "./src/lib/modules/controller/pathFindingPlayer/NavMeshPathfinder.ts");\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n//import { ServiceEntity } from "@aptero/axolotis-player/build/types/modules/core/service/ServiceEntity";\n\n\nclass Factory {\n  async createComponent(world, config) {\n    let services = world.getFirstComponentByType(_aptero_axolotis_player__WEBPACK_IMPORTED_MODULE_0__.ServiceEntity.name);\n    let three = await services.getService("@aptero/axolotis-core-plugins/modules/three/ThreeLib");\n    let input = await services.getService("@aptero/axolotis-core-plugins/modules/controller/pathFindingPlayer/Input");\n    let playerService = await services.getService("@aptero/axolotis-core-plugins/modules/controller/PlayerService");\n    let frameLoop = await services.getService("@aptero/axolotis-player/modules/FrameLoop"); //let position = new THREE.Vector3(2.14, 1.48, -1.36);\n    //let position = new THREE.Vector3(0,5,0);\n\n    let position = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(config.position && config.position.x || 0, config.position && config.position.y || 0, config.position && config.position.z || 0);\n    let rotation = new three__WEBPACK_IMPORTED_MODULE_2__.Quaternion().setFromAxisAngle(new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 1, 0), -Math.PI * 0.5);\n    let playerControls = new NavMeshPlayer(position, rotation, await three, await input, playerService);\n    playerService.declarePlayer(playerControls);\n    playerControls.Initialize();\n    (await frameLoop).addLoop(NavMeshPlayer.name, delta => {\n      playerControls.Update(delta);\n    });\n    return playerControls;\n  }\n\n}\nconst NAV_ZONE = "character";\nclass NavMeshPlayer {\n  //playerHeight\n  getType() {\n    return NavMeshPlayer.name;\n  }\n\n  askFlyMode() {}\n\n  declareNavMesh(navMesh) {\n    this.navMesh.loadMesh(navMesh, NAV_ZONE);\n  }\n\n  teleportToLocation(x, y, z) {\n    this.position.copy(new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(x, y, z));\n  }\n\n  getHeadPosition(targetCopy) {\n    targetCopy.copy(this.position);\n  }\n\n  constructor(position, rotation, three, input, playerService) {\n    this.input = input;\n    this.playerService = playerService;\n\n    _defineProperty(this, "camera", void 0);\n\n    _defineProperty(this, "timeZeroToMax", void 0);\n\n    _defineProperty(this, "decceleration", void 0);\n\n    _defineProperty(this, "speed", void 0);\n\n    _defineProperty(this, "maxSpeed", void 0);\n\n    _defineProperty(this, "mouseSpeed", void 0);\n\n    _defineProperty(this, "acceleration", void 0);\n\n    _defineProperty(this, "isLocked", void 0);\n\n    _defineProperty(this, "angles", void 0);\n\n    _defineProperty(this, "pitch", void 0);\n\n    _defineProperty(this, "jumpVelocity", void 0);\n\n    _defineProperty(this, "yaw", void 0);\n\n    _defineProperty(this, "tempVec", void 0);\n\n    _defineProperty(this, "moveDir", void 0);\n\n    _defineProperty(this, "yOffset", void 0);\n\n    _defineProperty(this, "xAxis", void 0);\n\n    _defineProperty(this, "yAxis", void 0);\n\n    _defineProperty(this, "position", void 0);\n\n    _defineProperty(this, "positionOutTmp", new three__WEBPACK_IMPORTED_MODULE_2__.Vector3());\n\n    _defineProperty(this, "positionOutTmp2", new three__WEBPACK_IMPORTED_MODULE_2__.Vector3());\n\n    _defineProperty(this, "rotation", void 0);\n\n    _defineProperty(this, "velocity", void 0);\n\n    _defineProperty(this, "navMesh", void 0);\n\n    _defineProperty(this, "OnPointerlockChange", () => {\n      if (document.pointerLockElement) {\n        this.isLocked = true;\n        return;\n      }\n\n      this.isLocked = false;\n    });\n\n    _defineProperty(this, "OnMouseMove", event => {\n      if (!this.isLocked) {\n        return;\n      }\n\n      const {\n        movementX,\n        movementY\n      } = event;\n      this.angles.y -= movementX * this.mouseSpeed;\n      this.angles.x -= movementY * this.mouseSpeed;\n      this.angles.x = Math.max(-Math.PI / 2, Math.min(Math.PI / 2, this.angles.x));\n      this.UpdateRotation();\n    });\n\n    _defineProperty(this, "Accelarate", (direction, t) => {\n      const accel = this.tempVec.copy(direction).multiplyScalar(this.acceleration * t);\n      this.speed.add(accel);\n      this.speed.clampLength(0.0, this.maxSpeed);\n    });\n\n    _defineProperty(this, "Deccelerate", t => {\n      const frameDeccel = this.tempVec.copy(this.speed).multiplyScalar(this.decceleration * t);\n      this.speed.add(frameDeccel);\n    });\n\n    this.position = position;\n    this.rotation = rotation;\n    this.navMesh = new _root_lib_modules_controller_pathFindingPlayer_NavMeshPathfinder__WEBPACK_IMPORTED_MODULE_1__.NavMeshPathfinder();\n    this.camera = three.camera;\n    this.timeZeroToMax = 0.08;\n    this.maxSpeed = 7.0;\n    this.speed = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3();\n    this.acceleration = this.maxSpeed / this.timeZeroToMax;\n    this.decceleration = -7.0;\n    this.mouseSpeed = 0.002;\n    this.isLocked = false;\n    this.angles = new three__WEBPACK_IMPORTED_MODULE_2__.Euler();\n    this.pitch = new three__WEBPACK_IMPORTED_MODULE_2__.Quaternion();\n    this.yaw = new three__WEBPACK_IMPORTED_MODULE_2__.Quaternion();\n    this.jumpVelocity = 5;\n    this.yOffset = 2;\n    this.tempVec = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3();\n    this.moveDir = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3();\n    this.xAxis = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(1.0, 0.0, 0.0);\n    this.yAxis = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(0.0, 1.0, 0.0);\n    this.velocity = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3();\n  }\n\n  Initialize() {\n    this.angles.setFromQuaternion(this.rotation);\n    this.UpdateRotation();\n    this.input.AddMouseMoveListner(this.OnMouseMove);\n    document.addEventListener("pointerlockchange", this.OnPointerlockChange);\n    this.input.AddClickListner(() => {\n      if (!this.isLocked) {\n        document.body.requestPointerLock();\n      }\n    });\n  }\n\n  UpdateRotation() {\n    this.pitch.setFromAxisAngle(this.xAxis, this.angles.x);\n    this.yaw.setFromAxisAngle(this.yAxis, this.angles.y);\n    this.rotation.multiplyQuaternions(this.yaw, this.pitch).normalize();\n    this.camera.quaternion.copy(this.rotation);\n  }\n\n  Update(t) {\n    t = t * 0.001;\n    const forwardFactor = this.input.GetKeyDown("KeyS") - this.input.GetKeyDown("KeyW");\n    const rightFactor = this.input.GetKeyDown("KeyD") - this.input.GetKeyDown("KeyA");\n    const direction = this.moveDir.set(rightFactor, 0.0, forwardFactor).normalize();\n    this.Deccelerate(t);\n    this.Accelarate(direction, t);\n    const moveVector = this.tempVec.copy(this.speed);\n    moveVector.applyQuaternion(this.yaw);\n    this.velocity.setX(moveVector.x);\n    this.velocity.setZ(moveVector.z);\n    this.velocity.multiplyScalar(t);\n    this.positionOutTmp.x = this.position.x + this.velocity.x;\n    this.positionOutTmp.y = this.position.y + this.velocity.y;\n    this.positionOutTmp.z = this.position.z + this.velocity.z;\n\n    if (this.navMesh.isEnabled()) {\n      this.navMesh.findPOVPositionAboveNavMesh(this.position, this.positionOutTmp, this.positionOutTmp2);\n    } else {\n      this.positionOutTmp2.copy(this.positionOutTmp);\n    }\n\n    this.camera.position.set(this.positionOutTmp2.x, this.positionOutTmp2.y, this.positionOutTmp2.z);\n    this.position.copy(this.camera.position);\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lib/modules/controller/pathFindingPlayer/NavMeshPlayer.ts\n')}}]);