/*!
 * 
 *   @aptero/axolotis-core-plugins v1.0.0
 *   https://github.com/ApteroSAS/axolotis-player
 *
 *   Copyright (c) Aptero (https://github.com/ApteroSAS/axolotis-player) and project contributors.
 *
 *   This source code is licensed under the MIT license found in the
 *   LICENSE file in the root directory of this source tree.
 *
 */
"use strict";(self.webpackChunkaxolotis_core_plugins=self.webpackChunkaxolotis_core_plugins||[]).push([[625],{7:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "Factory": function() { return /* binding */ Factory; },\n  "default": function() { return /* binding */ NavMeshPlayer; }\n});\n\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(212);\n// EXTERNAL MODULE: ../axolotis-player/build/index.js\nvar build = __webpack_require__(919);\n;// CONCATENATED MODULE: ./node_modules/three-pathfinding/dist/three-pathfinding.module.js\nclass p{static roundNumber(t,e){const r=Math.pow(10,e);return Math.round(t*r)/r}static sample(t){return t[Math.floor(Math.random()*t.length)]}static distanceToSquared(t,e){var r=t.x-e.x,s=t.y-e.y,n=t.z-e.z;return r*r+s*s+n*n}static isPointInPoly(t,e){for(var r=!1,s=-1,n=t.length,o=n-1;++s<n;o=s)(t[s].z<=e.z&&e.z<t[o].z||t[o].z<=e.z&&e.z<t[s].z)&&e.x<(t[o].x-t[s].x)*(e.z-t[s].z)/(t[o].z-t[s].z)+t[s].x&&(r=!r);return r}static isVectorInPolygon(t,e,r){var s=1e5,n=-1e5,o=[];return e.vertexIds.forEach(t=>{s=Math.min(r[t].y,s),n=Math.max(r[t].y,n),o.push(r[t])}),!!(t.y<n+.5&&t.y>s-.5&&this.isPointInPoly(o,t))}static triarea2(t,e,r){return(r.x-t.x)*(e.z-t.z)-(e.x-t.x)*(r.z-t.z)}static vequal(t,e){return this.distanceToSquared(t,e)<1e-5}static mergeVertices(r,s=1e-4){s=Math.max(s,Number.EPSILON);for(var n={},o=r.getIndex(),i=r.getAttribute("position"),h=o?o.count:i.count,c=0,a=[],u=[],l=Math.log10(1/s),d=Math.pow(10,l),p=0;p<h;p++){var g=o?o.getX(p):p,f="";f+=~~(i.getX(g)*d)+",",f+=~~(i.getY(g)*d)+",",(f+=~~(i.getZ(g)*d)+",")in n?a.push(n[f]):(u.push(i.getX(g)),u.push(i.getY(g)),u.push(i.getZ(g)),n[f]=c,a.push(c),c++)}const v=new three_module.BufferAttribute(new Float32Array(u),i.itemSize,i.normalized),b=new three_module.BufferGeometry;return b.setAttribute("position",v),b.setIndex(a),b}}class g{constructor(t){this.content=[],this.scoreFunction=t}push(t){this.content.push(t),this.sinkDown(this.content.length-1)}pop(){const t=this.content[0],e=this.content.pop();return this.content.length>0&&(this.content[0]=e,this.bubbleUp(0)),t}remove(t){const e=this.content.indexOf(t),r=this.content.pop();e!==this.content.length-1&&(this.content[e]=r,this.scoreFunction(r)<this.scoreFunction(t)?this.sinkDown(e):this.bubbleUp(e))}size(){return this.content.length}rescoreElement(t){this.sinkDown(this.content.indexOf(t))}sinkDown(t){const e=this.content[t];for(;t>0;){const r=(t+1>>1)-1,s=this.content[r];if(!(this.scoreFunction(e)<this.scoreFunction(s)))break;this.content[r]=e,this.content[t]=s,t=r}}bubbleUp(t){const e=this.content.length,r=this.content[t],s=this.scoreFunction(r);for(;;){const n=t+1<<1,o=n-1;let i,h=null;if(o<e&&(i=this.scoreFunction(this.content[o]),i<s&&(h=o)),n<e&&this.scoreFunction(this.content[n])<(null===h?s:i)&&(h=n),null===h)break;this.content[t]=this.content[h],this.content[h]=r,t=h}}}class f{constructor(){this.portals=[]}push(t,e){void 0===e&&(e=t),this.portals.push({left:t,right:e})}stringPull(){const t=this.portals,e=[];let r,s,n,o=0,i=0,h=0;r=t[0].left,s=t[0].left,n=t[0].right,e.push(r);for(let c=1;c<t.length;c++){const a=t[c].left,u=t[c].right;if(p.triarea2(r,n,u)<=0){if(!(p.vequal(r,n)||p.triarea2(r,s,u)>0)){e.push(s),r=s,o=i,s=r,n=r,i=o,h=o,c=o;continue}n=u,h=c}if(p.triarea2(r,s,a)>=0){if(!(p.vequal(r,s)||p.triarea2(r,n,a)<0)){e.push(n),r=n,o=h,s=r,n=r,i=o,h=o,c=o;continue}s=a,i=c}}return 0!==e.length&&p.vequal(e[e.length-1],t[t.length-1].left)||e.push(t[t.length-1].left),this.path=e,e}}class v{constructor(){this.zones={}}static createZone(t,e=1e-4){return class{static buildZone(t,e){const s=this._buildNavigationMesh(t,e),n={};s.vertices.forEach(t=>{t.x=p.roundNumber(t.x,2),t.y=p.roundNumber(t.y,2),t.z=p.roundNumber(t.z,2)}),n.vertices=s.vertices;const o=this._buildPolygonGroups(s);return n.groups=new Array(o.length),o.forEach((t,e)=>{const s=new Map;t.forEach((t,e)=>{s.set(t,e)});const o=new Array(t.length);t.forEach((t,e)=>{const i=[];t.neighbours.forEach(t=>i.push(s.get(t)));const h=[];t.neighbours.forEach(e=>h.push(this._getSharedVerticesInOrder(t,e)));const c=new three_module.Vector3(0,0,0);c.add(n.vertices[t.vertexIds[0]]),c.add(n.vertices[t.vertexIds[1]]),c.add(n.vertices[t.vertexIds[2]]),c.divideScalar(3),c.x=p.roundNumber(c.x,2),c.y=p.roundNumber(c.y,2),c.z=p.roundNumber(c.z,2),o[e]={id:e,neighbours:i,vertexIds:t.vertexIds,centroid:c,portals:h}}),n.groups[e]=o}),n}static _buildNavigationMesh(t,e){return t=p.mergeVertices(t,e),this._buildPolygonsFromGeometry(t)}static _spreadGroupId(t){let e=new Set([t]);for(;e.size>0;){const r=e;e=new Set,r.forEach(r=>{r.group=t.group,r.neighbours.forEach(t=>{void 0===t.group&&e.add(t)})})}}static _buildPolygonGroups(t){const e=[];return t.polygons.forEach(t=>{void 0!==t.group?e[t.group].push(t):(t.group=e.length,this._spreadGroupId(t),e.push([t]))}),e}static _buildPolygonNeighbours(t,e){const r=new Set,s=e[t.vertexIds[1]],n=e[t.vertexIds[2]];return e[t.vertexIds[0]].forEach(e=>{e!==t&&(s.includes(e)||n.includes(e))&&r.add(e)}),s.forEach(e=>{e!==t&&n.includes(e)&&r.add(e)}),r}static _buildPolygonsFromGeometry(t){const e=[],s=[],n=t.attributes.position,o=t.index,i=[];for(let t=0;t<n.count;t++)s.push((new three_module.Vector3).fromBufferAttribute(n,t)),i[t]=[];for(let r=0;r<t.index.count;r+=3){const t=o.getX(r),s=o.getX(r+1),n=o.getX(r+2),h={vertexIds:[t,s,n],neighbours:null};e.push(h),i[t].push(h),i[s].push(h),i[n].push(h)}return e.forEach(t=>{t.neighbours=this._buildPolygonNeighbours(t,i)}),{polygons:e,vertices:s}}static _getSharedVerticesInOrder(t,e){const r=t.vertexIds,s=r[0],n=r[1],o=r[2],i=e.vertexIds,h=i.includes(s),c=i.includes(n),a=i.includes(o);return h&&c&&a?Array.from(r):h&&c?[s,n]:c&&a?[n,o]:h&&a?[o,s]:(console.warn("Error processing navigation mesh neighbors; neighbors with <2 shared vertices found."),[])}}.buildZone(t,e)}setZoneData(t,e){this.zones[t]=e}getRandomNode(t,e,s,n){if(!this.zones[t])return new three_module.Vector3;s=s||null,n=n||0;const o=[];return this.zones[t].groups[e].forEach(t=>{s&&n?p.distanceToSquared(s,t.centroid)<n*n&&o.push(t.centroid):o.push(t.centroid)}),p.sample(o)||new three_module.Vector3}getClosestNode(t,e,r,s=!1){const n=this.zones[e].vertices;let o=null,i=Infinity;return this.zones[e].groups[r].forEach(e=>{const r=p.distanceToSquared(e.centroid,t);r<i&&(!s||p.isVectorInPolygon(t,e,n))&&(o=e,i=r)}),o}findPath(t,e,s,n){const o=this.zones[s].groups[n],i=this.zones[s].vertices,h=this.getClosestNode(t,s,n,!0),c=this.getClosestNode(e,s,n,!0);if(!h||!c)return null;const a=class{static init(t){for(let e=0;e<t.length;e++){const r=t[e];r.f=0,r.g=0,r.h=0,r.cost=1,r.visited=!1,r.closed=!1,r.parent=null}}static cleanUp(t){for(let e=0;e<t.length;e++){const r=t[e];delete r.f,delete r.g,delete r.h,delete r.cost,delete r.visited,delete r.closed,delete r.parent}}static heap(){return new g(function(t){return t.f})}static search(t,e,r){this.init(t);const s=this.heap();for(s.push(e);s.size()>0;){const e=s.pop();if(e===r){let t=e;const r=[];for(;t.parent;)r.push(t),t=t.parent;return this.cleanUp(r),r.reverse()}e.closed=!0;const n=this.neighbours(t,e);for(let t=0,o=n.length;t<o;t++){const o=n[t];if(o.closed)continue;const i=e.g+o.cost,h=o.visited;if(!h||i<o.g){if(o.visited=!0,o.parent=e,!o.centroid||!r.centroid)throw new Error("Unexpected state");o.h=o.h||this.heuristic(o.centroid,r.centroid),o.g=i,o.f=o.g+o.h,h?s.rescoreElement(o):s.push(o)}}}return[]}static heuristic(t,e){return p.distanceToSquared(t,e)}static neighbours(t,e){const r=[];for(let s=0;s<e.neighbours.length;s++)r.push(t[e.neighbours[s]]);return r}}.search(o,h,c),u=function(t,e){for(var r=0;r<t.neighbours.length;r++)if(t.neighbours[r]===e.id)return t.portals[r]},l=new f;l.push(t);for(let t=0;t<a.length;t++){const e=a[t],r=a[t+1];if(r){const t=u(e,r);l.push(i[t[0]],i[t[1]])}}l.push(e),l.stringPull();const d=l.path.map(t=>new three_module.Vector3(t.x,t.y,t.z));return d.shift(),d}}v.prototype.getGroup=function(){const t=new three_module.Plane;return function(e,r,s=!1){if(!this.zones[e])return null;let n=null,o=Math.pow(50,2);const i=this.zones[e];for(let e=0;e<i.groups.length;e++){const h=i.groups[e];for(const c of h){if(s&&(t.setFromCoplanarPoints(i.vertices[c.vertexIds[0]],i.vertices[c.vertexIds[1]],i.vertices[c.vertexIds[2]]),Math.abs(t.distanceToPoint(r))<.01)&&p.isPointInPoly([i.vertices[c.vertexIds[0]],i.vertices[c.vertexIds[1]],i.vertices[c.vertexIds[2]]],r))return e;const h=p.distanceToSquared(c.centroid,r);h<o&&(n=e,o=h)}}return n}}(),v.prototype.clampStep=function(){const t=new three_module.Vector3,e=new three_module.Plane,o=new three_module.Triangle,i=new three_module.Vector3;let h,c,a=new three_module.Vector3;return function(r,s,n,u,l,d){const p=this.zones[u].vertices,g=this.zones[u].groups[l],f=[n],v={};v[n.id]=0,h=void 0,a.set(0,0,0),c=Infinity,e.setFromCoplanarPoints(p[n.vertexIds[0]],p[n.vertexIds[1]],p[n.vertexIds[2]]),e.projectPoint(s,t),i.copy(t);for(let e=f.pop();e;e=f.pop()){o.set(p[e.vertexIds[0]],p[e.vertexIds[1]],p[e.vertexIds[2]]),o.closestPointToPoint(i,t),t.distanceToSquared(i)<c&&(h=e,a.copy(t),c=t.distanceToSquared(i));const r=v[e.id];if(!(r>2))for(let t=0;t<e.neighbours.length;t++){const s=g[e.neighbours[t]];s.id in v||(f.push(s),v[s.id]=r+1)}}return d.copy(a),h}}();const b={PLAYER:new three_module.Color(15631215).convertSRGBToLinear().getHex(),TARGET:new three_module.Color(14469912).convertSRGBToLinear().getHex(),PATH:new three_module.Color(41903).convertSRGBToLinear().getHex(),WAYPOINT:new three_module.Color(41903).convertSRGBToLinear().getHex(),CLAMPED_STEP:new three_module.Color(14472114).convertSRGBToLinear().getHex(),CLOSEST_NODE:new three_module.Color(4417387).convertSRGBToLinear().getHex()};class w extends (/* unused pure expression or super */ null && (i)){constructor(){super(),this._playerMarker=new h(new c(.25,32,32),new a({color:b.PLAYER})),this._targetMarker=new h(new u(.3,.3,.3),new a({color:b.TARGET})),this._nodeMarker=new h(new u(.1,.8,.1),new a({color:b.CLOSEST_NODE})),this._stepMarker=new h(new u(.1,1,.1),new a({color:b.CLAMPED_STEP})),this._pathMarker=new i,this._pathLineMaterial=new l({color:b.PATH,linewidth:2}),this._pathPointMaterial=new a({color:b.WAYPOINT}),this._pathPointGeometry=new c(.08),this._markers=[this._playerMarker,this._targetMarker,this._nodeMarker,this._stepMarker,this._pathMarker],this._markers.forEach(t=>{t.visible=!1,this.add(t)})}setPath(r){for(;this._pathMarker.children.length;)this._pathMarker.children[0].visible=!1,this._pathMarker.remove(this._pathMarker.children[0]);r=[this._playerMarker.position].concat(r);const s=new e;s.setAttribute("position",new t(new Float32Array(3*r.length),3));for(let t=0;t<r.length;t++)s.attributes.position.setXYZ(t,r[t].x,r[t].y+.2,r[t].z);this._pathMarker.add(new d(s,this._pathLineMaterial));for(let t=0;t<r.length-1;t++){const e=new h(this._pathPointGeometry,this._pathPointMaterial);e.position.copy(r[t]),e.position.y+=.2,this._pathMarker.add(e)}return this._pathMarker.visible=!0,this}setPlayerPosition(t){return this._playerMarker.position.copy(t),this._playerMarker.visible=!0,this}setTargetPosition(t){return this._targetMarker.position.copy(t),this._targetMarker.visible=!0,this}setNodePosition(t){return this._nodeMarker.position.copy(t),this._nodeMarker.visible=!0,this}setStepPosition(t){return this._stepMarker.position.copy(t),this._stepMarker.visible=!0,this}reset(){for(;this._pathMarker.children.length;)this._pathMarker.children[0].visible=!1,this._pathMarker.remove(this._pathMarker.children[0]);return this._markers.forEach(t=>{t.visible=!1}),this}}\n//# sourceMappingURL=three-pathfinding.module.js.map\n\n;// CONCATENATED MODULE: ./src/lib/modules/controller/pathFindingPlayer/NavMeshPathfinder.ts\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nclass NavMeshPathfinder {\n  constructor() {\n    _defineProperty(this, "pathfinder", void 0);\n\n    _defineProperty(this, "mesh", void 0);\n\n    _defineProperty(this, "zone", "character");\n\n    _defineProperty(this, "navGroup", null);\n\n    _defineProperty(this, "navNode", null);\n\n    _defineProperty(this, "findPOVPositionAboveNavMesh", (() => {\n      const startingFeetPosition = new three_module.Vector3();\n      const desiredFeetPosition = new three_module.Vector3(); // TODO: Here we assume the player is standing straight up, but in VR it is often the case\n      // that you want to lean over the edge of a balcony/table that does not have nav mesh below.\n      // We should find way to allow leaning over the edge of a balcony and maybe disallow putting\n      // your head through a wall.\n\n      return (startPOVPosition, desiredPOVPosition, outPOVPosition) => {\n        //const playerHeight = getCurrentPlayerHeight(true);\n        const playerHeight = 2;\n        startingFeetPosition.copy(startPOVPosition);\n        startingFeetPosition.y -= playerHeight;\n        desiredFeetPosition.copy(desiredPOVPosition);\n        desiredFeetPosition.y -= playerHeight;\n        this.findPositionOnNavMesh(startingFeetPosition, desiredFeetPosition, outPOVPosition);\n        outPOVPosition.y += playerHeight;\n        return outPOVPosition;\n      };\n    })());\n  }\n\n  isEnabled() {\n    return this.pathfinder && this.zone in this.pathfinder.zones;\n  }\n\n  loadMesh(mesh) {\n    let zone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.zone;\n    this.pathfinder = new v();\n    this.mesh = null;\n    this.zone = zone;\n\n    if (this.mesh) {\n      console.error("tried to load multiple nav meshes");\n      this.removeNavMeshData();\n    }\n\n    const geometry = mesh.geometry;\n    geometry.applyMatrix4(mesh.matrixWorld);\n    this.pathfinder.setZoneData(zone, v.createZone(geometry));\n    this.mesh = mesh;\n  }\n\n  getClosestNode(pos) {\n    const pathfinder = this.pathfinder;\n\n    if (!pathfinder.zones[this.zone].groups[this.navGroup]) {\n      return null;\n    }\n\n    return pathfinder.getClosestNode(pos, this.zone, this.navGroup, true) || pathfinder.getClosestNode(pos, this.zone, this.navGroup);\n  }\n\n  findPositionOnNavMesh(start, end, outPos) {\n    let shouldRecomputeGroupAndNode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    const pathfinder = this.pathfinder;\n    if (!(this.zone in pathfinder.zones)) return;\n    this.navGroup = shouldRecomputeGroupAndNode || this.navGroup === null ? pathfinder.getGroup(this.zone, end, true, true) : this.navGroup;\n    this.navNode = shouldRecomputeGroupAndNode || this.navNode === null || this.navNode === undefined ? this.getClosestNode(end) : this.navNode;\n\n    if (this.navNode === null || this.navNode === undefined) {\n      // this.navNode can be null if it has never been set or if getClosestNode fails,\n      // and it can be undefined if clampStep fails, so we have to check both. We do not\n      // simply check if it is falsey (!this.navNode), because 0 (zero) is a valid value,\n      // and 0 is falsey.\n      outPos.copy(end);\n    } else {\n      this.navNode = pathfinder.clampStep(start, end, this.navNode, this.zone, this.navGroup, outPos);\n    }\n\n    return outPos;\n  }\n  /*findPositionOnNavMesh(\n    start: Vector3,\n    end: Vector3,\n    outPos: Vector3,\n    shouldRecomputeGroupAndNode: boolean = false\n  ) {\n    const pathfinder = this.pathfinder;\n    if (!(this.zone in pathfinder.zones)) return;\n    this.navGroup =\n      shouldRecomputeGroupAndNode || this.navGroup === null\n        ? pathfinder.getGroup(this.zone, end, true, true)\n        : this.navGroup;\n    this.navNode =\n      shouldRecomputeGroupAndNode ||\n      this.navNode === null ||\n      this.navNode === undefined\n        ? this.getClosestNode(end)\n        : this.navNode;\n    if (this.navNode === null || this.navNode === undefined) {\n      // this.navNode can be null if it has never been set or if getClosestNode fails,\n      // and it can be undefined if clampStep fails, so we have to check both. We do not\n      // simply check if it is falsey (!this.navNode), because 0 (zero) is a valid value,\n      // and 0 is falsey.\n      outPos.copy(end);\n    } else {\n      try {\n        this.navNode = pathfinder.clampStep(\n          start,\n          end,\n          this.navNode,\n          this.zone,\n          this.navGroup,\n          outPos\n        );\n      } catch (e) {\n        console.error(e);\n        outPos.copy(start);\n        this.navNode = null;\n        this.navGroup = null;\n      }\n    }\n    return outPos;\n  }*/\n\n\n  removeNavMeshData() {\n    if (this.mesh && this.mesh.geometry && this.mesh.geometry.dispose) {\n      this.mesh.geometry.dispose();\n    }\n\n    this.mesh = null;\n    this.pathfinder.zones = {};\n  }\n\n}\n;// CONCATENATED MODULE: ./src/lib/modules/controller/pathFindingPlayer/NavMeshPlayer.ts\nfunction NavMeshPlayer_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n//import { ServiceEntity } from "@aptero/axolotis-player/build/types/modules/core/service/ServiceEntity";\n\n\nclass Factory {\n  async createComponent(world, config) {\n    let services = world.getFirstComponentByType(build.ServiceEntity.name);\n    let three = await services.getService("@aptero/axolotis-core-plugins/modules/three/ThreeLib");\n    let input = await services.getService("@aptero/axolotis-core-plugins/modules/controller/pathFindingPlayer/Input");\n    let playerService = await services.getService("@aptero/axolotis-core-plugins/modules/controller/PlayerService");\n    let frameLoop = await services.getService("@aptero/axolotis-player/modules/FrameLoop"); //let position = new THREE.Vector3(2.14, 1.48, -1.36);\n    //let position = new THREE.Vector3(0,5,0);\n\n    let position = new three_module.Vector3(config.position && config.position.x || 0, config.position && config.position.y || 0, config.position && config.position.z || 0);\n    let rotation = new three_module.Quaternion().setFromAxisAngle(new three_module.Vector3(0, 1, 0), -Math.PI * 0.5);\n    let playerControls = new NavMeshPlayer(position, rotation, await three, await input, playerService);\n    playerService.declarePlayer(playerControls);\n    playerControls.Initialize();\n    (await frameLoop).addLoop(NavMeshPlayer.name, delta => {\n      playerControls.Update(delta);\n    });\n    return playerControls;\n  }\n\n}\nconst NAV_ZONE = "character";\nclass NavMeshPlayer {\n  //playerHeight\n  getType() {\n    return NavMeshPlayer.name;\n  }\n\n  askFlyMode() {}\n\n  declareNavMesh(navMesh) {\n    this.navMesh.loadMesh(navMesh, NAV_ZONE);\n  }\n\n  teleportToLocation(x, y, z) {\n    this.position.copy(new three_module.Vector3(x, y, z));\n  }\n\n  getHeadPosition(targetCopy) {\n    targetCopy.copy(this.position);\n  }\n\n  constructor(position, rotation, three, input, playerService) {\n    this.input = input;\n    this.playerService = playerService;\n\n    NavMeshPlayer_defineProperty(this, "camera", void 0);\n\n    NavMeshPlayer_defineProperty(this, "timeZeroToMax", void 0);\n\n    NavMeshPlayer_defineProperty(this, "decceleration", void 0);\n\n    NavMeshPlayer_defineProperty(this, "speed", void 0);\n\n    NavMeshPlayer_defineProperty(this, "maxSpeed", void 0);\n\n    NavMeshPlayer_defineProperty(this, "mouseSpeed", void 0);\n\n    NavMeshPlayer_defineProperty(this, "acceleration", void 0);\n\n    NavMeshPlayer_defineProperty(this, "isLocked", void 0);\n\n    NavMeshPlayer_defineProperty(this, "angles", void 0);\n\n    NavMeshPlayer_defineProperty(this, "pitch", void 0);\n\n    NavMeshPlayer_defineProperty(this, "jumpVelocity", void 0);\n\n    NavMeshPlayer_defineProperty(this, "yaw", void 0);\n\n    NavMeshPlayer_defineProperty(this, "tempVec", void 0);\n\n    NavMeshPlayer_defineProperty(this, "moveDir", void 0);\n\n    NavMeshPlayer_defineProperty(this, "yOffset", void 0);\n\n    NavMeshPlayer_defineProperty(this, "xAxis", void 0);\n\n    NavMeshPlayer_defineProperty(this, "yAxis", void 0);\n\n    NavMeshPlayer_defineProperty(this, "position", void 0);\n\n    NavMeshPlayer_defineProperty(this, "positionOutTmp", new three_module.Vector3());\n\n    NavMeshPlayer_defineProperty(this, "positionOutTmp2", new three_module.Vector3());\n\n    NavMeshPlayer_defineProperty(this, "rotation", void 0);\n\n    NavMeshPlayer_defineProperty(this, "velocity", void 0);\n\n    NavMeshPlayer_defineProperty(this, "navMesh", void 0);\n\n    NavMeshPlayer_defineProperty(this, "OnPointerlockChange", () => {\n      if (document.pointerLockElement) {\n        this.isLocked = true;\n        return;\n      }\n\n      this.isLocked = false;\n    });\n\n    NavMeshPlayer_defineProperty(this, "OnMouseMove", event => {\n      if (!this.isLocked) {\n        return;\n      }\n\n      const {\n        movementX,\n        movementY\n      } = event;\n      this.angles.y -= movementX * this.mouseSpeed;\n      this.angles.x -= movementY * this.mouseSpeed;\n      this.angles.x = Math.max(-Math.PI / 2, Math.min(Math.PI / 2, this.angles.x));\n      this.UpdateRotation();\n    });\n\n    NavMeshPlayer_defineProperty(this, "Accelarate", (direction, t) => {\n      const accel = this.tempVec.copy(direction).multiplyScalar(this.acceleration * t);\n      this.speed.add(accel);\n      this.speed.clampLength(0.0, this.maxSpeed);\n    });\n\n    NavMeshPlayer_defineProperty(this, "Deccelerate", t => {\n      const frameDeccel = this.tempVec.copy(this.speed).multiplyScalar(this.decceleration * t);\n      this.speed.add(frameDeccel);\n    });\n\n    this.position = position;\n    this.rotation = rotation;\n    this.navMesh = new NavMeshPathfinder();\n    this.camera = three.camera;\n    this.timeZeroToMax = 0.08;\n    this.maxSpeed = 7.0;\n    this.speed = new three_module.Vector3();\n    this.acceleration = this.maxSpeed / this.timeZeroToMax;\n    this.decceleration = -7.0;\n    this.mouseSpeed = 0.002;\n    this.isLocked = false;\n    this.angles = new three_module.Euler();\n    this.pitch = new three_module.Quaternion();\n    this.yaw = new three_module.Quaternion();\n    this.jumpVelocity = 5;\n    this.yOffset = 2;\n    this.tempVec = new three_module.Vector3();\n    this.moveDir = new three_module.Vector3();\n    this.xAxis = new three_module.Vector3(1.0, 0.0, 0.0);\n    this.yAxis = new three_module.Vector3(0.0, 1.0, 0.0);\n    this.velocity = new three_module.Vector3();\n  }\n\n  Initialize() {\n    this.angles.setFromQuaternion(this.rotation);\n    this.UpdateRotation();\n    this.input.AddMouseMoveListner(this.OnMouseMove);\n    document.addEventListener("pointerlockchange", this.OnPointerlockChange);\n    this.input.AddClickListner(() => {\n      if (!this.isLocked) {\n        document.body.requestPointerLock();\n      }\n    });\n  }\n\n  UpdateRotation() {\n    this.pitch.setFromAxisAngle(this.xAxis, this.angles.x);\n    this.yaw.setFromAxisAngle(this.yAxis, this.angles.y);\n    this.rotation.multiplyQuaternions(this.yaw, this.pitch).normalize();\n    this.camera.quaternion.copy(this.rotation);\n  }\n\n  Update(t) {\n    t = t * 0.001;\n    const forwardFactor = this.input.GetKeyDown("KeyS") - this.input.GetKeyDown("KeyW");\n    const rightFactor = this.input.GetKeyDown("KeyD") - this.input.GetKeyDown("KeyA");\n    const direction = this.moveDir.set(rightFactor, 0.0, forwardFactor).normalize();\n    this.Deccelerate(t);\n    this.Accelarate(direction, t);\n    const moveVector = this.tempVec.copy(this.speed);\n    moveVector.applyQuaternion(this.yaw);\n    this.velocity.setX(moveVector.x);\n    this.velocity.setZ(moveVector.z);\n    this.velocity.multiplyScalar(t);\n    this.positionOutTmp.x = this.position.x + this.velocity.x;\n    this.positionOutTmp.y = this.position.y + this.velocity.y;\n    this.positionOutTmp.z = this.position.z + this.velocity.z;\n\n    if (this.navMesh.isEnabled()) {\n      this.navMesh.findPOVPositionAboveNavMesh(this.position, this.positionOutTmp, this.positionOutTmp2);\n    } else {\n      this.positionOutTmp2.copy(this.positionOutTmp);\n    }\n\n    this.camera.position.set(this.positionOutTmp2.x, this.positionOutTmp2.y, this.positionOutTmp2.z);\n    this.position.copy(this.camera.position);\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n')}}]);