/*!
 * 
 *   @aptero/axolotis-core-plugins v1.0.0
 *   https://github.com/ApteroSAS/axolotis-player
 *
 *   Copyright (c) Aptero (https://github.com/ApteroSAS/axolotis-player) and project contributors.
 *
 *   This source code is licensed under the MIT license found in the
 *   LICENSE file in the root directory of this source tree.
 *
 */
"use strict";(self.webpackChunkaxolotis_core_plugins=self.webpackChunkaxolotis_core_plugins||[]).push([[422],{950:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "Factory": function() { return /* binding */ Factory; },\n  "ThreeLib": function() { return /* binding */ ThreeLib; },\n  "asyncLoadThree": function() { return /* binding */ asyncLoadThree; },\n  "getGlobalRenderer": function() { return /* binding */ getGlobalRenderer; }\n});\n\n;// CONCATENATED MODULE: ./src/lib/modules/three/ThreeAssetsLoader.ts\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nclass AssetsLoader {\n  constructor() {\n    _defineProperty(this, "loaderCache", {});\n\n    _defineProperty(this, "assets", {});\n  }\n\n  async getLoader(loaderName, loaderLoader) {\n    if (!this.loaderCache[loaderName]) {\n      this.loaderCache[loaderName] = await loaderLoader();\n    }\n\n    return this.loaderCache[loaderName];\n  }\n\n}\nconst assetsLoader = new AssetsLoader();\n;// CONCATENATED MODULE: ./src/lib/modules/three/ThreeLib.ts\nfunction ThreeLib_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\nasync function asyncLoadThree() {\n  //this async import has the only usage of renamin any import to three (using webpack chunk)\n  const THREE = await __webpack_require__.e(/* import() | @aptero/axolotis-core-plugins/three */ 796).then(__webpack_require__.bind(__webpack_require__, 212));\n  return THREE;\n}\nasync function getGlobalRenderer() {\n  var _window$axolotis;\n\n  if (!((_window$axolotis = window.axolotis) !== null && _window$axolotis !== void 0 && _window$axolotis.renderer)) {\n    const THREE = await asyncLoadThree();\n    let renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.toneMapping = THREE.ACESFilmicToneMapping;\n    renderer.toneMappingExposure = 1;\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.setPixelRatio(window.devicePixelRatio);\n    document.body.appendChild(renderer.domElement);\n\n    if (!window.axolotis) {\n      window.axolotis = {};\n    }\n\n    window.axolotis.renderer = renderer;\n  }\n\n  return window.axolotis.renderer;\n}\nclass ThreeLib {\n  constructor(frameLoop, worldService, THREE) {\n    this.frameLoop = frameLoop;\n    this.worldService = worldService;\n    this.THREE = THREE;\n\n    ThreeLib_defineProperty(this, "renderer", void 0);\n\n    ThreeLib_defineProperty(this, "scene", void 0);\n\n    ThreeLib_defineProperty(this, "camera", void 0);\n\n    ThreeLib_defineProperty(this, "preRenderPass", []);\n  }\n\n  async init() {\n    this.scene = new this.THREE.Scene();\n    this.renderer = await getGlobalRenderer();\n    this.camera = new this.THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.001, 100000);\n    this.camera.position.z = 2;\n\n    const render = () => {\n      for (const prerender of this.preRenderPass) {\n        prerender();\n      } // FINAL PASS\n\n\n      this.renderer.render(this.scene, this.camera); // set things back to normal\n\n      this.renderer.autoClear = true;\n    };\n\n    const onWindowResize = () => {\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      render();\n    };\n\n    this.worldService.addOnWorldChangeCallback(() => {\n      window.removeEventListener("resize", onWindowResize);\n      this.frameLoop.removeLoop(ThreeLib.name);\n\n      if (this.worldService.isActiveWorld()) {\n        window.addEventListener("resize", onWindowResize, false);\n        this.frameLoop.addLoop(ThreeLib.name, render);\n      }\n    }, true);\n  }\n\n  async loadAssets(path) {\n    if (assetsLoader.assets[path]) {\n      return assetsLoader.assets[path];\n    }\n    /*\n    TODO createa a early start download of assets so that the GLB start downloading early in the waterfall\n    Not as simple as it seems may be doable using service worker\n    fetch(path);//start download of assets\n    var oReq = new XMLHttpRequest();\n    oReq.addEventListener("load", ()=>{});\n    oReq.open("GET", path);\n    oReq.send();\n    */\n\n\n    if (path.endsWith(".glb")) {\n      const loader = await assetsLoader.getLoader("GLTFLoader", async () => {\n        const module = await Promise.all(/* import() | @aptero/axolotis-core-plugins/three/examples/jsm/loaders/GLTFLoader */[__webpack_require__.e(796), __webpack_require__.e(404)]).then(__webpack_require__.bind(__webpack_require__, 217));\n        const gltfLoader = new module.GLTFLoader(); //const gltfLoader = new GLTFLoader(new this.THREE.LoadingManager());\n\n        return gltfLoader;\n      });\n      const result = await loader.loadAsync(path);\n      assetsLoader.assets[path] = result;\n    }\n\n    if (path.endsWith(".jpg")) {\n      const loader = await assetsLoader.getLoader("TextureLoader", async () => {\n        const texLoader = new this.THREE.TextureLoader();\n        return texLoader;\n      });\n      const result = await loader.loadAsync(path);\n      assetsLoader.assets[path] = result;\n    }\n\n    return assetsLoader.assets[path];\n  }\n\n  getType() {\n    return ThreeLib.name;\n  }\n\n}\nclass Factory {\n  constructor() {}\n\n  async createService(services) {\n    let frameLoop = await services.getService("@aptero/axolotis-player/modules/FrameLoop");\n    let worldService = await services.getService("@aptero/axolotis-player/modules/core/WorldService");\n    const threeLib = new ThreeLib(frameLoop, worldService, await asyncLoadThree());\n    await threeLib.init();\n    return threeLib;\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///950\n')}}]);