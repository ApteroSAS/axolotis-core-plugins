/*!
 * 
 *   @aptero/axolotis-core-plugins v1.0.0
 *   https://github.com/ApteroSAS/axolotis-player
 *
 *   Copyright (c) Aptero (https://github.com/ApteroSAS/axolotis-player) and project contributors.
 *
 *   This source code is licensed under the MIT license found in the
 *   LICENSE file in the root directory of this source tree.
 *
 */
(self.webpackChunkaxolotis_core_plugins=self.webpackChunkaxolotis_core_plugins||[]).push([[133,966,422],{551:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "DebugBtn": function() { return /* binding */ DebugBtn; },\n/* harmony export */   "Factory": function() { return /* binding */ Factory; }\n/* harmony export */ });\nclass Factory {\n  async createService(services) {\n    let frameLoop = await services.getService("@aptero/axolotis-player/modules/FrameLoop");\n    return new DebugBtn(frameLoop, services);\n  }\n\n}\nclass DebugBtn {\n  constructor(frameLoop, serviceEntity) {\n    let html = \'<div id="debug-btn" style="display: block;\\n\' + "    font-family: monospace;\\n" + "    cursor: pointer;\\n" + "    position: absolute;\\n" + "    bottom: 0;\\n" + "    right: 2px;\\n" + "    padding: 4px 8px;\\n" + "    color: #fff;\\n" + "    text-shadow: 1px 1px 1px rgba(0,0,0,.5);\\n" + "    font-size: 10px;\\n" + "    -moz-user-select: none;\\n" + "    -webkit-user-select: none;\\n" + "    -ms-user-select: none;\\n" + \'    user-select: none" >60 FPS</div>\';\n    window.document.body.insertAdjacentHTML("beforeend", html);\n    let elementById = window.document.getElementById("debug-btn");\n\n    if (elementById) {\n      elementById.onclick = evt => {\n        evt.stopPropagation();\n        evt.preventDefault();\n        serviceEntity.getService("@aptero/axolotis-core-plugins/modules/debug/PerformanceStats");\n      };\n\n      frameLoop.addLoop(DebugBtn.name, delta => {\n        elementById.innerText = Math.round(1.0 / delta * 1000) + " FPS";\n      });\n    }\n\n    if (window.location.host.startsWith("localhost")) {\n      serviceEntity.getService("@aptero/axolotis-core-plugins/modules/debug/PerformanceStats");\n    }\n  }\n\n  getType() {\n    return DebugBtn.name;\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTUxLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBU08sTUFBTUEsT0FBTixDQUE4RDtBQUNoRCxRQUFiQyxhQUFhLENBQUNDLFFBQUQsRUFBNEM7QUFDN0QsUUFBSUMsU0FBUyxHQUFHLE1BQU1ELFFBQVEsQ0FBQ0UsVUFBVCxDQUNwQiwyQ0FEb0IsQ0FBdEI7QUFHQSxXQUFPLElBQUlDLFFBQUosQ0FBYUYsU0FBYixFQUF3QkQsUUFBeEIsQ0FBUDtBQUNEOztBQU5rRTtBQVM5RCxNQUFNRyxRQUFOLENBQW9DO0FBQ3pDQyxFQUFBQSxXQUFXLENBQUNILFNBQUQsRUFBdUJJLGFBQXZCLEVBQW9EO0FBQzdELFFBQUlDLElBQUksR0FDTixpREFDQSwrQkFEQSxHQUVBLHdCQUZBLEdBR0EsMkJBSEEsR0FJQSxrQkFKQSxHQUtBLG1CQUxBLEdBTUEseUJBTkEsR0FPQSxvQkFQQSxHQVFBLGdEQVJBLEdBU0Esd0JBVEEsR0FVQSwrQkFWQSxHQVdBLGtDQVhBLEdBWUEsOEJBWkEsR0FhQSxzQ0FkRjtBQWVBQyxJQUFBQSxNQUFNLENBQUNDLFFBQVAsQ0FBZ0JDLElBQWhCLENBQXFCQyxrQkFBckIsQ0FBd0MsV0FBeEMsRUFBcURKLElBQXJEO0FBQ0EsUUFBSUssV0FBVyxHQUFHSixNQUFNLENBQUNDLFFBQVAsQ0FBZ0JJLGNBQWhCLENBQStCLFdBQS9CLENBQWxCOztBQUNBLFFBQUlELFdBQUosRUFBaUI7QUFDZkEsTUFBQUEsV0FBVyxDQUFDRSxPQUFaLEdBQXVCQyxHQUFELElBQVM7QUFDN0JBLFFBQUFBLEdBQUcsQ0FBQ0MsZUFBSjtBQUNBRCxRQUFBQSxHQUFHLENBQUNFLGNBQUo7QUFDQVgsUUFBQUEsYUFBYSxDQUFDSCxVQUFkLENBQ0UsOERBREY7QUFHRCxPQU5EOztBQU9BRCxNQUFBQSxTQUFTLENBQUNnQixPQUFWLENBQWtCZCxRQUFRLENBQUNlLElBQTNCLEVBQWtDQyxLQUFELElBQVc7QUFDekNSLFFBQUFBLFdBQUQsQ0FBcUJTLFNBQXJCLEdBQ0VDLElBQUksQ0FBQ0MsS0FBTCxDQUFZLE1BQU1ILEtBQVAsR0FBZ0IsSUFBM0IsSUFBbUMsTUFEckM7QUFFRCxPQUhEO0FBSUQ7O0FBQ0QsUUFBSVosTUFBTSxDQUFDZ0IsUUFBUCxDQUFnQkMsSUFBaEIsQ0FBcUJDLFVBQXJCLENBQWdDLFdBQWhDLENBQUosRUFBa0Q7QUFDaERwQixNQUFBQSxhQUFhLENBQUNILFVBQWQsQ0FDRSw4REFERjtBQUdEO0FBQ0Y7O0FBRUR3QixFQUFBQSxPQUFPLEdBQVc7QUFDaEIsV0FBT3ZCLFFBQVEsQ0FBQ2UsSUFBaEI7QUFDRDs7QUF6Q3dDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXhvbG90aXMtY29yZS1wbHVnaW5zLy4vc3JjL2xpYi9tb2R1bGVzL2RlYnVnL0RlYnVnQnRuLnRzP2I4NDAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgV2VicGFja0xhenlNb2R1bGUgfSBmcm9tIFwiQGFwdGVyby9heG9sb3Rpcy1wbGF5ZXIvYnVpbGQvdHlwZXMvbW9kdWxlcy9jb3JlL2xvYWRlci9XZWJwYWNrTG9hZGVyXCI7XG5pbXBvcnQge1xuICBMYXp5U2VydmljZXMsXG4gIFNlcnZpY2UsXG59IGZyb20gXCJAYXB0ZXJvL2F4b2xvdGlzLXBsYXllci9idWlsZC90eXBlcy9tb2R1bGVzL2NvcmUvc2VydmljZS9MYXp5U2VydmljZXNcIjtcbmltcG9ydCB7IEZyYW1lTG9vcCB9IGZyb20gXCJAYXB0ZXJvL2F4b2xvdGlzLXBsYXllci9idWlsZC90eXBlcy9tb2R1bGVzL0ZyYW1lTG9vcFwiO1xuaW1wb3J0IENvbXBvbmVudCBmcm9tIFwiQGFwdGVyby9heG9sb3Rpcy1wbGF5ZXIvYnVpbGQvdHlwZXMvbW9kdWxlcy9jb3JlL2Vjcy9Db21wb25lbnRcIjtcbmltcG9ydCB7IFBlcmZvcm1hbmNlU3RhdHMgfSBmcm9tIFwiQHJvb3QvbGliL21vZHVsZXMvZGVidWcvUGVyZm9ybWFuY2VTdGF0c1wiO1xuXG5leHBvcnQgY2xhc3MgRmFjdG9yeSBpbXBsZW1lbnRzIFdlYnBhY2tMYXp5TW9kdWxlLCBTZXJ2aWNlPERlYnVnQnRuPiB7XG4gIGFzeW5jIGNyZWF0ZVNlcnZpY2Uoc2VydmljZXM6IExhenlTZXJ2aWNlcyk6IFByb21pc2U8RGVidWdCdG4+IHtcbiAgICBsZXQgZnJhbWVMb29wID0gYXdhaXQgc2VydmljZXMuZ2V0U2VydmljZTxGcmFtZUxvb3A+KFxuICAgICAgXCJAYXB0ZXJvL2F4b2xvdGlzLXBsYXllci9tb2R1bGVzL0ZyYW1lTG9vcFwiXG4gICAgKTtcbiAgICByZXR1cm4gbmV3IERlYnVnQnRuKGZyYW1lTG9vcCwgc2VydmljZXMpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBEZWJ1Z0J0biBpbXBsZW1lbnRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGZyYW1lTG9vcDogRnJhbWVMb29wLCBzZXJ2aWNlRW50aXR5OiBMYXp5U2VydmljZXMpIHtcbiAgICBsZXQgaHRtbCA9XG4gICAgICAnPGRpdiBpZD1cImRlYnVnLWJ0blwiIHN0eWxlPVwiZGlzcGxheTogYmxvY2s7XFxuJyArXG4gICAgICBcIiAgICBmb250LWZhbWlseTogbW9ub3NwYWNlO1xcblwiICtcbiAgICAgIFwiICAgIGN1cnNvcjogcG9pbnRlcjtcXG5cIiArXG4gICAgICBcIiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuXCIgK1xuICAgICAgXCIgICAgYm90dG9tOiAwO1xcblwiICtcbiAgICAgIFwiICAgIHJpZ2h0OiAycHg7XFxuXCIgK1xuICAgICAgXCIgICAgcGFkZGluZzogNHB4IDhweDtcXG5cIiArXG4gICAgICBcIiAgICBjb2xvcjogI2ZmZjtcXG5cIiArXG4gICAgICBcIiAgICB0ZXh0LXNoYWRvdzogMXB4IDFweCAxcHggcmdiYSgwLDAsMCwuNSk7XFxuXCIgK1xuICAgICAgXCIgICAgZm9udC1zaXplOiAxMHB4O1xcblwiICtcbiAgICAgIFwiICAgIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxuXCIgK1xuICAgICAgXCIgICAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcXG5cIiArXG4gICAgICBcIiAgICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7XFxuXCIgK1xuICAgICAgJyAgICB1c2VyLXNlbGVjdDogbm9uZVwiID42MCBGUFM8L2Rpdj4nO1xuICAgIHdpbmRvdy5kb2N1bWVudC5ib2R5Lmluc2VydEFkamFjZW50SFRNTChcImJlZm9yZWVuZFwiLCBodG1sKTtcbiAgICBsZXQgZWxlbWVudEJ5SWQgPSB3aW5kb3cuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkZWJ1Zy1idG5cIik7XG4gICAgaWYgKGVsZW1lbnRCeUlkKSB7XG4gICAgICBlbGVtZW50QnlJZC5vbmNsaWNrID0gKGV2dCkgPT4ge1xuICAgICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBzZXJ2aWNlRW50aXR5LmdldFNlcnZpY2U8UGVyZm9ybWFuY2VTdGF0cz4oXG4gICAgICAgICAgXCJAYXB0ZXJvL2F4b2xvdGlzLWNvcmUtcGx1Z2lucy9tb2R1bGVzL2RlYnVnL1BlcmZvcm1hbmNlU3RhdHNcIlxuICAgICAgICApO1xuICAgICAgfTtcbiAgICAgIGZyYW1lTG9vcC5hZGRMb29wKERlYnVnQnRuLm5hbWUsIChkZWx0YSkgPT4ge1xuICAgICAgICAoZWxlbWVudEJ5SWQgYXMgYW55KS5pbm5lclRleHQgPVxuICAgICAgICAgIE1hdGgucm91bmQoKDEuMCAvIGRlbHRhKSAqIDEwMDApICsgXCIgRlBTXCI7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5ob3N0LnN0YXJ0c1dpdGgoXCJsb2NhbGhvc3RcIikpIHtcbiAgICAgIHNlcnZpY2VFbnRpdHkuZ2V0U2VydmljZTxQZXJmb3JtYW5jZVN0YXRzPihcbiAgICAgICAgXCJAYXB0ZXJvL2F4b2xvdGlzLWNvcmUtcGx1Z2lucy9tb2R1bGVzL2RlYnVnL1BlcmZvcm1hbmNlU3RhdHNcIlxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBnZXRUeXBlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIERlYnVnQnRuLm5hbWU7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJGYWN0b3J5IiwiY3JlYXRlU2VydmljZSIsInNlcnZpY2VzIiwiZnJhbWVMb29wIiwiZ2V0U2VydmljZSIsIkRlYnVnQnRuIiwiY29uc3RydWN0b3IiLCJzZXJ2aWNlRW50aXR5IiwiaHRtbCIsIndpbmRvdyIsImRvY3VtZW50IiwiYm9keSIsImluc2VydEFkamFjZW50SFRNTCIsImVsZW1lbnRCeUlkIiwiZ2V0RWxlbWVudEJ5SWQiLCJvbmNsaWNrIiwiZXZ0Iiwic3RvcFByb3BhZ2F0aW9uIiwicHJldmVudERlZmF1bHQiLCJhZGRMb29wIiwibmFtZSIsImRlbHRhIiwiaW5uZXJUZXh0IiwiTWF0aCIsInJvdW5kIiwibG9jYXRpb24iLCJob3N0Iiwic3RhcnRzV2l0aCIsImdldFR5cGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///551\n')},997:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "Factory": function() { return /* binding */ Factory; },\n  "PerformanceStats": function() { return /* binding */ PerformanceStats; }\n});\n\n;// CONCATENATED MODULE: ./node_modules/three/examples/jsm/libs/stats.module.js\nvar Stats = function () {\n\n\tvar mode = 0;\n\n\tvar container = document.createElement( \'div\' );\n\tcontainer.style.cssText = \'position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\';\n\tcontainer.addEventListener( \'click\', function ( event ) {\n\n\t\tevent.preventDefault();\n\t\tshowPanel( ++ mode % container.children.length );\n\n\t}, false );\n\n\t//\n\n\tfunction addPanel( panel ) {\n\n\t\tcontainer.appendChild( panel.dom );\n\t\treturn panel;\n\n\t}\n\n\tfunction showPanel( id ) {\n\n\t\tfor ( var i = 0; i < container.children.length; i ++ ) {\n\n\t\t\tcontainer.children[ i ].style.display = i === id ? \'block\' : \'none\';\n\n\t\t}\n\n\t\tmode = id;\n\n\t}\n\n\t//\n\n\tvar beginTime = ( performance || Date ).now(), prevTime = beginTime, frames = 0;\n\n\tvar fpsPanel = addPanel( new Stats.Panel( \'FPS\', \'#0ff\', \'#002\' ) );\n\tvar msPanel = addPanel( new Stats.Panel( \'MS\', \'#0f0\', \'#020\' ) );\n\n\tif ( self.performance && self.performance.memory ) {\n\n\t\tvar memPanel = addPanel( new Stats.Panel( \'MB\', \'#f08\', \'#201\' ) );\n\n\t}\n\n\tshowPanel( 0 );\n\n\treturn {\n\n\t\tREVISION: 16,\n\n\t\tdom: container,\n\n\t\taddPanel: addPanel,\n\t\tshowPanel: showPanel,\n\n\t\tbegin: function () {\n\n\t\t\tbeginTime = ( performance || Date ).now();\n\n\t\t},\n\n\t\tend: function () {\n\n\t\t\tframes ++;\n\n\t\t\tvar time = ( performance || Date ).now();\n\n\t\t\tmsPanel.update( time - beginTime, 200 );\n\n\t\t\tif ( time >= prevTime + 1000 ) {\n\n\t\t\t\tfpsPanel.update( ( frames * 1000 ) / ( time - prevTime ), 100 );\n\n\t\t\t\tprevTime = time;\n\t\t\t\tframes = 0;\n\n\t\t\t\tif ( memPanel ) {\n\n\t\t\t\t\tvar memory = performance.memory;\n\t\t\t\t\tmemPanel.update( memory.usedJSHeapSize / 1048576, memory.jsHeapSizeLimit / 1048576 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn time;\n\n\t\t},\n\n\t\tupdate: function () {\n\n\t\t\tbeginTime = this.end();\n\n\t\t},\n\n\t\t// Backwards Compatibility\n\n\t\tdomElement: container,\n\t\tsetMode: showPanel\n\n\t};\n\n};\n\nStats.Panel = function ( name, fg, bg ) {\n\n\tvar min = Infinity, max = 0, round = Math.round;\n\tvar PR = round( window.devicePixelRatio || 1 );\n\n\tvar WIDTH = 80 * PR, HEIGHT = 48 * PR,\n\t\tTEXT_X = 3 * PR, TEXT_Y = 2 * PR,\n\t\tGRAPH_X = 3 * PR, GRAPH_Y = 15 * PR,\n\t\tGRAPH_WIDTH = 74 * PR, GRAPH_HEIGHT = 30 * PR;\n\n\tvar canvas = document.createElement( \'canvas\' );\n\tcanvas.width = WIDTH;\n\tcanvas.height = HEIGHT;\n\tcanvas.style.cssText = \'width:80px;height:48px\';\n\n\tvar context = canvas.getContext( \'2d\' );\n\tcontext.font = \'bold \' + ( 9 * PR ) + \'px Helvetica,Arial,sans-serif\';\n\tcontext.textBaseline = \'top\';\n\n\tcontext.fillStyle = bg;\n\tcontext.fillRect( 0, 0, WIDTH, HEIGHT );\n\n\tcontext.fillStyle = fg;\n\tcontext.fillText( name, TEXT_X, TEXT_Y );\n\tcontext.fillRect( GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT );\n\n\tcontext.fillStyle = bg;\n\tcontext.globalAlpha = 0.9;\n\tcontext.fillRect( GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT );\n\n\treturn {\n\n\t\tdom: canvas,\n\n\t\tupdate: function ( value, maxValue ) {\n\n\t\t\tmin = Math.min( min, value );\n\t\t\tmax = Math.max( max, value );\n\n\t\t\tcontext.fillStyle = bg;\n\t\t\tcontext.globalAlpha = 1;\n\t\t\tcontext.fillRect( 0, 0, WIDTH, GRAPH_Y );\n\t\t\tcontext.fillStyle = fg;\n\t\t\tcontext.fillText( round( value ) + \' \' + name + \' (\' + round( min ) + \'-\' + round( max ) + \')\', TEXT_X, TEXT_Y );\n\n\t\t\tcontext.drawImage( canvas, GRAPH_X + PR, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT, GRAPH_X, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT );\n\n\t\t\tcontext.fillRect( GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, GRAPH_HEIGHT );\n\n\t\t\tcontext.fillStyle = bg;\n\t\t\tcontext.globalAlpha = 0.9;\n\t\t\tcontext.fillRect( GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, round( ( 1 - ( value / maxValue ) ) * GRAPH_HEIGHT ) );\n\n\t\t}\n\n\t};\n\n};\n\n/* harmony default export */ var stats_module = (Stats);\n\n// EXTERNAL MODULE: ../axolotis-player/build/index.js\nvar build = __webpack_require__(919);\n// EXTERNAL MODULE: ./src/lib/modules/three/ThreeLib.ts + 1 modules\nvar ThreeLib = __webpack_require__(950);\n// EXTERNAL MODULE: ./src/lib/modules/controller/pathFindingPlayer/NavMeshPlayer.ts + 2 modules\nvar NavMeshPlayer = __webpack_require__(7);\n// EXTERNAL MODULE: ./src/lib/modules/debug/DebugBtn.ts\nvar DebugBtn = __webpack_require__(551);\n;// CONCATENATED MODULE: ./src/lib/modules/debug/PerformanceStats.ts\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst html = "<style>\\n" + "    .alarm{\\n" + "        color: #b70000;!important;\\n" + "    }\\n" + "\\n" + "    .rs-base h1{\\n" + "        margin: 0;\\n" + "        padding: 0;\\n" + "        font-size: 1.4em;\\n" + "        color: #fff;\\n" + "        margin-bottom: 5px;\\n" + "        cursor: pointer;\\n" + "    }\\n" + "\\n" + "    .rs-base div.rs-group{\\n" + "        margin-bottom: 10px;\\n" + "    }\\n" + "\\n" + "    .rs-base div.rs-group.hidden{\\n" + "        display: none;\\n" + "    }\\n" + "\\n" + "    .rs-base div.rs-fraction{\\n" + "        position: relative;\\n" + "        margin-bottom: 5px;\\n" + "    }\\n" + "\\n" + "    .rs-base div.rs-fraction p{\\n" + "        width: 120px;\\n" + "        text-align: right;\\n" + "        margin: 0;\\n" + "        padding: 0;\\n" + "    }\\n" + "\\n" + "    .rs-base div.rs-legend{\\n" + "        position: absolute;\\n" + "        line-height: 1em;\\n" + "    }\\n" + "\\n" + "    .rs-base div.rs-counter-base{\\n" + "        position: relative;\\n" + "        margin: 2px 0;\\n" + "        height: 1em;\\n" + "    }\\n" + "\\n" + "    .rs-base span.rs-counter-id{\\n" + "        color: white;\\n" + "        position: absolute;\\n" + "        left: 0;\\n" + "        top: 0;\\n" + "    }\\n" + "\\n" + "    .rs-base div.rs-counter-value{\\n" + "        color: white;\\n" + "        position: absolute;\\n" + "        left: 90px;\\n" + "        width: 30px;\\n" + "        height: 1em;\\n" + "        top: 0;\\n" + "        text-align: right;\\n" + "    }\\n" + "\\n" + "    .rs-base canvas.rs-canvas{\\n" + "        position: absolute;\\n" + "        right: 0;\\n" + "    }\\n" + "</style>\\n" + "<style>\\n" + "\\n" + "    .rs-header {\\n" + "        display: flex;\\n" + "        justify-content: space-between;\\n" + "        border-bottom: 1px rgba(255,255,255,0.1) solid;\\n" + "        margin-bottom: 8px;\\n" + "    }\\n" + "\\n" + "    .rs-collapse-btn {\\n" + "        cursor: pointer;\\n" + "        font-size: 12px;\\n" + "    }\\n" + "\\n" + "    .rs-fps-counter {\\n" + "        font-family: monospace;\\n" + "        cursor: pointer;\\n" + "        position: absolute;\\n" + "        bottom: 96px;\\n" + "        right: 2px;\\n" + "        padding: 4px 8px;\\n" + "        color: #ffffff;\\n" + "        text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.5);\\n" + "        font-size: 10px;\\n" + "        -moz-user-select: none;\\n" + "        -webkit-user-select: none;\\n" + "        -ms-user-select: none;\\n" + "        user-select: none;\\n" + "    }\\n" + "\\n" + "    .rs-base {\\n" + "        right: 10px;\\n" + "        left: auto;\\n" + "        top: 10px;\\n" + "        -moz-user-select: none;\\n" + "        -webkit-user-select: none;\\n" + "        -ms-user-select: none;\\n" + "        user-select: none;\\n" + "\\n" + "        position: absolute;\\n" + "        z-index: 10000;\\n" + "        padding: 10px;\\n" + "        background-color: #222;\\n" + "        font-size: 10px;\\n" + "        line-height: 1.2em;\\n" + "        width: 350px;\\n" + "        font-family: \'Roboto Condensed\', tahoma, sans-serif;\\n" + "        overflow: hidden;\\n" + "    }\\n" + "</style>\\n";\n\n\n//import { ServiceEntity } from "@aptero/axolotis-player/build/types/modules/core/service/ServiceEntity";\n\n\n\n //import {PortalsService} from "@aptero/axolotis-core-plugins/modules/portals/PortalsService";\n\nconst rStats = __webpack_require__(351);\n\nconst rStatsExtra = __webpack_require__(760);\n\nclass Factory {\n  async createService(services) {\n    let threeLib = await services.getService("@aptero/axolotis-core-plugins/modules/three/ThreeLib");\n    let frameLoop = await services.getService("@aptero/axolotis-player/modules/FrameLoop");\n    let worldService = await services.getService("@aptero/axolotis-player/modules/core/WorldService");\n    return new PerformanceStats(threeLib, frameLoop, worldService);\n  }\n\n}\nclass PerformanceStats {\n  constructor(threeLib, frameLoop, worldService) {\n    this.threeLib = threeLib;\n    this.worldService = worldService;\n\n    _defineProperty(this, "rS", void 0);\n\n    if (window.perfStatSingletonPresent) {\n      return; //Only one debug panel even if multiple world\n    }\n\n    window.perfStatSingletonPresent = true;\n    console.warn("MB MBytes of allocated memory. (Run Chrome with --enable-precise-memory-info) to have precise perf info");\n    const stats = stats_module();\n    stats.showPanel(2);\n    document.body.appendChild(stats.dom);\n    this.updateRstats();\n    window.document.body.insertAdjacentHTML("beforeend", html);\n\n    if (worldService.isActiveWorld()) {\n      const animate = t => {\n        //Avoir using frameloop for this so it does not appear on perf\n        requestAnimationFrame(animate);\n        stats.update();\n        this.rS().update();\n        this.rS("framerate").end();\n        this.rS("framerate").start();\n      };\n\n      requestAnimationFrame(animate);\n    }\n\n    worldService.addOnWorldAdded(() => {\n      this.updateWorldCallback();\n    }, true);\n  }\n\n  updateRstats() {\n    let elementsByClassName = document.body.getElementsByClassName("rs-base");\n\n    if (elementsByClassName.length != 0) {\n      elementsByClassName[0].remove();\n    } //https://spite.github.io/rstats/\n\n\n    const threeStats = new window.threeStats(this.threeLib.renderer); //const glS = new window.glStats(); // init at any point\n\n    const plugins = [threeStats];\n    let config = {\n      css: [],\n      // Our stylesheet is injected from AFrame.\n      values: {\n        framerate: {\n          caption: "Frame (ms)",\n          over: 19\n        } //17 ms = 60fps\n\n      },\n      groups: [],\n      plugins: plugins\n    };\n\n    for (let i = 0; i < this.worldService.getWorlds().length; i++) {\n      config.values[build.FrameLoop.name.toLowerCase() + "-" + i] = {\n        caption: build.FrameLoop.name + " (ms)",\n        over: 10\n      };\n      config.values[ThreeLib.ThreeLib.name.toLowerCase() + "-" + i] = {\n        caption: ThreeLib.ThreeLib.name + " (ms)"\n      };\n      config.values[NavMeshPlayer["default"].name.toLowerCase() + "-" + i] = {\n        caption: NavMeshPlayer["default"].name + " (ms)"\n      };\n      config.values[DebugBtn.DebugBtn.name.toLowerCase() + "-" + i] = {\n        caption: DebugBtn.DebugBtn.name + " (ms)"\n      };\n      config.values[PerformanceStats.name.toLowerCase() + "-" + i] = {\n        caption: PerformanceStats.name + " (ms)"\n      }; //config.values[PortalsService.name.toLowerCase()+"-"+i] = { caption: PortalsService.name + " (ms)" };\n\n      config.groups.push({\n        caption: "World - " + i,\n        values: [build.FrameLoop.name.toLowerCase() + "-" + i, ThreeLib.ThreeLib.name.toLowerCase() + "-" + i, NavMeshPlayer["default"].name.toLowerCase() + "-" + i] //PortalsService.name.toLowerCase()+"-"+i]\n\n      });\n    }\n\n    this.rS = new rStats(config);\n  }\n\n  updateWorldCallback() {\n    console.log("new world :", this.worldService.getWorlds());\n    this.updateRstats();\n    this.worldService.getWorlds().forEach(async (world, index) => {\n      let services = world.getFirstComponentByType(build.ServiceEntity.name);\n      let frameLoop = await services.getService("@aptero/axolotis-player/modules/FrameLoop");\n      frameLoop.setMonitoringCallback(name => {\n        this.rS(name.toLowerCase() + "-" + index).start();\n      }, name => {\n        this.rS(name.toLowerCase() + "-" + index).end();\n      });\n    });\n  }\n\n  getType() {\n    return PerformanceStats.name;\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///997\n')},760:function(module){eval('// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\nwindow.glStats = function () {\n  var _rS = null;\n  var _totalDrawArraysCalls = 0,\n      _totalDrawElementsCalls = 0,\n      _totalUseProgramCalls = 0,\n      _totalFaces = 0,\n      _totalVertices = 0,\n      _totalPoints = 0,\n      _totalBindTexures = 0;\n\n  function _h(f, c) {\n    return function () {\n      c.apply(this, arguments);\n      f.apply(this, arguments);\n    };\n  }\n\n  WebGLRenderingContext.prototype.drawArrays = _h(WebGLRenderingContext.prototype.drawArrays, function () {\n    _totalDrawArraysCalls++;\n    if (arguments[0] == this.POINTS) _totalPoints += arguments[2];else _totalVertices += arguments[2];\n  });\n  WebGLRenderingContext.prototype.drawElements = _h(WebGLRenderingContext.prototype.drawElements, function () {\n    _totalDrawElementsCalls++;\n    _totalFaces += arguments[1] / 3;\n    _totalVertices += arguments[1];\n  });\n  WebGLRenderingContext.prototype.useProgram = _h(WebGLRenderingContext.prototype.useProgram, function () {\n    _totalUseProgramCalls++;\n  });\n  WebGLRenderingContext.prototype.bindTexture = _h(WebGLRenderingContext.prototype.bindTexture, function () {\n    _totalBindTexures++;\n  });\n  var _values = {\n    allcalls: {\n      over: 3000,\n      caption: "Calls (hook)"\n    },\n    drawelements: {\n      caption: "drawElements (hook)"\n    },\n    drawarrays: {\n      caption: "drawArrays (hook)"\n    }\n  };\n  var _groups = [{\n    caption: "WebGL",\n    values: ["allcalls", "drawelements", "drawarrays", "useprogram", "bindtexture", "glfaces", "glvertices", "glpoints"]\n  }];\n  var _fractions = [{\n    base: "allcalls",\n    steps: ["drawelements", "drawarrays"]\n  }];\n\n  function _update() {\n    _rS("allcalls").set(_totalDrawArraysCalls + _totalDrawElementsCalls);\n\n    _rS("drawElements").set(_totalDrawElementsCalls);\n\n    _rS("drawArrays").set(_totalDrawArraysCalls);\n\n    _rS("bindTexture").set(_totalBindTexures);\n\n    _rS("useProgram").set(_totalUseProgramCalls);\n\n    _rS("glfaces").set(_totalFaces);\n\n    _rS("glvertices").set(_totalVertices);\n\n    _rS("glpoints").set(_totalPoints);\n  }\n\n  function _start() {\n    _totalDrawArraysCalls = 0;\n    _totalDrawElementsCalls = 0;\n    _totalUseProgramCalls = 0;\n    _totalFaces = 0;\n    _totalVertices = 0;\n    _totalPoints = 0;\n    _totalBindTexures = 0;\n  }\n\n  function _end() {}\n\n  function _attach(r) {\n    _rS = r;\n  }\n\n  return {\n    update: _update,\n    start: _start,\n    end: _end,\n    attach: _attach,\n    values: _values,\n    groups: _groups,\n    fractions: _fractions\n  };\n};\n\nwindow.threeStats = function (renderer) {\n  var _rS = null;\n  var _values = {\n    "renderer.info.memory.geometries": {\n      caption: "Geometries"\n    },\n    "renderer.info.memory.textures": {\n      caption: "Textures"\n    },\n    "renderer.info.programs": {\n      caption: "Programs"\n    },\n    "renderer.info.render.calls": {\n      caption: "Calls"\n    },\n    "renderer.info.render.triangles": {\n      caption: "Triangles",\n      over: 300000\n    },\n    "renderer.info.render.points": {\n      caption: "Points"\n    }\n  };\n  var _groups = [{\n    caption: "Three.js - Memory",\n    values: ["renderer.info.memory.geometries", "renderer.info.programs", "renderer.info.memory.textures"]\n  }, {\n    caption: "Three.js - Render",\n    values: ["renderer.info.render.calls", "renderer.info.render.triangles", "renderer.info.render.points"]\n  }];\n  var _fractions = [];\n\n  function _update() {\n    _rS("renderer.info.memory.geometries").set(renderer.info.memory.geometries);\n\n    _rS("renderer.info.programs").set(renderer.info.programs.length);\n\n    _rS("renderer.info.memory.textures").set(renderer.info.memory.textures);\n\n    _rS("renderer.info.render.calls").set(renderer.info.render.calls);\n\n    _rS("renderer.info.render.triangles").set(renderer.info.render.triangles);\n\n    _rS("renderer.info.render.points").set(renderer.info.render.points);\n  }\n\n  function _start() {}\n\n  function _end() {}\n\n  function _attach(r) {\n    _rS = r;\n  }\n\n  return {\n    update: _update,\n    start: _start,\n    end: _end,\n    attach: _attach,\n    values: _values,\n    groups: _groups,\n    fractions: _fractions\n  };\n};\n/*\n *   From https://github.com/paulirish/memory-stats.js\n */\n\n\nwindow.BrowserStats = function () {\n  var _rS = null;\n  var _usedJSHeapSize = 0,\n      _totalJSHeapSize = 0;\n\n  if (window.performance && !performance.memory) {\n    performance.memory = {\n      usedJSHeapSize: 0,\n      totalJSHeapSize: 0\n    };\n  }\n\n  if (performance.memory.totalJSHeapSize === 0) {\n    console.warn("totalJSHeapSize === 0... performance.memory is only available in Chrome .");\n  }\n\n  var _values = {\n    memory: {\n      caption: "Used Memory",\n      average: true,\n      avgMs: 1000,\n      over: 22\n    },\n    total: {\n      caption: "Total Memory"\n    }\n  };\n  var _groups = [{\n    caption: "Browser",\n    values: ["memory", "total"]\n  }];\n  var _fractions = [{\n    base: "total",\n    steps: ["memory"]\n  }];\n  var log1024 = Math.log(1024);\n\n  function _size(v) {\n    var precision = 100; //Math.pow(10, 2);\n\n    var i = Math.floor(Math.log(v) / log1024);\n    return Math.round(v * precision / Math.pow(1024, i)) / precision; // + \' \' + sizes[i];\n  }\n\n  function _update() {\n    _usedJSHeapSize = _size(performance.memory.usedJSHeapSize);\n    _totalJSHeapSize = _size(performance.memory.totalJSHeapSize);\n\n    _rS("memory").set(_usedJSHeapSize);\n\n    _rS("total").set(_totalJSHeapSize);\n  }\n\n  function _start() {\n    _usedJSHeapSize = 0;\n  }\n\n  function _end() {}\n\n  function _attach(r) {\n    _rS = r;\n  }\n\n  return {\n    update: _update,\n    start: _start,\n    end: _end,\n    attach: _attach,\n    values: _values,\n    groups: _groups,\n    fractions: _fractions\n  };\n};\n\nif (true) {\n  module.exports = {\n    glStats: window.glStats,\n    threeStats: window.threeStats,\n    BrowserStats: window.BrowserStats\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///760\n')},351:function(module){"use strict";eval('// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\n// performance.now() polyfill from https://gist.github.com/paulirish/5438650\n\n\n(function () {\n  if ("performance" in window == false) {\n    window.performance = {};\n  }\n\n  var performance = window.performance;\n\n  if ("now" in performance == false) {\n    var nowOffset = Date.now();\n\n    if (performance.timing && performance.timing.navigationStart) {\n      nowOffset = performance.timing.navigationStart;\n    }\n\n    performance.now = function now() {\n      return Date.now() - nowOffset;\n    };\n  }\n\n  if (!performance.mark) {\n    performance.mark = function () {};\n  }\n\n  if (!performance.measure) {\n    performance.measure = function () {};\n  }\n})();\n\nwindow.rStats = function rStats(settings) {\n  function iterateKeys(array, callback) {\n    var keys = Object.keys(array);\n\n    for (var j = 0, l = keys.length; j < l; j++) {\n      callback(keys[j]);\n    }\n  }\n\n  function importCSS(url) {\n    var element = document.createElement("link");\n    element.href = url;\n    element.rel = "stylesheet";\n    element.type = "text/css";\n    document.getElementsByTagName("head")[0].appendChild(element);\n  }\n\n  var _settings = settings || {};\n\n  var _colours = _settings.colours || ["#850700", "#c74900", "#fcb300", "#284280", "#4c7c0c"];\n\n  var _cssFont = "https://fonts.googleapis.com/css?family=Roboto+Condensed:400,700,300";\n\n  var _cssRStats = (_settings.CSSPath ? _settings.CSSPath : "") + "rStats.css";\n\n  var _css = _settings.css || [_cssFont, _cssRStats];\n\n  _css.forEach(function (uri) {\n    importCSS(uri);\n  });\n\n  if (!_settings.values) _settings.values = {};\n\n  var _base,\n      _div,\n      _elHeight = 10,\n      _elWidth = 200;\n\n  var _perfCounters = {};\n\n  function Graph(_dom, _id, _defArg) {\n    var _def = _defArg || {};\n\n    var _canvas = document.createElement("canvas"),\n        _ctx = _canvas.getContext("2d"),\n        _max = 0,\n        _current = 0;\n\n    var c = _def.color ? _def.color : "#666666";\n\n    var _dotCanvas = document.createElement("canvas"),\n        _dotCtx = _dotCanvas.getContext("2d");\n\n    _dotCanvas.width = 1;\n    _dotCanvas.height = 2 * _elHeight;\n    _dotCtx.fillStyle = "#444444";\n\n    _dotCtx.fillRect(0, 0, 1, 2 * _elHeight);\n\n    _dotCtx.fillStyle = c;\n\n    _dotCtx.fillRect(0, _elHeight, 1, _elHeight);\n\n    _dotCtx.fillStyle = "#ffffff";\n    _dotCtx.globalAlpha = 0.5;\n\n    _dotCtx.fillRect(0, _elHeight, 1, 1);\n\n    _dotCtx.globalAlpha = 1;\n\n    var _alarmCanvas = document.createElement("canvas"),\n        _alarmCtx = _alarmCanvas.getContext("2d");\n\n    _alarmCanvas.width = 1;\n    _alarmCanvas.height = 2 * _elHeight;\n    _alarmCtx.fillStyle = "#444444";\n\n    _alarmCtx.fillRect(0, 0, 1, 2 * _elHeight);\n\n    _alarmCtx.fillStyle = "#b70000";\n\n    _alarmCtx.fillRect(0, _elHeight, 1, _elHeight);\n\n    _alarmCtx.globalAlpha = 0.5;\n    _alarmCtx.fillStyle = "#ffffff";\n\n    _alarmCtx.fillRect(0, _elHeight, 1, 1);\n\n    _alarmCtx.globalAlpha = 1;\n\n    function _init() {\n      _canvas.width = _elWidth;\n      _canvas.height = _elHeight;\n      _canvas.style.width = _canvas.width + "px";\n      _canvas.style.height = _canvas.height + "px";\n      _canvas.className = "rs-canvas";\n\n      _dom.appendChild(_canvas);\n\n      _ctx.fillStyle = "#444444";\n\n      _ctx.fillRect(0, 0, _canvas.width, _canvas.height);\n    }\n\n    function _draw(v, alarm) {\n      _current += (v - _current) * 0.1;\n      _max *= 0.99;\n      if (_current > _max) _max = _current;\n\n      _ctx.drawImage(_canvas, 1, 0, _canvas.width - 1, _canvas.height, 0, 0, _canvas.width - 1, _canvas.height);\n\n      if (alarm) {\n        _ctx.drawImage(_alarmCanvas, _canvas.width - 1, _canvas.height - _current * _canvas.height / _max - _elHeight);\n      } else {\n        _ctx.drawImage(_dotCanvas, _canvas.width - 1, _canvas.height - _current * _canvas.height / _max - _elHeight);\n      }\n    }\n\n    _init();\n\n    return {\n      draw: _draw\n    };\n  }\n\n  function StackGraph(_dom, _num) {\n    var _canvas = document.createElement("canvas"),\n        _ctx = _canvas.getContext("2d");\n\n    function _init() {\n      _canvas.width = _elWidth;\n      _canvas.height = _elHeight * _num;\n      _canvas.style.width = _canvas.width + "px";\n      _canvas.style.height = _canvas.height + "px";\n      _canvas.className = "rs-canvas";\n\n      _dom.appendChild(_canvas);\n\n      _ctx.fillStyle = "#444444";\n\n      _ctx.fillRect(0, 0, _canvas.width, _canvas.height);\n    }\n\n    function _draw(v) {\n      _ctx.drawImage(_canvas, 1, 0, _canvas.width - 1, _canvas.height, 0, 0, _canvas.width - 1, _canvas.height);\n\n      var th = 0;\n      iterateKeys(v, function (j) {\n        var h = v[j] * _canvas.height;\n        _ctx.fillStyle = _colours[j];\n\n        _ctx.fillRect(_canvas.width - 1, th, 1, h);\n\n        th += h;\n      });\n    }\n\n    _init();\n\n    return {\n      draw: _draw\n    };\n  }\n\n  function PerfCounter(id, group) {\n    var _id = id,\n        _time,\n        _value = 0,\n        _total = 0,\n        _averageValue = 0,\n        _accumValue = 0,\n        _accumStart = performance.now(),\n        _accumSamples = 0,\n        _dom = document.createElement("div"),\n        _spanId = document.createElement("span"),\n        _spanValue = document.createElement("div"),\n        _spanValueText = document.createTextNode(""),\n        _def = _settings ? _settings.values[_id.toLowerCase()] : null,\n        _graph = new Graph(_dom, _id, _def),\n        _started = false;\n\n    _spanId.className = "rs-counter-id";\n    _spanId.textContent = _def && _def.caption ? _def.caption : _id;\n    _spanValue.className = "rs-counter-value";\n\n    _spanValue.appendChild(_spanValueText);\n\n    _dom.appendChild(_spanId);\n\n    _dom.appendChild(_spanValue);\n\n    if (group) group.div.appendChild(_dom);else _div.appendChild(_dom);\n    _time = performance.now();\n\n    function _average(v) {\n      if (_def && _def.average) {\n        _accumValue += v;\n        _accumSamples++;\n        var t = performance.now();\n\n        if (t - _accumStart >= (_def.avgMs || 1000)) {\n          _averageValue = _accumValue / _accumSamples;\n          _accumValue = 0;\n          _accumStart = t;\n          _accumSamples = 0;\n        }\n      }\n    }\n\n    function _start() {\n      _time = performance.now();\n      if (_settings.userTimingAPI) performance.mark(_id + "-start");\n      _started = true;\n    }\n\n    function _end() {\n      _value = performance.now() - _time;\n\n      if (_settings.userTimingAPI) {\n        performance.mark(_id + "-end");\n\n        if (_started) {\n          performance.measure(_id, _id + "-start", _id + "-end");\n        }\n      }\n\n      _average(_value);\n    }\n\n    function _tick() {\n      _end();\n\n      _start();\n    }\n\n    function _draw() {\n      var v = _def && _def.average ? _averageValue : _value;\n      _spanValueText.nodeValue = Math.round(v * 100) / 100;\n      var a = _def && (_def.below && _value < _def.below || _def.over && _value > _def.over);\n\n      _graph.draw(_value, a);\n\n      _dom.className = a ? "rs-counter-base alarm" : "rs-counter-base";\n    }\n\n    function _frame() {\n      var t = performance.now();\n      var e = t - _time;\n      _total++;\n\n      if (e > 1000) {\n        if (_def && _def.interpolate === false) {\n          _value = _total;\n        } else {\n          _value = _total * 1000 / e;\n        }\n\n        _total = 0;\n        _time = t;\n\n        _average(_value);\n      }\n    }\n\n    function _set(v) {\n      _value = v;\n\n      _average(_value);\n    }\n\n    return {\n      set: _set,\n      start: _start,\n      tick: _tick,\n      end: _end,\n      frame: _frame,\n      value: function () {\n        return _value;\n      },\n      draw: _draw\n    };\n  }\n\n  function sample() {\n    var _value = 0;\n\n    function _set(v) {\n      _value = v;\n    }\n\n    return {\n      set: _set,\n      value: function () {\n        return _value;\n      }\n    };\n  }\n\n  function _perf(idArg) {\n    var id = idArg.toLowerCase();\n    if (id === undefined) id = "default";\n    if (_perfCounters[id]) return _perfCounters[id];\n    var group = null;\n\n    if (_settings && _settings.groups) {\n      iterateKeys(_settings.groups, function (j) {\n        var g = _settings.groups[parseInt(j, 10)];\n\n        if (!group && g.values.indexOf(id.toLowerCase()) !== -1) {\n          group = g;\n        }\n      });\n    }\n\n    var p = new PerfCounter(id, group);\n    _perfCounters[id] = p;\n    return p;\n  }\n\n  function _init() {\n    if (_settings.plugins) {\n      if (!_settings.values) _settings.values = {};\n      if (!_settings.groups) _settings.groups = [];\n      if (!_settings.fractions) _settings.fractions = [];\n\n      for (var j = 0; j < _settings.plugins.length; j++) {\n        _settings.plugins[j].attach(_perf);\n\n        iterateKeys(_settings.plugins[j].values, function (k) {\n          _settings.values[k] = _settings.plugins[j].values[k];\n        });\n        _settings.groups = _settings.groups.concat(_settings.plugins[j].groups);\n        _settings.fractions = _settings.fractions.concat(_settings.plugins[j].fractions);\n      }\n    } else {\n      _settings.plugins = {};\n    }\n\n    _base = document.createElement("div");\n    _base.className = "rs-base";\n    _div = document.createElement("div");\n    _div.className = "rs-container";\n    _div.style.height = "auto";\n\n    _base.appendChild(_div);\n\n    document.body.appendChild(_base);\n    if (!_settings) return;\n\n    if (_settings.groups) {\n      iterateKeys(_settings.groups, function (j) {\n        var g = _settings.groups[parseInt(j, 10)];\n\n        var div = document.createElement("div");\n        div.className = "rs-group";\n        g.div = div;\n        var h1 = document.createElement("h1");\n        h1.textContent = g.caption;\n        h1.addEventListener("click", function (e) {\n          this.classList.toggle("hidden");\n          e.preventDefault();\n        }.bind(div));\n\n        _div.appendChild(h1);\n\n        _div.appendChild(div);\n      });\n    }\n\n    if (_settings.fractions) {\n      iterateKeys(_settings.fractions, function (j) {\n        var f = _settings.fractions[parseInt(j, 10)];\n\n        var div = document.createElement("div");\n        div.className = "rs-fraction";\n        var legend = document.createElement("div");\n        legend.className = "rs-legend";\n        var h = 0;\n        iterateKeys(_settings.fractions[j].steps, function (k) {\n          var p = document.createElement("p");\n          p.textContent = _settings.fractions[j].steps[k];\n          p.style.color = _colours[h];\n          legend.appendChild(p);\n          h++;\n        });\n        div.appendChild(legend);\n        div.style.height = h * _elHeight + "px";\n        f.div = div;\n        var graph = new StackGraph(div, h);\n        f.graph = graph;\n\n        _div.appendChild(div);\n      });\n    }\n  }\n\n  function _update() {\n    iterateKeys(_settings.plugins, function (j) {\n      _settings.plugins[j].update();\n    });\n    iterateKeys(_perfCounters, function (j) {\n      _perfCounters[j].draw();\n    });\n\n    if (_settings && _settings.fractions) {\n      iterateKeys(_settings.fractions, function (j) {\n        var f = _settings.fractions[parseInt(j, 10)];\n\n        var v = [];\n\n        var base = _perfCounters[f.base.toLowerCase()];\n\n        if (base) {\n          base = base.value();\n          iterateKeys(_settings.fractions[j].steps, function (k) {\n            var s = _settings.fractions[j].steps[parseInt(k, 10)].toLowerCase();\n\n            var val = _perfCounters[s];\n\n            if (val) {\n              v.push(val.value() / base);\n            }\n          });\n        }\n\n        f.graph.draw(v);\n      });\n    }\n    /*if( _height != _div.clientHeight ) {\n            _height = _div.clientHeight;\n            _base.style.height = _height + 2 * _elHeight + \'px\';\n        console.log( _base.clientHeight );\n        }*/\n\n  }\n\n  _init();\n\n  return function (id) {\n    if (id) return _perf(id);\n    return {\n      element: _base,\n      update: _update\n    };\n  };\n};\n\nif (true) {\n  module.exports = window.rStats;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///351\n')},950:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "Factory": function() { return /* binding */ Factory; },\n  "ThreeLib": function() { return /* binding */ ThreeLib; },\n  "asyncLoadThree": function() { return /* binding */ asyncLoadThree; },\n  "getGlobalRenderer": function() { return /* binding */ getGlobalRenderer; }\n});\n\n;// CONCATENATED MODULE: ./src/lib/modules/three/ThreeAssetsLoader.ts\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nclass AssetsLoader {\n  constructor() {\n    _defineProperty(this, "loaderCache", {});\n\n    _defineProperty(this, "assets", {});\n  }\n\n  async getLoader(loaderName, loaderLoader) {\n    if (!this.loaderCache[loaderName]) {\n      this.loaderCache[loaderName] = await loaderLoader();\n    }\n\n    return this.loaderCache[loaderName];\n  }\n\n}\nconst assetsLoader = new AssetsLoader();\n;// CONCATENATED MODULE: ./src/lib/modules/three/ThreeLib.ts\nfunction ThreeLib_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\nasync function asyncLoadThree() {\n  //this async import has the only usage of renamin any import to three (using webpack chunk)\n  const THREE = await __webpack_require__.e(/* import() | @aptero/axolotis-core-plugins/three */ 796).then(__webpack_require__.bind(__webpack_require__, 212));\n  return THREE;\n}\nasync function getGlobalRenderer() {\n  var _window$axolotis;\n\n  if (!((_window$axolotis = window.axolotis) !== null && _window$axolotis !== void 0 && _window$axolotis.renderer)) {\n    const THREE = await asyncLoadThree();\n    let renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.toneMapping = THREE.ACESFilmicToneMapping;\n    renderer.toneMappingExposure = 1;\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.setPixelRatio(window.devicePixelRatio);\n    document.body.appendChild(renderer.domElement);\n\n    if (!window.axolotis) {\n      window.axolotis = {};\n    }\n\n    window.axolotis.renderer = renderer;\n  }\n\n  return window.axolotis.renderer;\n}\nclass ThreeLib {\n  constructor(frameLoop, worldService, THREE) {\n    this.frameLoop = frameLoop;\n    this.worldService = worldService;\n    this.THREE = THREE;\n\n    ThreeLib_defineProperty(this, "renderer", void 0);\n\n    ThreeLib_defineProperty(this, "scene", void 0);\n\n    ThreeLib_defineProperty(this, "camera", void 0);\n\n    ThreeLib_defineProperty(this, "preRenderPass", []);\n  }\n\n  async init() {\n    this.scene = new this.THREE.Scene();\n    this.renderer = await getGlobalRenderer();\n    this.camera = new this.THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.001, 100000);\n    this.camera.position.z = 2;\n\n    const render = () => {\n      for (const prerender of this.preRenderPass) {\n        prerender();\n      } // FINAL PASS\n\n\n      this.renderer.render(this.scene, this.camera); // set things back to normal\n\n      this.renderer.autoClear = true;\n    };\n\n    const onWindowResize = () => {\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      render();\n    };\n\n    this.worldService.addOnWorldChangeCallback(() => {\n      window.removeEventListener("resize", onWindowResize);\n      this.frameLoop.removeLoop(ThreeLib.name);\n\n      if (this.worldService.isActiveWorld()) {\n        window.addEventListener("resize", onWindowResize, false);\n        this.frameLoop.addLoop(ThreeLib.name, render);\n      }\n    }, true);\n  }\n\n  async loadAssets(path) {\n    if (assetsLoader.assets[path]) {\n      return assetsLoader.assets[path];\n    }\n    /*\n    TODO createa a early start download of assets so that the GLB start downloading early in the waterfall\n    Not as simple as it seems may be doable using service worker\n    fetch(path);//start download of assets\n    var oReq = new XMLHttpRequest();\n    oReq.addEventListener("load", ()=>{});\n    oReq.open("GET", path);\n    oReq.send();\n    */\n\n\n    if (path.endsWith(".glb")) {\n      const loader = await assetsLoader.getLoader("GLTFLoader", async () => {\n        const module = await Promise.all(/* import() | @aptero/axolotis-core-plugins/three/examples/jsm/loaders/GLTFLoader */[__webpack_require__.e(796), __webpack_require__.e(404)]).then(__webpack_require__.bind(__webpack_require__, 217));\n        const gltfLoader = new module.GLTFLoader(); //const gltfLoader = new GLTFLoader(new this.THREE.LoadingManager());\n\n        return gltfLoader;\n      });\n      const result = await loader.loadAsync(path);\n      assetsLoader.assets[path] = result;\n    }\n\n    if (path.endsWith(".jpg")) {\n      const loader = await assetsLoader.getLoader("TextureLoader", async () => {\n        const texLoader = new this.THREE.TextureLoader();\n        return texLoader;\n      });\n      const result = await loader.loadAsync(path);\n      assetsLoader.assets[path] = result;\n    }\n\n    return assetsLoader.assets[path];\n  }\n\n  getType() {\n    return ThreeLib.name;\n  }\n\n}\nclass Factory {\n  constructor() {}\n\n  async createService(services) {\n    let frameLoop = await services.getService("@aptero/axolotis-player/modules/FrameLoop");\n    let worldService = await services.getService("@aptero/axolotis-player/modules/core/WorldService");\n    const threeLib = new ThreeLib(frameLoop, worldService, await asyncLoadThree());\n    await threeLib.init();\n    return threeLib;\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///950\n')}}]);