/*!
 * 
 *   @aptero/axolotis-core-plugins v1.0.0
 *   https://github.com/ApteroSAS/axolotis-player
 *
 *   Copyright (c) Aptero (https://github.com/ApteroSAS/axolotis-player) and project contributors.
 *
 *   This source code is licensed under the MIT license found in the
 *   LICENSE file in the root directory of this source tree.
 *
 */
(self.webpackChunkaxolotis_core_plugins=self.webpackChunkaxolotis_core_plugins||[]).push([["@aptero/axolotis-core-plugins/modules/debug/PerformanceStats"],{"./src/lib/modules/debug/DebugBtn.ts":
/*!*******************************************!*\
  !*** ./src/lib/modules/debug/DebugBtn.ts ***!
  \*******************************************/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "DebugBtn": function() { return /* binding */ DebugBtn; },\n/* harmony export */   "Factory": function() { return /* binding */ Factory; }\n/* harmony export */ });\nclass Factory {\n  async createService(services) {\n    let frameLoop = await services.getService("@aptero/axolotis-player/modules/FrameLoop");\n    return new DebugBtn(frameLoop, services);\n  }\n\n}\nclass DebugBtn {\n  constructor(frameLoop, serviceEntity) {\n    let html = \'<div id="debug-btn" style="display: block;\\n\' + "    font-family: monospace;\\n" + "    cursor: pointer;\\n" + "    position: absolute;\\n" + "    bottom: 0;\\n" + "    right: 2px;\\n" + "    padding: 4px 8px;\\n" + "    color: #fff;\\n" + "    text-shadow: 1px 1px 1px rgba(0,0,0,.5);\\n" + "    font-size: 10px;\\n" + "    -moz-user-select: none;\\n" + "    -webkit-user-select: none;\\n" + "    -ms-user-select: none;\\n" + \'    user-select: none" >60 FPS</div>\';\n    window.document.body.insertAdjacentHTML("beforeend", html);\n    let elementById = window.document.getElementById("debug-btn");\n\n    if (elementById) {\n      elementById.onclick = evt => {\n        evt.stopPropagation();\n        evt.preventDefault();\n        serviceEntity.getService("@aptero/axolotis-core-plugins/modules/debug/PerformanceStats");\n      };\n\n      frameLoop.addLoop(DebugBtn.name, delta => {\n        elementById.innerText = Math.round(1.0 / delta * 1000) + " FPS";\n      });\n    }\n\n    if (window.location.host.startsWith("localhost")) {\n      serviceEntity.getService("@aptero/axolotis-core-plugins/modules/debug/PerformanceStats");\n    }\n  }\n\n  getType() {\n    return DebugBtn.name;\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbGliL21vZHVsZXMvZGVidWcvRGVidWdCdG4udHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFTTyxNQUFNQSxPQUFOLENBQThEO0FBQ2hELFFBQWJDLGFBQWEsQ0FBQ0MsUUFBRCxFQUE0QztBQUM3RCxRQUFJQyxTQUFTLEdBQUcsTUFBTUQsUUFBUSxDQUFDRSxVQUFULENBQ3BCLDJDQURvQixDQUF0QjtBQUdBLFdBQU8sSUFBSUMsUUFBSixDQUFhRixTQUFiLEVBQXdCRCxRQUF4QixDQUFQO0FBQ0Q7O0FBTmtFO0FBUzlELE1BQU1HLFFBQU4sQ0FBb0M7QUFDekNDLEVBQUFBLFdBQVcsQ0FBQ0gsU0FBRCxFQUF1QkksYUFBdkIsRUFBb0Q7QUFDN0QsUUFBSUMsSUFBSSxHQUNOLGlEQUNBLCtCQURBLEdBRUEsd0JBRkEsR0FHQSwyQkFIQSxHQUlBLGtCQUpBLEdBS0EsbUJBTEEsR0FNQSx5QkFOQSxHQU9BLG9CQVBBLEdBUUEsZ0RBUkEsR0FTQSx3QkFUQSxHQVVBLCtCQVZBLEdBV0Esa0NBWEEsR0FZQSw4QkFaQSxHQWFBLHNDQWRGO0FBZUFDLElBQUFBLE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQkMsSUFBaEIsQ0FBcUJDLGtCQUFyQixDQUF3QyxXQUF4QyxFQUFxREosSUFBckQ7QUFDQSxRQUFJSyxXQUFXLEdBQUdKLE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQkksY0FBaEIsQ0FBK0IsV0FBL0IsQ0FBbEI7O0FBQ0EsUUFBSUQsV0FBSixFQUFpQjtBQUNmQSxNQUFBQSxXQUFXLENBQUNFLE9BQVosR0FBdUJDLEdBQUQsSUFBUztBQUM3QkEsUUFBQUEsR0FBRyxDQUFDQyxlQUFKO0FBQ0FELFFBQUFBLEdBQUcsQ0FBQ0UsY0FBSjtBQUNBWCxRQUFBQSxhQUFhLENBQUNILFVBQWQsQ0FDRSw4REFERjtBQUdELE9BTkQ7O0FBT0FELE1BQUFBLFNBQVMsQ0FBQ2dCLE9BQVYsQ0FBa0JkLFFBQVEsQ0FBQ2UsSUFBM0IsRUFBa0NDLEtBQUQsSUFBVztBQUN6Q1IsUUFBQUEsV0FBRCxDQUFxQlMsU0FBckIsR0FDRUMsSUFBSSxDQUFDQyxLQUFMLENBQVksTUFBTUgsS0FBUCxHQUFnQixJQUEzQixJQUFtQyxNQURyQztBQUVELE9BSEQ7QUFJRDs7QUFDRCxRQUFJWixNQUFNLENBQUNnQixRQUFQLENBQWdCQyxJQUFoQixDQUFxQkMsVUFBckIsQ0FBZ0MsV0FBaEMsQ0FBSixFQUFrRDtBQUNoRHBCLE1BQUFBLGFBQWEsQ0FBQ0gsVUFBZCxDQUNFLDhEQURGO0FBR0Q7QUFDRjs7QUFFRHdCLEVBQUFBLE9BQU8sR0FBVztBQUNoQixXQUFPdkIsUUFBUSxDQUFDZSxJQUFoQjtBQUNEOztBQXpDd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9heG9sb3Rpcy1jb3JlLXBsdWdpbnMvLi9zcmMvbGliL21vZHVsZXMvZGVidWcvRGVidWdCdG4udHM/Yjg0MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBXZWJwYWNrTGF6eU1vZHVsZSB9IGZyb20gXCJAYXB0ZXJvL2F4b2xvdGlzLXBsYXllci9idWlsZC90eXBlcy9tb2R1bGVzL2NvcmUvbG9hZGVyL1dlYnBhY2tMb2FkZXJcIjtcbmltcG9ydCB7XG4gIExhenlTZXJ2aWNlcyxcbiAgU2VydmljZSxcbn0gZnJvbSBcIkBhcHRlcm8vYXhvbG90aXMtcGxheWVyL2J1aWxkL3R5cGVzL21vZHVsZXMvY29yZS9zZXJ2aWNlL0xhenlTZXJ2aWNlc1wiO1xuaW1wb3J0IHsgRnJhbWVMb29wIH0gZnJvbSBcIkBhcHRlcm8vYXhvbG90aXMtcGxheWVyL2J1aWxkL3R5cGVzL21vZHVsZXMvRnJhbWVMb29wXCI7XG5pbXBvcnQgQ29tcG9uZW50IGZyb20gXCJAYXB0ZXJvL2F4b2xvdGlzLXBsYXllci9idWlsZC90eXBlcy9tb2R1bGVzL2NvcmUvZWNzL0NvbXBvbmVudFwiO1xuaW1wb3J0IHsgUGVyZm9ybWFuY2VTdGF0cyB9IGZyb20gXCJAcm9vdC9saWIvbW9kdWxlcy9kZWJ1Zy9QZXJmb3JtYW5jZVN0YXRzXCI7XG5cbmV4cG9ydCBjbGFzcyBGYWN0b3J5IGltcGxlbWVudHMgV2VicGFja0xhenlNb2R1bGUsIFNlcnZpY2U8RGVidWdCdG4+IHtcbiAgYXN5bmMgY3JlYXRlU2VydmljZShzZXJ2aWNlczogTGF6eVNlcnZpY2VzKTogUHJvbWlzZTxEZWJ1Z0J0bj4ge1xuICAgIGxldCBmcmFtZUxvb3AgPSBhd2FpdCBzZXJ2aWNlcy5nZXRTZXJ2aWNlPEZyYW1lTG9vcD4oXG4gICAgICBcIkBhcHRlcm8vYXhvbG90aXMtcGxheWVyL21vZHVsZXMvRnJhbWVMb29wXCJcbiAgICApO1xuICAgIHJldHVybiBuZXcgRGVidWdCdG4oZnJhbWVMb29wLCBzZXJ2aWNlcyk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIERlYnVnQnRuIGltcGxlbWVudHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoZnJhbWVMb29wOiBGcmFtZUxvb3AsIHNlcnZpY2VFbnRpdHk6IExhenlTZXJ2aWNlcykge1xuICAgIGxldCBodG1sID1cbiAgICAgICc8ZGl2IGlkPVwiZGVidWctYnRuXCIgc3R5bGU9XCJkaXNwbGF5OiBibG9jaztcXG4nICtcbiAgICAgIFwiICAgIGZvbnQtZmFtaWx5OiBtb25vc3BhY2U7XFxuXCIgK1xuICAgICAgXCIgICAgY3Vyc29yOiBwb2ludGVyO1xcblwiICtcbiAgICAgIFwiICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG5cIiArXG4gICAgICBcIiAgICBib3R0b206IDA7XFxuXCIgK1xuICAgICAgXCIgICAgcmlnaHQ6IDJweDtcXG5cIiArXG4gICAgICBcIiAgICBwYWRkaW5nOiA0cHggOHB4O1xcblwiICtcbiAgICAgIFwiICAgIGNvbG9yOiAjZmZmO1xcblwiICtcbiAgICAgIFwiICAgIHRleHQtc2hhZG93OiAxcHggMXB4IDFweCByZ2JhKDAsMCwwLC41KTtcXG5cIiArXG4gICAgICBcIiAgICBmb250LXNpemU6IDEwcHg7XFxuXCIgK1xuICAgICAgXCIgICAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcXG5cIiArXG4gICAgICBcIiAgICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcblwiICtcbiAgICAgIFwiICAgIC1tcy11c2VyLXNlbGVjdDogbm9uZTtcXG5cIiArXG4gICAgICAnICAgIHVzZXItc2VsZWN0OiBub25lXCIgPjYwIEZQUzwvZGl2Pic7XG4gICAgd2luZG93LmRvY3VtZW50LmJvZHkuaW5zZXJ0QWRqYWNlbnRIVE1MKFwiYmVmb3JlZW5kXCIsIGh0bWwpO1xuICAgIGxldCBlbGVtZW50QnlJZCA9IHdpbmRvdy5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRlYnVnLWJ0blwiKTtcbiAgICBpZiAoZWxlbWVudEJ5SWQpIHtcbiAgICAgIGVsZW1lbnRCeUlkLm9uY2xpY2sgPSAoZXZ0KSA9PiB7XG4gICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHNlcnZpY2VFbnRpdHkuZ2V0U2VydmljZTxQZXJmb3JtYW5jZVN0YXRzPihcbiAgICAgICAgICBcIkBhcHRlcm8vYXhvbG90aXMtY29yZS1wbHVnaW5zL21vZHVsZXMvZGVidWcvUGVyZm9ybWFuY2VTdGF0c1wiXG4gICAgICAgICk7XG4gICAgICB9O1xuICAgICAgZnJhbWVMb29wLmFkZExvb3AoRGVidWdCdG4ubmFtZSwgKGRlbHRhKSA9PiB7XG4gICAgICAgIChlbGVtZW50QnlJZCBhcyBhbnkpLmlubmVyVGV4dCA9XG4gICAgICAgICAgTWF0aC5yb3VuZCgoMS4wIC8gZGVsdGEpICogMTAwMCkgKyBcIiBGUFNcIjtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAod2luZG93LmxvY2F0aW9uLmhvc3Quc3RhcnRzV2l0aChcImxvY2FsaG9zdFwiKSkge1xuICAgICAgc2VydmljZUVudGl0eS5nZXRTZXJ2aWNlPFBlcmZvcm1hbmNlU3RhdHM+KFxuICAgICAgICBcIkBhcHRlcm8vYXhvbG90aXMtY29yZS1wbHVnaW5zL21vZHVsZXMvZGVidWcvUGVyZm9ybWFuY2VTdGF0c1wiXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGdldFR5cGUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gRGVidWdCdG4ubmFtZTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbIkZhY3RvcnkiLCJjcmVhdGVTZXJ2aWNlIiwic2VydmljZXMiLCJmcmFtZUxvb3AiLCJnZXRTZXJ2aWNlIiwiRGVidWdCdG4iLCJjb25zdHJ1Y3RvciIsInNlcnZpY2VFbnRpdHkiLCJodG1sIiwid2luZG93IiwiZG9jdW1lbnQiLCJib2R5IiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwiZWxlbWVudEJ5SWQiLCJnZXRFbGVtZW50QnlJZCIsIm9uY2xpY2siLCJldnQiLCJzdG9wUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsImFkZExvb3AiLCJuYW1lIiwiZGVsdGEiLCJpbm5lclRleHQiLCJNYXRoIiwicm91bmQiLCJsb2NhdGlvbiIsImhvc3QiLCJzdGFydHNXaXRoIiwiZ2V0VHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/lib/modules/debug/DebugBtn.ts\n')},"./src/lib/modules/debug/PerformanceStats.ts":
/*!***************************************************!*\
  !*** ./src/lib/modules/debug/PerformanceStats.ts ***!
  \***************************************************/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Factory": function() { return /* binding */ Factory; },\n/* harmony export */   "PerformanceStats": function() { return /* binding */ PerformanceStats; }\n/* harmony export */ });\n/* harmony import */ var three_examples_jsm_libs_stats_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three/examples/jsm/libs/stats.module */ "./node_modules/three/examples/jsm/libs/stats.module.js");\n/* harmony import */ var _aptero_axolotis_player__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aptero/axolotis-player */ "../axolotis-player/build/index.js");\n/* harmony import */ var _aptero_axolotis_player__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_aptero_axolotis_player__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _root_lib_modules_three_ThreeLib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @root/lib/modules/three/ThreeLib */ "./src/lib/modules/three/ThreeLib.ts");\n/* harmony import */ var _root_lib_modules_controller_pathFindingPlayer_NavMeshPlayer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @root/lib/modules/controller/pathFindingPlayer/NavMeshPlayer */ "./src/lib/modules/controller/pathFindingPlayer/NavMeshPlayer.ts");\n/* harmony import */ var _root_lib_modules_debug_DebugBtn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @root/lib/modules/debug/DebugBtn */ "./src/lib/modules/debug/DebugBtn.ts");\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst html = "<style>\\n" + "    .alarm{\\n" + "        color: #b70000;!important;\\n" + "    }\\n" + "\\n" + "    .rs-base h1{\\n" + "        margin: 0;\\n" + "        padding: 0;\\n" + "        font-size: 1.4em;\\n" + "        color: #fff;\\n" + "        margin-bottom: 5px;\\n" + "        cursor: pointer;\\n" + "    }\\n" + "\\n" + "    .rs-base div.rs-group{\\n" + "        margin-bottom: 10px;\\n" + "    }\\n" + "\\n" + "    .rs-base div.rs-group.hidden{\\n" + "        display: none;\\n" + "    }\\n" + "\\n" + "    .rs-base div.rs-fraction{\\n" + "        position: relative;\\n" + "        margin-bottom: 5px;\\n" + "    }\\n" + "\\n" + "    .rs-base div.rs-fraction p{\\n" + "        width: 120px;\\n" + "        text-align: right;\\n" + "        margin: 0;\\n" + "        padding: 0;\\n" + "    }\\n" + "\\n" + "    .rs-base div.rs-legend{\\n" + "        position: absolute;\\n" + "        line-height: 1em;\\n" + "    }\\n" + "\\n" + "    .rs-base div.rs-counter-base{\\n" + "        position: relative;\\n" + "        margin: 2px 0;\\n" + "        height: 1em;\\n" + "    }\\n" + "\\n" + "    .rs-base span.rs-counter-id{\\n" + "        color: white;\\n" + "        position: absolute;\\n" + "        left: 0;\\n" + "        top: 0;\\n" + "    }\\n" + "\\n" + "    .rs-base div.rs-counter-value{\\n" + "        color: white;\\n" + "        position: absolute;\\n" + "        left: 90px;\\n" + "        width: 30px;\\n" + "        height: 1em;\\n" + "        top: 0;\\n" + "        text-align: right;\\n" + "    }\\n" + "\\n" + "    .rs-base canvas.rs-canvas{\\n" + "        position: absolute;\\n" + "        right: 0;\\n" + "    }\\n" + "</style>\\n" + "<style>\\n" + "\\n" + "    .rs-header {\\n" + "        display: flex;\\n" + "        justify-content: space-between;\\n" + "        border-bottom: 1px rgba(255,255,255,0.1) solid;\\n" + "        margin-bottom: 8px;\\n" + "    }\\n" + "\\n" + "    .rs-collapse-btn {\\n" + "        cursor: pointer;\\n" + "        font-size: 12px;\\n" + "    }\\n" + "\\n" + "    .rs-fps-counter {\\n" + "        font-family: monospace;\\n" + "        cursor: pointer;\\n" + "        position: absolute;\\n" + "        bottom: 96px;\\n" + "        right: 2px;\\n" + "        padding: 4px 8px;\\n" + "        color: #ffffff;\\n" + "        text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.5);\\n" + "        font-size: 10px;\\n" + "        -moz-user-select: none;\\n" + "        -webkit-user-select: none;\\n" + "        -ms-user-select: none;\\n" + "        user-select: none;\\n" + "    }\\n" + "\\n" + "    .rs-base {\\n" + "        right: 10px;\\n" + "        left: auto;\\n" + "        top: 10px;\\n" + "        -moz-user-select: none;\\n" + "        -webkit-user-select: none;\\n" + "        -ms-user-select: none;\\n" + "        user-select: none;\\n" + "\\n" + "        position: absolute;\\n" + "        z-index: 10000;\\n" + "        padding: 10px;\\n" + "        background-color: #222;\\n" + "        font-size: 10px;\\n" + "        line-height: 1.2em;\\n" + "        width: 350px;\\n" + "        font-family: \'Roboto Condensed\', tahoma, sans-serif;\\n" + "        overflow: hidden;\\n" + "    }\\n" + "</style>\\n";\n\n\n//import { ServiceEntity } from "@aptero/axolotis-player/build/types/modules/core/service/ServiceEntity";\n\n\n\n //import {PortalsService} from "@aptero/axolotis-core-plugins/modules/portals/PortalsService";\n\nconst rStats = __webpack_require__(/*! ./rStats/rStats */ "./src/lib/modules/debug/rStats/rStats.ts");\n\nconst rStatsExtra = __webpack_require__(/*! ./rStats/rStats.extras */ "./src/lib/modules/debug/rStats/rStats.extras.ts");\n\nclass Factory {\n  async createService(services) {\n    let threeLib = await services.getService("@aptero/axolotis-core-plugins/modules/three/ThreeLib");\n    let frameLoop = await services.getService("@aptero/axolotis-player/modules/FrameLoop");\n    let worldService = await services.getService("@aptero/axolotis-player/modules/core/WorldService");\n    return new PerformanceStats(threeLib, frameLoop, worldService);\n  }\n\n}\nclass PerformanceStats {\n  constructor(threeLib, frameLoop, worldService) {\n    this.threeLib = threeLib;\n    this.worldService = worldService;\n\n    _defineProperty(this, "rS", void 0);\n\n    if (window.perfStatSingletonPresent) {\n      return; //Only one debug panel even if multiple world\n    }\n\n    window.perfStatSingletonPresent = true;\n    console.warn("MB MBytes of allocated memory. (Run Chrome with --enable-precise-memory-info) to have precise perf info");\n    const stats = (0,three_examples_jsm_libs_stats_module__WEBPACK_IMPORTED_MODULE_0__["default"])();\n    stats.showPanel(2);\n    document.body.appendChild(stats.dom);\n    this.updateRstats();\n    window.document.body.insertAdjacentHTML("beforeend", html);\n\n    if (worldService.isActiveWorld()) {\n      const animate = t => {\n        //Avoir using frameloop for this so it does not appear on perf\n        requestAnimationFrame(animate);\n        stats.update();\n        this.rS().update();\n        this.rS("framerate").end();\n        this.rS("framerate").start();\n      };\n\n      requestAnimationFrame(animate);\n    }\n\n    worldService.addOnWorldAdded(() => {\n      this.updateWorldCallback();\n    }, true);\n  }\n\n  updateRstats() {\n    let elementsByClassName = document.body.getElementsByClassName("rs-base");\n\n    if (elementsByClassName.length != 0) {\n      elementsByClassName[0].remove();\n    } //https://spite.github.io/rstats/\n\n\n    const threeStats = new window.threeStats(this.threeLib.renderer); //const glS = new window.glStats(); // init at any point\n\n    const plugins = [threeStats];\n    let config = {\n      css: [],\n      // Our stylesheet is injected from AFrame.\n      values: {\n        framerate: {\n          caption: "Frame (ms)",\n          over: 19\n        } //17 ms = 60fps\n\n      },\n      groups: [],\n      plugins: plugins\n    };\n\n    for (let i = 0; i < this.worldService.getWorlds().length; i++) {\n      config.values[_aptero_axolotis_player__WEBPACK_IMPORTED_MODULE_1__.FrameLoop.name.toLowerCase() + "-" + i] = {\n        caption: _aptero_axolotis_player__WEBPACK_IMPORTED_MODULE_1__.FrameLoop.name + " (ms)",\n        over: 10\n      };\n      config.values[_root_lib_modules_three_ThreeLib__WEBPACK_IMPORTED_MODULE_2__.ThreeLib.name.toLowerCase() + "-" + i] = {\n        caption: _root_lib_modules_three_ThreeLib__WEBPACK_IMPORTED_MODULE_2__.ThreeLib.name + " (ms)"\n      };\n      config.values[_root_lib_modules_controller_pathFindingPlayer_NavMeshPlayer__WEBPACK_IMPORTED_MODULE_3__["default"].name.toLowerCase() + "-" + i] = {\n        caption: _root_lib_modules_controller_pathFindingPlayer_NavMeshPlayer__WEBPACK_IMPORTED_MODULE_3__["default"].name + " (ms)"\n      };\n      config.values[_root_lib_modules_debug_DebugBtn__WEBPACK_IMPORTED_MODULE_4__.DebugBtn.name.toLowerCase() + "-" + i] = {\n        caption: _root_lib_modules_debug_DebugBtn__WEBPACK_IMPORTED_MODULE_4__.DebugBtn.name + " (ms)"\n      };\n      config.values[PerformanceStats.name.toLowerCase() + "-" + i] = {\n        caption: PerformanceStats.name + " (ms)"\n      }; //config.values[PortalsService.name.toLowerCase()+"-"+i] = { caption: PortalsService.name + " (ms)" };\n\n      config.groups.push({\n        caption: "World - " + i,\n        values: [_aptero_axolotis_player__WEBPACK_IMPORTED_MODULE_1__.FrameLoop.name.toLowerCase() + "-" + i, _root_lib_modules_three_ThreeLib__WEBPACK_IMPORTED_MODULE_2__.ThreeLib.name.toLowerCase() + "-" + i, _root_lib_modules_controller_pathFindingPlayer_NavMeshPlayer__WEBPACK_IMPORTED_MODULE_3__["default"].name.toLowerCase() + "-" + i] //PortalsService.name.toLowerCase()+"-"+i]\n\n      });\n    }\n\n    this.rS = new rStats(config);\n  }\n\n  updateWorldCallback() {\n    console.log("new world :", this.worldService.getWorlds());\n    this.updateRstats();\n    this.worldService.getWorlds().forEach(async (world, index) => {\n      let services = world.getFirstComponentByType(_aptero_axolotis_player__WEBPACK_IMPORTED_MODULE_1__.ServiceEntity.name);\n      let frameLoop = await services.getService("@aptero/axolotis-player/modules/FrameLoop");\n      frameLoop.setMonitoringCallback(name => {\n        this.rS(name.toLowerCase() + "-" + index).start();\n      }, name => {\n        this.rS(name.toLowerCase() + "-" + index).end();\n      });\n    });\n  }\n\n  getType() {\n    return PerformanceStats.name;\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lib/modules/debug/PerformanceStats.ts\n')},"./src/lib/modules/debug/rStats/rStats.extras.ts":
/*!*******************************************************!*\
  !*** ./src/lib/modules/debug/rStats/rStats.extras.ts ***!
  \*******************************************************/function(module){eval('// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\nwindow.glStats = function () {\n  var _rS = null;\n  var _totalDrawArraysCalls = 0,\n      _totalDrawElementsCalls = 0,\n      _totalUseProgramCalls = 0,\n      _totalFaces = 0,\n      _totalVertices = 0,\n      _totalPoints = 0,\n      _totalBindTexures = 0;\n\n  function _h(f, c) {\n    return function () {\n      c.apply(this, arguments);\n      f.apply(this, arguments);\n    };\n  }\n\n  WebGLRenderingContext.prototype.drawArrays = _h(WebGLRenderingContext.prototype.drawArrays, function () {\n    _totalDrawArraysCalls++;\n    if (arguments[0] == this.POINTS) _totalPoints += arguments[2];else _totalVertices += arguments[2];\n  });\n  WebGLRenderingContext.prototype.drawElements = _h(WebGLRenderingContext.prototype.drawElements, function () {\n    _totalDrawElementsCalls++;\n    _totalFaces += arguments[1] / 3;\n    _totalVertices += arguments[1];\n  });\n  WebGLRenderingContext.prototype.useProgram = _h(WebGLRenderingContext.prototype.useProgram, function () {\n    _totalUseProgramCalls++;\n  });\n  WebGLRenderingContext.prototype.bindTexture = _h(WebGLRenderingContext.prototype.bindTexture, function () {\n    _totalBindTexures++;\n  });\n  var _values = {\n    allcalls: {\n      over: 3000,\n      caption: "Calls (hook)"\n    },\n    drawelements: {\n      caption: "drawElements (hook)"\n    },\n    drawarrays: {\n      caption: "drawArrays (hook)"\n    }\n  };\n  var _groups = [{\n    caption: "WebGL",\n    values: ["allcalls", "drawelements", "drawarrays", "useprogram", "bindtexture", "glfaces", "glvertices", "glpoints"]\n  }];\n  var _fractions = [{\n    base: "allcalls",\n    steps: ["drawelements", "drawarrays"]\n  }];\n\n  function _update() {\n    _rS("allcalls").set(_totalDrawArraysCalls + _totalDrawElementsCalls);\n\n    _rS("drawElements").set(_totalDrawElementsCalls);\n\n    _rS("drawArrays").set(_totalDrawArraysCalls);\n\n    _rS("bindTexture").set(_totalBindTexures);\n\n    _rS("useProgram").set(_totalUseProgramCalls);\n\n    _rS("glfaces").set(_totalFaces);\n\n    _rS("glvertices").set(_totalVertices);\n\n    _rS("glpoints").set(_totalPoints);\n  }\n\n  function _start() {\n    _totalDrawArraysCalls = 0;\n    _totalDrawElementsCalls = 0;\n    _totalUseProgramCalls = 0;\n    _totalFaces = 0;\n    _totalVertices = 0;\n    _totalPoints = 0;\n    _totalBindTexures = 0;\n  }\n\n  function _end() {}\n\n  function _attach(r) {\n    _rS = r;\n  }\n\n  return {\n    update: _update,\n    start: _start,\n    end: _end,\n    attach: _attach,\n    values: _values,\n    groups: _groups,\n    fractions: _fractions\n  };\n};\n\nwindow.threeStats = function (renderer) {\n  var _rS = null;\n  var _values = {\n    "renderer.info.memory.geometries": {\n      caption: "Geometries"\n    },\n    "renderer.info.memory.textures": {\n      caption: "Textures"\n    },\n    "renderer.info.programs": {\n      caption: "Programs"\n    },\n    "renderer.info.render.calls": {\n      caption: "Calls"\n    },\n    "renderer.info.render.triangles": {\n      caption: "Triangles",\n      over: 300000\n    },\n    "renderer.info.render.points": {\n      caption: "Points"\n    }\n  };\n  var _groups = [{\n    caption: "Three.js - Memory",\n    values: ["renderer.info.memory.geometries", "renderer.info.programs", "renderer.info.memory.textures"]\n  }, {\n    caption: "Three.js - Render",\n    values: ["renderer.info.render.calls", "renderer.info.render.triangles", "renderer.info.render.points"]\n  }];\n  var _fractions = [];\n\n  function _update() {\n    _rS("renderer.info.memory.geometries").set(renderer.info.memory.geometries);\n\n    _rS("renderer.info.programs").set(renderer.info.programs.length);\n\n    _rS("renderer.info.memory.textures").set(renderer.info.memory.textures);\n\n    _rS("renderer.info.render.calls").set(renderer.info.render.calls);\n\n    _rS("renderer.info.render.triangles").set(renderer.info.render.triangles);\n\n    _rS("renderer.info.render.points").set(renderer.info.render.points);\n  }\n\n  function _start() {}\n\n  function _end() {}\n\n  function _attach(r) {\n    _rS = r;\n  }\n\n  return {\n    update: _update,\n    start: _start,\n    end: _end,\n    attach: _attach,\n    values: _values,\n    groups: _groups,\n    fractions: _fractions\n  };\n};\n/*\n *   From https://github.com/paulirish/memory-stats.js\n */\n\n\nwindow.BrowserStats = function () {\n  var _rS = null;\n  var _usedJSHeapSize = 0,\n      _totalJSHeapSize = 0;\n\n  if (window.performance && !performance.memory) {\n    performance.memory = {\n      usedJSHeapSize: 0,\n      totalJSHeapSize: 0\n    };\n  }\n\n  if (performance.memory.totalJSHeapSize === 0) {\n    console.warn("totalJSHeapSize === 0... performance.memory is only available in Chrome .");\n  }\n\n  var _values = {\n    memory: {\n      caption: "Used Memory",\n      average: true,\n      avgMs: 1000,\n      over: 22\n    },\n    total: {\n      caption: "Total Memory"\n    }\n  };\n  var _groups = [{\n    caption: "Browser",\n    values: ["memory", "total"]\n  }];\n  var _fractions = [{\n    base: "total",\n    steps: ["memory"]\n  }];\n  var log1024 = Math.log(1024);\n\n  function _size(v) {\n    var precision = 100; //Math.pow(10, 2);\n\n    var i = Math.floor(Math.log(v) / log1024);\n    return Math.round(v * precision / Math.pow(1024, i)) / precision; // + \' \' + sizes[i];\n  }\n\n  function _update() {\n    _usedJSHeapSize = _size(performance.memory.usedJSHeapSize);\n    _totalJSHeapSize = _size(performance.memory.totalJSHeapSize);\n\n    _rS("memory").set(_usedJSHeapSize);\n\n    _rS("total").set(_totalJSHeapSize);\n  }\n\n  function _start() {\n    _usedJSHeapSize = 0;\n  }\n\n  function _end() {}\n\n  function _attach(r) {\n    _rS = r;\n  }\n\n  return {\n    update: _update,\n    start: _start,\n    end: _end,\n    attach: _attach,\n    values: _values,\n    groups: _groups,\n    fractions: _fractions\n  };\n};\n\nif (true) {\n  module.exports = {\n    glStats: window.glStats,\n    threeStats: window.threeStats,\n    BrowserStats: window.BrowserStats\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lib/modules/debug/rStats/rStats.extras.ts\n')},"./src/lib/modules/debug/rStats/rStats.ts":
/*!************************************************!*\
  !*** ./src/lib/modules/debug/rStats/rStats.ts ***!
  \************************************************/function(module){"use strict";eval('// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\n// performance.now() polyfill from https://gist.github.com/paulirish/5438650\n\n\n(function () {\n  if ("performance" in window == false) {\n    window.performance = {};\n  }\n\n  var performance = window.performance;\n\n  if ("now" in performance == false) {\n    var nowOffset = Date.now();\n\n    if (performance.timing && performance.timing.navigationStart) {\n      nowOffset = performance.timing.navigationStart;\n    }\n\n    performance.now = function now() {\n      return Date.now() - nowOffset;\n    };\n  }\n\n  if (!performance.mark) {\n    performance.mark = function () {};\n  }\n\n  if (!performance.measure) {\n    performance.measure = function () {};\n  }\n})();\n\nwindow.rStats = function rStats(settings) {\n  function iterateKeys(array, callback) {\n    var keys = Object.keys(array);\n\n    for (var j = 0, l = keys.length; j < l; j++) {\n      callback(keys[j]);\n    }\n  }\n\n  function importCSS(url) {\n    var element = document.createElement("link");\n    element.href = url;\n    element.rel = "stylesheet";\n    element.type = "text/css";\n    document.getElementsByTagName("head")[0].appendChild(element);\n  }\n\n  var _settings = settings || {};\n\n  var _colours = _settings.colours || ["#850700", "#c74900", "#fcb300", "#284280", "#4c7c0c"];\n\n  var _cssFont = "https://fonts.googleapis.com/css?family=Roboto+Condensed:400,700,300";\n\n  var _cssRStats = (_settings.CSSPath ? _settings.CSSPath : "") + "rStats.css";\n\n  var _css = _settings.css || [_cssFont, _cssRStats];\n\n  _css.forEach(function (uri) {\n    importCSS(uri);\n  });\n\n  if (!_settings.values) _settings.values = {};\n\n  var _base,\n      _div,\n      _elHeight = 10,\n      _elWidth = 200;\n\n  var _perfCounters = {};\n\n  function Graph(_dom, _id, _defArg) {\n    var _def = _defArg || {};\n\n    var _canvas = document.createElement("canvas"),\n        _ctx = _canvas.getContext("2d"),\n        _max = 0,\n        _current = 0;\n\n    var c = _def.color ? _def.color : "#666666";\n\n    var _dotCanvas = document.createElement("canvas"),\n        _dotCtx = _dotCanvas.getContext("2d");\n\n    _dotCanvas.width = 1;\n    _dotCanvas.height = 2 * _elHeight;\n    _dotCtx.fillStyle = "#444444";\n\n    _dotCtx.fillRect(0, 0, 1, 2 * _elHeight);\n\n    _dotCtx.fillStyle = c;\n\n    _dotCtx.fillRect(0, _elHeight, 1, _elHeight);\n\n    _dotCtx.fillStyle = "#ffffff";\n    _dotCtx.globalAlpha = 0.5;\n\n    _dotCtx.fillRect(0, _elHeight, 1, 1);\n\n    _dotCtx.globalAlpha = 1;\n\n    var _alarmCanvas = document.createElement("canvas"),\n        _alarmCtx = _alarmCanvas.getContext("2d");\n\n    _alarmCanvas.width = 1;\n    _alarmCanvas.height = 2 * _elHeight;\n    _alarmCtx.fillStyle = "#444444";\n\n    _alarmCtx.fillRect(0, 0, 1, 2 * _elHeight);\n\n    _alarmCtx.fillStyle = "#b70000";\n\n    _alarmCtx.fillRect(0, _elHeight, 1, _elHeight);\n\n    _alarmCtx.globalAlpha = 0.5;\n    _alarmCtx.fillStyle = "#ffffff";\n\n    _alarmCtx.fillRect(0, _elHeight, 1, 1);\n\n    _alarmCtx.globalAlpha = 1;\n\n    function _init() {\n      _canvas.width = _elWidth;\n      _canvas.height = _elHeight;\n      _canvas.style.width = _canvas.width + "px";\n      _canvas.style.height = _canvas.height + "px";\n      _canvas.className = "rs-canvas";\n\n      _dom.appendChild(_canvas);\n\n      _ctx.fillStyle = "#444444";\n\n      _ctx.fillRect(0, 0, _canvas.width, _canvas.height);\n    }\n\n    function _draw(v, alarm) {\n      _current += (v - _current) * 0.1;\n      _max *= 0.99;\n      if (_current > _max) _max = _current;\n\n      _ctx.drawImage(_canvas, 1, 0, _canvas.width - 1, _canvas.height, 0, 0, _canvas.width - 1, _canvas.height);\n\n      if (alarm) {\n        _ctx.drawImage(_alarmCanvas, _canvas.width - 1, _canvas.height - _current * _canvas.height / _max - _elHeight);\n      } else {\n        _ctx.drawImage(_dotCanvas, _canvas.width - 1, _canvas.height - _current * _canvas.height / _max - _elHeight);\n      }\n    }\n\n    _init();\n\n    return {\n      draw: _draw\n    };\n  }\n\n  function StackGraph(_dom, _num) {\n    var _canvas = document.createElement("canvas"),\n        _ctx = _canvas.getContext("2d");\n\n    function _init() {\n      _canvas.width = _elWidth;\n      _canvas.height = _elHeight * _num;\n      _canvas.style.width = _canvas.width + "px";\n      _canvas.style.height = _canvas.height + "px";\n      _canvas.className = "rs-canvas";\n\n      _dom.appendChild(_canvas);\n\n      _ctx.fillStyle = "#444444";\n\n      _ctx.fillRect(0, 0, _canvas.width, _canvas.height);\n    }\n\n    function _draw(v) {\n      _ctx.drawImage(_canvas, 1, 0, _canvas.width - 1, _canvas.height, 0, 0, _canvas.width - 1, _canvas.height);\n\n      var th = 0;\n      iterateKeys(v, function (j) {\n        var h = v[j] * _canvas.height;\n        _ctx.fillStyle = _colours[j];\n\n        _ctx.fillRect(_canvas.width - 1, th, 1, h);\n\n        th += h;\n      });\n    }\n\n    _init();\n\n    return {\n      draw: _draw\n    };\n  }\n\n  function PerfCounter(id, group) {\n    var _id = id,\n        _time,\n        _value = 0,\n        _total = 0,\n        _averageValue = 0,\n        _accumValue = 0,\n        _accumStart = performance.now(),\n        _accumSamples = 0,\n        _dom = document.createElement("div"),\n        _spanId = document.createElement("span"),\n        _spanValue = document.createElement("div"),\n        _spanValueText = document.createTextNode(""),\n        _def = _settings ? _settings.values[_id.toLowerCase()] : null,\n        _graph = new Graph(_dom, _id, _def),\n        _started = false;\n\n    _spanId.className = "rs-counter-id";\n    _spanId.textContent = _def && _def.caption ? _def.caption : _id;\n    _spanValue.className = "rs-counter-value";\n\n    _spanValue.appendChild(_spanValueText);\n\n    _dom.appendChild(_spanId);\n\n    _dom.appendChild(_spanValue);\n\n    if (group) group.div.appendChild(_dom);else _div.appendChild(_dom);\n    _time = performance.now();\n\n    function _average(v) {\n      if (_def && _def.average) {\n        _accumValue += v;\n        _accumSamples++;\n        var t = performance.now();\n\n        if (t - _accumStart >= (_def.avgMs || 1000)) {\n          _averageValue = _accumValue / _accumSamples;\n          _accumValue = 0;\n          _accumStart = t;\n          _accumSamples = 0;\n        }\n      }\n    }\n\n    function _start() {\n      _time = performance.now();\n      if (_settings.userTimingAPI) performance.mark(_id + "-start");\n      _started = true;\n    }\n\n    function _end() {\n      _value = performance.now() - _time;\n\n      if (_settings.userTimingAPI) {\n        performance.mark(_id + "-end");\n\n        if (_started) {\n          performance.measure(_id, _id + "-start", _id + "-end");\n        }\n      }\n\n      _average(_value);\n    }\n\n    function _tick() {\n      _end();\n\n      _start();\n    }\n\n    function _draw() {\n      var v = _def && _def.average ? _averageValue : _value;\n      _spanValueText.nodeValue = Math.round(v * 100) / 100;\n      var a = _def && (_def.below && _value < _def.below || _def.over && _value > _def.over);\n\n      _graph.draw(_value, a);\n\n      _dom.className = a ? "rs-counter-base alarm" : "rs-counter-base";\n    }\n\n    function _frame() {\n      var t = performance.now();\n      var e = t - _time;\n      _total++;\n\n      if (e > 1000) {\n        if (_def && _def.interpolate === false) {\n          _value = _total;\n        } else {\n          _value = _total * 1000 / e;\n        }\n\n        _total = 0;\n        _time = t;\n\n        _average(_value);\n      }\n    }\n\n    function _set(v) {\n      _value = v;\n\n      _average(_value);\n    }\n\n    return {\n      set: _set,\n      start: _start,\n      tick: _tick,\n      end: _end,\n      frame: _frame,\n      value: function () {\n        return _value;\n      },\n      draw: _draw\n    };\n  }\n\n  function sample() {\n    var _value = 0;\n\n    function _set(v) {\n      _value = v;\n    }\n\n    return {\n      set: _set,\n      value: function () {\n        return _value;\n      }\n    };\n  }\n\n  function _perf(idArg) {\n    var id = idArg.toLowerCase();\n    if (id === undefined) id = "default";\n    if (_perfCounters[id]) return _perfCounters[id];\n    var group = null;\n\n    if (_settings && _settings.groups) {\n      iterateKeys(_settings.groups, function (j) {\n        var g = _settings.groups[parseInt(j, 10)];\n\n        if (!group && g.values.indexOf(id.toLowerCase()) !== -1) {\n          group = g;\n        }\n      });\n    }\n\n    var p = new PerfCounter(id, group);\n    _perfCounters[id] = p;\n    return p;\n  }\n\n  function _init() {\n    if (_settings.plugins) {\n      if (!_settings.values) _settings.values = {};\n      if (!_settings.groups) _settings.groups = [];\n      if (!_settings.fractions) _settings.fractions = [];\n\n      for (var j = 0; j < _settings.plugins.length; j++) {\n        _settings.plugins[j].attach(_perf);\n\n        iterateKeys(_settings.plugins[j].values, function (k) {\n          _settings.values[k] = _settings.plugins[j].values[k];\n        });\n        _settings.groups = _settings.groups.concat(_settings.plugins[j].groups);\n        _settings.fractions = _settings.fractions.concat(_settings.plugins[j].fractions);\n      }\n    } else {\n      _settings.plugins = {};\n    }\n\n    _base = document.createElement("div");\n    _base.className = "rs-base";\n    _div = document.createElement("div");\n    _div.className = "rs-container";\n    _div.style.height = "auto";\n\n    _base.appendChild(_div);\n\n    document.body.appendChild(_base);\n    if (!_settings) return;\n\n    if (_settings.groups) {\n      iterateKeys(_settings.groups, function (j) {\n        var g = _settings.groups[parseInt(j, 10)];\n\n        var div = document.createElement("div");\n        div.className = "rs-group";\n        g.div = div;\n        var h1 = document.createElement("h1");\n        h1.textContent = g.caption;\n        h1.addEventListener("click", function (e) {\n          this.classList.toggle("hidden");\n          e.preventDefault();\n        }.bind(div));\n\n        _div.appendChild(h1);\n\n        _div.appendChild(div);\n      });\n    }\n\n    if (_settings.fractions) {\n      iterateKeys(_settings.fractions, function (j) {\n        var f = _settings.fractions[parseInt(j, 10)];\n\n        var div = document.createElement("div");\n        div.className = "rs-fraction";\n        var legend = document.createElement("div");\n        legend.className = "rs-legend";\n        var h = 0;\n        iterateKeys(_settings.fractions[j].steps, function (k) {\n          var p = document.createElement("p");\n          p.textContent = _settings.fractions[j].steps[k];\n          p.style.color = _colours[h];\n          legend.appendChild(p);\n          h++;\n        });\n        div.appendChild(legend);\n        div.style.height = h * _elHeight + "px";\n        f.div = div;\n        var graph = new StackGraph(div, h);\n        f.graph = graph;\n\n        _div.appendChild(div);\n      });\n    }\n  }\n\n  function _update() {\n    iterateKeys(_settings.plugins, function (j) {\n      _settings.plugins[j].update();\n    });\n    iterateKeys(_perfCounters, function (j) {\n      _perfCounters[j].draw();\n    });\n\n    if (_settings && _settings.fractions) {\n      iterateKeys(_settings.fractions, function (j) {\n        var f = _settings.fractions[parseInt(j, 10)];\n\n        var v = [];\n\n        var base = _perfCounters[f.base.toLowerCase()];\n\n        if (base) {\n          base = base.value();\n          iterateKeys(_settings.fractions[j].steps, function (k) {\n            var s = _settings.fractions[j].steps[parseInt(k, 10)].toLowerCase();\n\n            var val = _perfCounters[s];\n\n            if (val) {\n              v.push(val.value() / base);\n            }\n          });\n        }\n\n        f.graph.draw(v);\n      });\n    }\n    /*if( _height != _div.clientHeight ) {\n            _height = _div.clientHeight;\n            _base.style.height = _height + 2 * _elHeight + \'px\';\n        console.log( _base.clientHeight );\n        }*/\n\n  }\n\n  _init();\n\n  return function (id) {\n    if (id) return _perf(id);\n    return {\n      element: _base,\n      update: _update\n    };\n  };\n};\n\nif (true) {\n  module.exports = window.rStats;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lib/modules/debug/rStats/rStats.ts\n')},"./src/lib/modules/three/ThreeAssetsLoader.ts":
/*!****************************************************!*\
  !*** ./src/lib/modules/three/ThreeAssetsLoader.ts ***!
  \****************************************************/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "AssetsLoader": function() { return /* binding */ AssetsLoader; },\n/* harmony export */   "assetsLoader": function() { return /* binding */ assetsLoader; }\n/* harmony export */ });\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nclass AssetsLoader {\n  constructor() {\n    _defineProperty(this, "loaderCache", {});\n\n    _defineProperty(this, "assets", {});\n  }\n\n  async getLoader(loaderName, loaderLoader) {\n    if (!this.loaderCache[loaderName]) {\n      this.loaderCache[loaderName] = await loaderLoader();\n    }\n\n    return this.loaderCache[loaderName];\n  }\n\n}\nconst assetsLoader = new AssetsLoader();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbGliL21vZHVsZXMvdGhyZWUvVGhyZWVBc3NldHNMb2FkZXIudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFPLE1BQU1BLFlBQU4sQ0FBbUI7QUFBQTtBQUFBLHlDQUNWLEVBRFU7O0FBQUEsb0NBRWYsRUFGZTtBQUFBOztBQUlULFFBQVRDLFNBQVMsQ0FBQ0MsVUFBRCxFQUFxQkMsWUFBckIsRUFBK0M7QUFDNUQsUUFBSSxDQUFDLEtBQUtDLFdBQUwsQ0FBaUJGLFVBQWpCLENBQUwsRUFBbUM7QUFDakMsV0FBS0UsV0FBTCxDQUFpQkYsVUFBakIsSUFBK0IsTUFBTUMsWUFBWSxFQUFqRDtBQUNEOztBQUNELFdBQU8sS0FBS0MsV0FBTCxDQUFpQkYsVUFBakIsQ0FBUDtBQUNEOztBQVR1QjtBQVluQixNQUFNRyxZQUEwQixHQUFHLElBQUlMLFlBQUosRUFBbkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9heG9sb3Rpcy1jb3JlLXBsdWdpbnMvLi9zcmMvbGliL21vZHVsZXMvdGhyZWUvVGhyZWVBc3NldHNMb2FkZXIudHM/YzcyYiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgQXNzZXRzTG9hZGVyIHtcbiAgbG9hZGVyQ2FjaGUgPSB7fTtcbiAgYXNzZXRzID0ge307XG5cbiAgYXN5bmMgZ2V0TG9hZGVyKGxvYWRlck5hbWU6IHN0cmluZywgbG9hZGVyTG9hZGVyOiAoKSA9PiB2b2lkKSB7XG4gICAgaWYgKCF0aGlzLmxvYWRlckNhY2hlW2xvYWRlck5hbWVdKSB7XG4gICAgICB0aGlzLmxvYWRlckNhY2hlW2xvYWRlck5hbWVdID0gYXdhaXQgbG9hZGVyTG9hZGVyKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmxvYWRlckNhY2hlW2xvYWRlck5hbWVdO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBhc3NldHNMb2FkZXI6IEFzc2V0c0xvYWRlciA9IG5ldyBBc3NldHNMb2FkZXIoKTtcbiJdLCJuYW1lcyI6WyJBc3NldHNMb2FkZXIiLCJnZXRMb2FkZXIiLCJsb2FkZXJOYW1lIiwibG9hZGVyTG9hZGVyIiwibG9hZGVyQ2FjaGUiLCJhc3NldHNMb2FkZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/lib/modules/three/ThreeAssetsLoader.ts\n')},"./src/lib/modules/three/ThreeLib.ts":
/*!*******************************************!*\
  !*** ./src/lib/modules/three/ThreeLib.ts ***!
  \*******************************************/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Factory": function() { return /* binding */ Factory; },\n/* harmony export */   "ThreeLib": function() { return /* binding */ ThreeLib; },\n/* harmony export */   "asyncLoadThree": function() { return /* binding */ asyncLoadThree; },\n/* harmony export */   "getGlobalRenderer": function() { return /* binding */ getGlobalRenderer; }\n/* harmony export */ });\n/* harmony import */ var _root_lib_modules_three_ThreeAssetsLoader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @root/lib/modules/three/ThreeAssetsLoader */ "./src/lib/modules/three/ThreeAssetsLoader.ts");\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\nasync function asyncLoadThree() {\n  //this async import has the only usage of renamin any import to three (using webpack chunk)\n  const THREE = await __webpack_require__.e(/*! import() | @aptero/axolotis-core-plugins/three */ "@aptero/axolotis-core-plugins/three").then(__webpack_require__.bind(__webpack_require__, /*! three */ "./node_modules/three/build/three.module.js"));\n  return THREE;\n}\nasync function getGlobalRenderer() {\n  var _window$axolotis;\n\n  if (!((_window$axolotis = window.axolotis) !== null && _window$axolotis !== void 0 && _window$axolotis.renderer)) {\n    const THREE = await asyncLoadThree();\n    let renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.toneMapping = THREE.ACESFilmicToneMapping;\n    renderer.toneMappingExposure = 1;\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.setPixelRatio(window.devicePixelRatio);\n    document.body.appendChild(renderer.domElement);\n\n    if (!window.axolotis) {\n      window.axolotis = {};\n    }\n\n    window.axolotis.renderer = renderer;\n  }\n\n  return window.axolotis.renderer;\n}\nclass ThreeLib {\n  constructor(frameLoop, worldService, THREE) {\n    this.frameLoop = frameLoop;\n    this.worldService = worldService;\n    this.THREE = THREE;\n\n    _defineProperty(this, "renderer", void 0);\n\n    _defineProperty(this, "scene", void 0);\n\n    _defineProperty(this, "camera", void 0);\n\n    _defineProperty(this, "preRenderPass", []);\n  }\n\n  async init() {\n    this.scene = new this.THREE.Scene();\n    this.renderer = await getGlobalRenderer();\n    this.camera = new this.THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.001, 100000);\n    this.camera.position.z = 2;\n\n    const render = () => {\n      for (const prerender of this.preRenderPass) {\n        prerender();\n      } // FINAL PASS\n\n\n      this.renderer.render(this.scene, this.camera); // set things back to normal\n\n      this.renderer.autoClear = true;\n    };\n\n    const onWindowResize = () => {\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      render();\n    };\n\n    this.worldService.addOnWorldChangeCallback(() => {\n      window.removeEventListener("resize", onWindowResize);\n      this.frameLoop.removeLoop(ThreeLib.name);\n\n      if (this.worldService.isActiveWorld()) {\n        window.addEventListener("resize", onWindowResize, false);\n        this.frameLoop.addLoop(ThreeLib.name, render);\n      }\n    }, true);\n  }\n\n  async loadAssets(path) {\n    if (_root_lib_modules_three_ThreeAssetsLoader__WEBPACK_IMPORTED_MODULE_0__.assetsLoader.assets[path]) {\n      return _root_lib_modules_three_ThreeAssetsLoader__WEBPACK_IMPORTED_MODULE_0__.assetsLoader.assets[path];\n    }\n    /*\n    TODO createa a early start download of assets so that the GLB start downloading early in the waterfall\n    Not as simple as it seems may be doable using service worker\n    fetch(path);//start download of assets\n    var oReq = new XMLHttpRequest();\n    oReq.addEventListener("load", ()=>{});\n    oReq.open("GET", path);\n    oReq.send();\n    */\n\n\n    if (path.endsWith(".glb")) {\n      const loader = await _root_lib_modules_three_ThreeAssetsLoader__WEBPACK_IMPORTED_MODULE_0__.assetsLoader.getLoader("GLTFLoader", async () => {\n        const module = await Promise.all(/*! import() | @aptero/axolotis-core-plugins/three/examples/jsm/loaders/GLTFLoader */[__webpack_require__.e("@aptero/axolotis-core-plugins/three"), __webpack_require__.e("@aptero/axolotis-core-plugins/three/examples/jsm/loaders/GLTFLoader")]).then(__webpack_require__.bind(__webpack_require__, /*! three/examples/jsm/loaders/GLTFLoader */ "./node_modules/three/examples/jsm/loaders/GLTFLoader.js"));\n        const gltfLoader = new module.GLTFLoader(); //const gltfLoader = new GLTFLoader(new this.THREE.LoadingManager());\n\n        return gltfLoader;\n      });\n      const result = await loader.loadAsync(path);\n      _root_lib_modules_three_ThreeAssetsLoader__WEBPACK_IMPORTED_MODULE_0__.assetsLoader.assets[path] = result;\n    }\n\n    if (path.endsWith(".jpg")) {\n      const loader = await _root_lib_modules_three_ThreeAssetsLoader__WEBPACK_IMPORTED_MODULE_0__.assetsLoader.getLoader("TextureLoader", async () => {\n        const texLoader = new this.THREE.TextureLoader();\n        return texLoader;\n      });\n      const result = await loader.loadAsync(path);\n      _root_lib_modules_three_ThreeAssetsLoader__WEBPACK_IMPORTED_MODULE_0__.assetsLoader.assets[path] = result;\n    }\n\n    return _root_lib_modules_three_ThreeAssetsLoader__WEBPACK_IMPORTED_MODULE_0__.assetsLoader.assets[path];\n  }\n\n  getType() {\n    return ThreeLib.name;\n  }\n\n}\nclass Factory {\n  constructor() {}\n\n  async createService(services) {\n    let frameLoop = await services.getService("@aptero/axolotis-player/modules/FrameLoop");\n    let worldService = await services.getService("@aptero/axolotis-player/modules/core/WorldService");\n    const threeLib = new ThreeLib(frameLoop, worldService, await asyncLoadThree());\n    await threeLib.init();\n    return threeLib;\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lib/modules/three/ThreeLib.ts\n')},"./node_modules/three/examples/jsm/libs/stats.module.js":
/*!**************************************************************!*\
  !*** ./node_modules/three/examples/jsm/libs/stats.module.js ***!
  \**************************************************************/function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\nvar Stats = function () {\n\n\tvar mode = 0;\n\n\tvar container = document.createElement( 'div' );\n\tcontainer.style.cssText = 'position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000';\n\tcontainer.addEventListener( 'click', function ( event ) {\n\n\t\tevent.preventDefault();\n\t\tshowPanel( ++ mode % container.children.length );\n\n\t}, false );\n\n\t//\n\n\tfunction addPanel( panel ) {\n\n\t\tcontainer.appendChild( panel.dom );\n\t\treturn panel;\n\n\t}\n\n\tfunction showPanel( id ) {\n\n\t\tfor ( var i = 0; i < container.children.length; i ++ ) {\n\n\t\t\tcontainer.children[ i ].style.display = i === id ? 'block' : 'none';\n\n\t\t}\n\n\t\tmode = id;\n\n\t}\n\n\t//\n\n\tvar beginTime = ( performance || Date ).now(), prevTime = beginTime, frames = 0;\n\n\tvar fpsPanel = addPanel( new Stats.Panel( 'FPS', '#0ff', '#002' ) );\n\tvar msPanel = addPanel( new Stats.Panel( 'MS', '#0f0', '#020' ) );\n\n\tif ( self.performance && self.performance.memory ) {\n\n\t\tvar memPanel = addPanel( new Stats.Panel( 'MB', '#f08', '#201' ) );\n\n\t}\n\n\tshowPanel( 0 );\n\n\treturn {\n\n\t\tREVISION: 16,\n\n\t\tdom: container,\n\n\t\taddPanel: addPanel,\n\t\tshowPanel: showPanel,\n\n\t\tbegin: function () {\n\n\t\t\tbeginTime = ( performance || Date ).now();\n\n\t\t},\n\n\t\tend: function () {\n\n\t\t\tframes ++;\n\n\t\t\tvar time = ( performance || Date ).now();\n\n\t\t\tmsPanel.update( time - beginTime, 200 );\n\n\t\t\tif ( time >= prevTime + 1000 ) {\n\n\t\t\t\tfpsPanel.update( ( frames * 1000 ) / ( time - prevTime ), 100 );\n\n\t\t\t\tprevTime = time;\n\t\t\t\tframes = 0;\n\n\t\t\t\tif ( memPanel ) {\n\n\t\t\t\t\tvar memory = performance.memory;\n\t\t\t\t\tmemPanel.update( memory.usedJSHeapSize / 1048576, memory.jsHeapSizeLimit / 1048576 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn time;\n\n\t\t},\n\n\t\tupdate: function () {\n\n\t\t\tbeginTime = this.end();\n\n\t\t},\n\n\t\t// Backwards Compatibility\n\n\t\tdomElement: container,\n\t\tsetMode: showPanel\n\n\t};\n\n};\n\nStats.Panel = function ( name, fg, bg ) {\n\n\tvar min = Infinity, max = 0, round = Math.round;\n\tvar PR = round( window.devicePixelRatio || 1 );\n\n\tvar WIDTH = 80 * PR, HEIGHT = 48 * PR,\n\t\tTEXT_X = 3 * PR, TEXT_Y = 2 * PR,\n\t\tGRAPH_X = 3 * PR, GRAPH_Y = 15 * PR,\n\t\tGRAPH_WIDTH = 74 * PR, GRAPH_HEIGHT = 30 * PR;\n\n\tvar canvas = document.createElement( 'canvas' );\n\tcanvas.width = WIDTH;\n\tcanvas.height = HEIGHT;\n\tcanvas.style.cssText = 'width:80px;height:48px';\n\n\tvar context = canvas.getContext( '2d' );\n\tcontext.font = 'bold ' + ( 9 * PR ) + 'px Helvetica,Arial,sans-serif';\n\tcontext.textBaseline = 'top';\n\n\tcontext.fillStyle = bg;\n\tcontext.fillRect( 0, 0, WIDTH, HEIGHT );\n\n\tcontext.fillStyle = fg;\n\tcontext.fillText( name, TEXT_X, TEXT_Y );\n\tcontext.fillRect( GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT );\n\n\tcontext.fillStyle = bg;\n\tcontext.globalAlpha = 0.9;\n\tcontext.fillRect( GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT );\n\n\treturn {\n\n\t\tdom: canvas,\n\n\t\tupdate: function ( value, maxValue ) {\n\n\t\t\tmin = Math.min( min, value );\n\t\t\tmax = Math.max( max, value );\n\n\t\t\tcontext.fillStyle = bg;\n\t\t\tcontext.globalAlpha = 1;\n\t\t\tcontext.fillRect( 0, 0, WIDTH, GRAPH_Y );\n\t\t\tcontext.fillStyle = fg;\n\t\t\tcontext.fillText( round( value ) + ' ' + name + ' (' + round( min ) + '-' + round( max ) + ')', TEXT_X, TEXT_Y );\n\n\t\t\tcontext.drawImage( canvas, GRAPH_X + PR, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT, GRAPH_X, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT );\n\n\t\t\tcontext.fillRect( GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, GRAPH_HEIGHT );\n\n\t\t\tcontext.fillStyle = bg;\n\t\t\tcontext.globalAlpha = 0.9;\n\t\t\tcontext.fillRect( GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, round( ( 1 - ( value / maxValue ) ) * GRAPH_HEIGHT ) );\n\n\t\t}\n\n\t};\n\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Stats);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdGhyZWUvZXhhbXBsZXMvanNtL2xpYnMvc3RhdHMubW9kdWxlLmpzLmpzIiwibWFwcGluZ3MiOiI7QUFBQTs7QUFFQTs7QUFFQTtBQUNBLDJDQUEyQyxNQUFNLE9BQU8sZUFBZSxZQUFZO0FBQ25GOztBQUVBO0FBQ0E7O0FBRUEsRUFBRTs7QUFFRjs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBLG1CQUFtQiwrQkFBK0I7O0FBRWxEOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQSxHQUFHOztBQUVIOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQSxHQUFHOztBQUVIOztBQUVBOztBQUVBLEdBQUc7O0FBRUg7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQzs7QUFFcEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBLCtEQUFlLEtBQUssRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2F4b2xvdGlzLWNvcmUtcGx1Z2lucy8uL25vZGVfbW9kdWxlcy90aHJlZS9leGFtcGxlcy9qc20vbGlicy9zdGF0cy5tb2R1bGUuanM/MTUzYSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgU3RhdHMgPSBmdW5jdGlvbiAoKSB7XG5cblx0dmFyIG1vZGUgPSAwO1xuXG5cdHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnZGl2JyApO1xuXHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9ICdwb3NpdGlvbjpmaXhlZDt0b3A6MDtsZWZ0OjA7Y3Vyc29yOnBvaW50ZXI7b3BhY2l0eTowLjk7ei1pbmRleDoxMDAwMCc7XG5cdGNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCAnY2xpY2snLCBmdW5jdGlvbiAoIGV2ZW50ICkge1xuXG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRzaG93UGFuZWwoICsrIG1vZGUgJSBjb250YWluZXIuY2hpbGRyZW4ubGVuZ3RoICk7XG5cblx0fSwgZmFsc2UgKTtcblxuXHQvL1xuXG5cdGZ1bmN0aW9uIGFkZFBhbmVsKCBwYW5lbCApIHtcblxuXHRcdGNvbnRhaW5lci5hcHBlbmRDaGlsZCggcGFuZWwuZG9tICk7XG5cdFx0cmV0dXJuIHBhbmVsO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBzaG93UGFuZWwoIGlkICkge1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgY29udGFpbmVyLmNoaWxkcmVuLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0Y29udGFpbmVyLmNoaWxkcmVuWyBpIF0uc3R5bGUuZGlzcGxheSA9IGkgPT09IGlkID8gJ2Jsb2NrJyA6ICdub25lJztcblxuXHRcdH1cblxuXHRcdG1vZGUgPSBpZDtcblxuXHR9XG5cblx0Ly9cblxuXHR2YXIgYmVnaW5UaW1lID0gKCBwZXJmb3JtYW5jZSB8fCBEYXRlICkubm93KCksIHByZXZUaW1lID0gYmVnaW5UaW1lLCBmcmFtZXMgPSAwO1xuXG5cdHZhciBmcHNQYW5lbCA9IGFkZFBhbmVsKCBuZXcgU3RhdHMuUGFuZWwoICdGUFMnLCAnIzBmZicsICcjMDAyJyApICk7XG5cdHZhciBtc1BhbmVsID0gYWRkUGFuZWwoIG5ldyBTdGF0cy5QYW5lbCggJ01TJywgJyMwZjAnLCAnIzAyMCcgKSApO1xuXG5cdGlmICggc2VsZi5wZXJmb3JtYW5jZSAmJiBzZWxmLnBlcmZvcm1hbmNlLm1lbW9yeSApIHtcblxuXHRcdHZhciBtZW1QYW5lbCA9IGFkZFBhbmVsKCBuZXcgU3RhdHMuUGFuZWwoICdNQicsICcjZjA4JywgJyMyMDEnICkgKTtcblxuXHR9XG5cblx0c2hvd1BhbmVsKCAwICk7XG5cblx0cmV0dXJuIHtcblxuXHRcdFJFVklTSU9OOiAxNixcblxuXHRcdGRvbTogY29udGFpbmVyLFxuXG5cdFx0YWRkUGFuZWw6IGFkZFBhbmVsLFxuXHRcdHNob3dQYW5lbDogc2hvd1BhbmVsLFxuXG5cdFx0YmVnaW46IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0YmVnaW5UaW1lID0gKCBwZXJmb3JtYW5jZSB8fCBEYXRlICkubm93KCk7XG5cblx0XHR9LFxuXG5cdFx0ZW5kOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGZyYW1lcyArKztcblxuXHRcdFx0dmFyIHRpbWUgPSAoIHBlcmZvcm1hbmNlIHx8IERhdGUgKS5ub3coKTtcblxuXHRcdFx0bXNQYW5lbC51cGRhdGUoIHRpbWUgLSBiZWdpblRpbWUsIDIwMCApO1xuXG5cdFx0XHRpZiAoIHRpbWUgPj0gcHJldlRpbWUgKyAxMDAwICkge1xuXG5cdFx0XHRcdGZwc1BhbmVsLnVwZGF0ZSggKCBmcmFtZXMgKiAxMDAwICkgLyAoIHRpbWUgLSBwcmV2VGltZSApLCAxMDAgKTtcblxuXHRcdFx0XHRwcmV2VGltZSA9IHRpbWU7XG5cdFx0XHRcdGZyYW1lcyA9IDA7XG5cblx0XHRcdFx0aWYgKCBtZW1QYW5lbCApIHtcblxuXHRcdFx0XHRcdHZhciBtZW1vcnkgPSBwZXJmb3JtYW5jZS5tZW1vcnk7XG5cdFx0XHRcdFx0bWVtUGFuZWwudXBkYXRlKCBtZW1vcnkudXNlZEpTSGVhcFNpemUgLyAxMDQ4NTc2LCBtZW1vcnkuanNIZWFwU2l6ZUxpbWl0IC8gMTA0ODU3NiApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGltZTtcblxuXHRcdH0sXG5cblx0XHR1cGRhdGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0YmVnaW5UaW1lID0gdGhpcy5lbmQoKTtcblxuXHRcdH0sXG5cblx0XHQvLyBCYWNrd2FyZHMgQ29tcGF0aWJpbGl0eVxuXG5cdFx0ZG9tRWxlbWVudDogY29udGFpbmVyLFxuXHRcdHNldE1vZGU6IHNob3dQYW5lbFxuXG5cdH07XG5cbn07XG5cblN0YXRzLlBhbmVsID0gZnVuY3Rpb24gKCBuYW1lLCBmZywgYmcgKSB7XG5cblx0dmFyIG1pbiA9IEluZmluaXR5LCBtYXggPSAwLCByb3VuZCA9IE1hdGgucm91bmQ7XG5cdHZhciBQUiA9IHJvdW5kKCB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxICk7XG5cblx0dmFyIFdJRFRIID0gODAgKiBQUiwgSEVJR0hUID0gNDggKiBQUixcblx0XHRURVhUX1ggPSAzICogUFIsIFRFWFRfWSA9IDIgKiBQUixcblx0XHRHUkFQSF9YID0gMyAqIFBSLCBHUkFQSF9ZID0gMTUgKiBQUixcblx0XHRHUkFQSF9XSURUSCA9IDc0ICogUFIsIEdSQVBIX0hFSUdIVCA9IDMwICogUFI7XG5cblx0dmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdjYW52YXMnICk7XG5cdGNhbnZhcy53aWR0aCA9IFdJRFRIO1xuXHRjYW52YXMuaGVpZ2h0ID0gSEVJR0hUO1xuXHRjYW52YXMuc3R5bGUuY3NzVGV4dCA9ICd3aWR0aDo4MHB4O2hlaWdodDo0OHB4JztcblxuXHR2YXIgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCAnMmQnICk7XG5cdGNvbnRleHQuZm9udCA9ICdib2xkICcgKyAoIDkgKiBQUiApICsgJ3B4IEhlbHZldGljYSxBcmlhbCxzYW5zLXNlcmlmJztcblx0Y29udGV4dC50ZXh0QmFzZWxpbmUgPSAndG9wJztcblxuXHRjb250ZXh0LmZpbGxTdHlsZSA9IGJnO1xuXHRjb250ZXh0LmZpbGxSZWN0KCAwLCAwLCBXSURUSCwgSEVJR0hUICk7XG5cblx0Y29udGV4dC5maWxsU3R5bGUgPSBmZztcblx0Y29udGV4dC5maWxsVGV4dCggbmFtZSwgVEVYVF9YLCBURVhUX1kgKTtcblx0Y29udGV4dC5maWxsUmVjdCggR1JBUEhfWCwgR1JBUEhfWSwgR1JBUEhfV0lEVEgsIEdSQVBIX0hFSUdIVCApO1xuXG5cdGNvbnRleHQuZmlsbFN0eWxlID0gYmc7XG5cdGNvbnRleHQuZ2xvYmFsQWxwaGEgPSAwLjk7XG5cdGNvbnRleHQuZmlsbFJlY3QoIEdSQVBIX1gsIEdSQVBIX1ksIEdSQVBIX1dJRFRILCBHUkFQSF9IRUlHSFQgKTtcblxuXHRyZXR1cm4ge1xuXG5cdFx0ZG9tOiBjYW52YXMsXG5cblx0XHR1cGRhdGU6IGZ1bmN0aW9uICggdmFsdWUsIG1heFZhbHVlICkge1xuXG5cdFx0XHRtaW4gPSBNYXRoLm1pbiggbWluLCB2YWx1ZSApO1xuXHRcdFx0bWF4ID0gTWF0aC5tYXgoIG1heCwgdmFsdWUgKTtcblxuXHRcdFx0Y29udGV4dC5maWxsU3R5bGUgPSBiZztcblx0XHRcdGNvbnRleHQuZ2xvYmFsQWxwaGEgPSAxO1xuXHRcdFx0Y29udGV4dC5maWxsUmVjdCggMCwgMCwgV0lEVEgsIEdSQVBIX1kgKTtcblx0XHRcdGNvbnRleHQuZmlsbFN0eWxlID0gZmc7XG5cdFx0XHRjb250ZXh0LmZpbGxUZXh0KCByb3VuZCggdmFsdWUgKSArICcgJyArIG5hbWUgKyAnICgnICsgcm91bmQoIG1pbiApICsgJy0nICsgcm91bmQoIG1heCApICsgJyknLCBURVhUX1gsIFRFWFRfWSApO1xuXG5cdFx0XHRjb250ZXh0LmRyYXdJbWFnZSggY2FudmFzLCBHUkFQSF9YICsgUFIsIEdSQVBIX1ksIEdSQVBIX1dJRFRIIC0gUFIsIEdSQVBIX0hFSUdIVCwgR1JBUEhfWCwgR1JBUEhfWSwgR1JBUEhfV0lEVEggLSBQUiwgR1JBUEhfSEVJR0hUICk7XG5cblx0XHRcdGNvbnRleHQuZmlsbFJlY3QoIEdSQVBIX1ggKyBHUkFQSF9XSURUSCAtIFBSLCBHUkFQSF9ZLCBQUiwgR1JBUEhfSEVJR0hUICk7XG5cblx0XHRcdGNvbnRleHQuZmlsbFN0eWxlID0gYmc7XG5cdFx0XHRjb250ZXh0Lmdsb2JhbEFscGhhID0gMC45O1xuXHRcdFx0Y29udGV4dC5maWxsUmVjdCggR1JBUEhfWCArIEdSQVBIX1dJRFRIIC0gUFIsIEdSQVBIX1ksIFBSLCByb3VuZCggKCAxIC0gKCB2YWx1ZSAvIG1heFZhbHVlICkgKSAqIEdSQVBIX0hFSUdIVCApICk7XG5cblx0XHR9XG5cblx0fTtcblxufTtcblxuZXhwb3J0IGRlZmF1bHQgU3RhdHM7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/three/examples/jsm/libs/stats.module.js\n")}}]);