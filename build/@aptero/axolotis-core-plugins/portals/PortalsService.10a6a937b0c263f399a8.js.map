{"version":3,"file":"@aptero/axolotis-core-plugins/portals/PortalsService.10a6a937b0c263f399a8.js","mappings":";;;;;;;;;;;wVAYO,MAAMA,EACXC,eAEmB,oBAACC,GAClB,MAAMC,QAAqBD,EAASE,WAClC,qDAEIC,QAA2BF,EAC9BG,iBACAC,wBAAkCC,EAAAA,SAAAA,MAK/BC,SAHEJ,EAAmBD,WACvBM,EAAAA,+BAEoBR,EAASE,WAC/B,kDAEIO,QAAcT,EAASE,WAC3B,gDAEF,IAAIQ,EAAiB,UACrB,IACEA,EAAiBC,OAAOC,SAASC,KACjC,MAAOC,IAGT,OAAO,IAAIC,EAAed,EAAcM,EAAWE,EAAOC,IAI9D,MAAMM,EAAS,GAER,MAAMD,EACXhB,YACUC,EACRO,EACQE,EACRQ,GACA,KAJQjB,SAAAA,EAIR,KAFQS,MAAAA,EAER,WAYE,GAZF,sBAyDkC,IAzDlC,4BA0DmC,IAzDnCS,KAAKC,aAAaF,EAASjB,EAASI,kBACpCG,EAAUa,QAAQL,EAAeM,MAAOC,IACtC,IAAK,MAAMC,KAAQL,KAAKM,aACtBD,EAAKD,MAGTJ,KAAKT,MAAMgB,cAAcC,MAAK,KAC5BR,KAAKS,YAMTA,SACE,MAAMC,EAAKV,KAAKT,MAAMoB,SAASC,aAE/BZ,KAAKT,MAAMoB,SAASE,OAAM,GAAM,GAAM,GAEtCb,KAAKT,MAAMoB,SAASG,WAAY,EAEhC,IAAK,MAAMT,KAAQL,KAAKe,mBACtBV,IAGFK,EAAGM,WAAU,GAAM,GAAM,GAAM,GAC/BN,EAAGO,WAAU,GAGfC,UACE,OAAOrB,EAAeM,KAGxBgB,eAAepB,GAKb,OAJAA,EAAQqB,QAAQ,KAAM,IACjBrB,EAAQsB,WAAW,UACtBtB,EAAUN,OAAOC,SAAS4B,OAAS,IAAMvB,GAEpC,IAAIwB,IAAIxB,GAASyB,WAG1BvB,aAAawB,EAAaC,GACxBD,EAAMzB,KAAKmB,eAAeM,GACrB3B,EAAO2B,KACV3B,EAAO2B,GAAOC,GAIlBC,SAASF,GAEP,OADAA,EAAMzB,KAAKmB,eAAeM,GACnB3B,EAAO2B,GAGhBG,WAAWH,GACT,QAASzB,KAAK2B,SAASF,GAMzBI,cAAcC,GACZ9B,KAAKM,aAAaE,KAAKsB,GAGzBC,oBAAoBD,GAClB9B,KAAKe,mBAAmBP,KAAKsB","sources":["webpack://axolotis-core-plugins/./src/lib/modules/portals/PortalsService.ts"],"sourcesContent":["import { Component } from \"@aptero/axolotis-player\";\r\nimport { WorldEntity } from \"@aptero/axolotis-player\";\r\n\r\nimport { Services } from \"@aptero/axolotis-player\";\r\nimport { ThreeLib } from \"../three/ThreeLib\";\r\nimport { Service } from \"@aptero/axolotis-player\";\r\nimport { WebpackLazyModule } from \"@root/lib/generated/webpack/WebpackLoader\";\r\nimport { InitialComponentLoader, LazyServices } from \"@aptero/axolotis-player\";\r\nimport { WorldService } from \"@root/lib/modules/worlds/WorldService\";\r\nimport { CODE_LOADER_MODULE_NAME } from \"@aptero/axolotis-player\";\r\nimport { FrameLoop } from \"@root/lib/modules/frame/FrameLoop\";\r\n\r\nexport class Factory implements WebpackLazyModule, Service<PortalsService> {\r\n  constructor() {}\r\n\r\n  async createService(services: LazyServices): Promise<PortalsService> {\r\n    const worldService = await services.getService<WorldService>(\r\n      \"@aptero/axolotis-core-plugins/worlds/WorldService\"\r\n    );\r\n    const actualWorldService = await worldService\r\n      .getActiveWorld()\r\n      .getFirstComponentByType<Services>(Services.name);\r\n    const codeLoader =\r\n      await actualWorldService.getService<InitialComponentLoader>(\r\n        CODE_LOADER_MODULE_NAME\r\n      );\r\n    const frameLoop = await services.getService<FrameLoop>(\r\n      \"@aptero/axolotis-core-plugins/frame/FrameLoop\"\r\n    );\r\n    const three = await services.getService<ThreeLib>(\r\n      \"@aptero/axolotis-core-plugins/three/ThreeLib\"\r\n    );\r\n    let initialRoomUrl = \"initial\";\r\n    try {\r\n      initialRoomUrl = window.location.href;\r\n    } catch (e) {\r\n      /* ignore*/\r\n    }\r\n    return new PortalsService(worldService, frameLoop, three, initialRoomUrl);\r\n  }\r\n}\r\n\r\nconst worlds = {};\r\n\r\nexport class PortalsService implements Component {\r\n  constructor(\r\n    private services: WorldService,\r\n    frameLoop: FrameLoop,\r\n    private three: ThreeLib,\r\n    roomUrl: string\r\n  ) {\r\n    this.notifylWorld(roomUrl, services.getActiveWorld());\r\n    frameLoop.addLoop(PortalsService.name, (delta) => {\r\n      for (const loop of this.portalsLoops) {\r\n        loop(delta);\r\n      }\r\n    });\r\n    this.three.preRenderPass.push(() => {\r\n      this.render();\r\n    });\r\n  }\r\n\r\n  i = 0;\r\n\r\n  render() {\r\n    const gl = this.three.renderer.getContext();\r\n    // clear buffers now: color, depth, stencil\r\n    this.three.renderer.clear(true, true, true);\r\n    // do not clear buffers before each render pass\r\n    this.three.renderer.autoClear = false;\r\n\r\n    for (const loop of this.portalsRenderLoops) {\r\n      loop();\r\n    }\r\n\r\n    gl.colorMask(true, true, true, true);\r\n    gl.depthMask(true);\r\n  }\r\n\r\n  getType(): string {\r\n    return PortalsService.name;\r\n  }\r\n\r\n  cleanUpRoomUrl(roomUrl: string) {\r\n    roomUrl.replace(\"./\", \"\");\r\n    if (!roomUrl.startsWith(\"http\")) {\r\n      roomUrl = window.location.origin + \"/\" + roomUrl;\r\n    }\r\n    return new URL(roomUrl).toString();\r\n  }\r\n\r\n  notifylWorld(url: string, world: WorldEntity) {\r\n    url = this.cleanUpRoomUrl(url);\r\n    if (!worlds[url]) {\r\n      worlds[url] = world;\r\n    }\r\n  }\r\n\r\n  getWorld(url: string) {\r\n    url = this.cleanUpRoomUrl(url);\r\n    return worlds[url];\r\n  }\r\n\r\n  worldExist(url: string) {\r\n    return !!this.getWorld(url);\r\n  }\r\n\r\n  portalsLoops: ((delta) => void)[] = [];\r\n  portalsRenderLoops: (() => void)[] = [];\r\n\r\n  addPortalLoop(callback: (delta) => void) {\r\n    this.portalsLoops.push(callback);\r\n  }\r\n\r\n  addPortalRenderLoop(callback: () => void) {\r\n    this.portalsRenderLoops.push(callback);\r\n  }\r\n}\r\n"],"names":["Factory","constructor","services","worldService","getService","actualWorldService","getActiveWorld","getFirstComponentByType","Services","frameLoop","CODE_LOADER_MODULE_NAME","three","initialRoomUrl","window","location","href","e","PortalsService","worlds","roomUrl","this","notifylWorld","addLoop","name","delta","loop","portalsLoops","preRenderPass","push","render","gl","renderer","getContext","clear","autoClear","portalsRenderLoops","colorMask","depthMask","getType","cleanUpRoomUrl","replace","startsWith","origin","URL","toString","url","world","getWorld","worldExist","addPortalLoop","callback","addPortalRenderLoop"],"sourceRoot":""}