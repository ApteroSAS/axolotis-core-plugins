{"version":3,"file":"@aptero/axolotis-core-plugins/worlds/WorldService.6a1b4b2ac0d42d81b683.js","mappings":";;;;;;;;;;;8RAcO,MAAMA,EACXC,eAEmB,oBAACC,GAClB,OAAO,IAAIC,EACTD,QACMA,EAASE,WACb,uDAEIF,EAASE,WACb,kDAMR,IAAIC,EAA2C,GAC3CC,EAA0C,IAOzCC,EAAAA,EAAAA,kBAAyB,UAAUC,eAEtCD,EAAAA,EAAAA,kBAAyB,UAAUE,OAAS,IAC5CF,EAAAA,EAAAA,kBAAyB,UAAUC,YAAc,QAG5C,MAAME,EACXT,YAAmBU,GAAc,KAAdA,KAAAA,EACnBC,UACE,OAAOF,EAAKC,MAGhB,IAAIE,EAAc,EACX,SAASC,EAAiBC,GAC/B,MAAMN,GAASF,EAAAA,EAAAA,kBAAyB,UAClBQ,EAAYC,wBAA8BN,EAAKC,OAEnEI,EAAYE,aAAmB,IAAIP,EAAK,SAAWG,MAErD,IAAIK,EAAYH,EAAYC,wBAA8BN,EAAKC,MAAMA,KACrEF,EAAOA,OAAOS,GAAaH,EACA,SAAvBN,EAAOD,cACTC,EAAOD,YAAcU,GAIlB,MAAMf,EAGXF,YACEC,EACAiB,EACAC,G,iBACA,G,EAAA,W,EAAA,M,sFACAN,EAAiBZ,EAASmB,YAC1BC,QAAQC,IAAI,QACZ,IAAIC,EAAgB,KACpB,IAAK,MAAMC,KAAOC,KAAKC,YAAa,CAClC,MAAMC,EAAQF,KAAKC,YAAYF,GACfG,EAAMZ,wBAAkCa,EAAAA,SAAAA,OACvC3B,IACfsB,EAAWI,GAGf,IAAKJ,EACH,MAAM,IAAIM,MAEZJ,KAAKE,MAAQJ,EAGbtB,EACGE,WAAmC2B,EAAAA,yBACnCC,MAAKC,MAAAA,UACEC,EAAWC,sBACjB,IAAK,MAAMC,KAAY9B,EACrB8B,OAGN,MAAM3B,GAASF,EAAAA,EAAAA,kBAAyB,UACb,SAAvBE,EAAOD,aACTkB,KAAKW,qBAAqB5B,EAAOD,aAerCI,UACE,OAAOT,EAAaQ,KAGtBgB,YAEE,OADoBpB,EAAAA,EAAAA,kBAAyB,UACxBE,OAGvB6B,iBACE,IAAIC,GAAgBhC,EAAAA,EAAAA,kBAAyB,UAC7C,OAAOmB,KAAKC,YAAYY,EAAc/B,aAGxCgC,gBACE,OAAOd,KAAKE,OAASF,KAAKY,iBAG5BjC,yBAAyB+B,GAA6C,IAAvBK,EAAuB,wDACpEpC,EAAyBqC,KAAKN,GAC1BK,GACFL,IAIJO,gBAAgBP,GAA6C,IAAvBK,EAAuB,wDAC3DnC,EAAwBoC,KAAKN,GACzBK,GACFL,IAIJQ,eAAehB,GACb,IAAK,MAAMH,KAAOC,KAAKC,YACrB,GAAIC,GAASF,KAAKC,YAAYF,GAE5B,YADAC,KAAKW,qBAAqBZ,GAI9B,MAAM,IAAIK,MAGZO,qBAAqB1B,GACnB,IAAI4B,GAAgBhC,EAAAA,EAAAA,kBAAyB,UAC7C,GAAIgC,EAAc/B,cAAgBG,EAAM,CACtC4B,EAAc/B,YAAcG,EAC5B,IAAK,MAAMyB,KAAY/B,EACrB+B","sources":["webpack://axolotis-core-plugins/./src/lib/modules/worlds/WorldService.ts"],"sourcesContent":["import { WebpackLazyModule } from \"@root/lib/generated/webpack/WebpackLoader\";\r\nimport {\r\n  Service,\r\n  InitialComponentLoader,\r\n  LazyServices,\r\n  Services,\r\n  WorldEntity,\r\n  Component,\r\n  CODE_LOADER_MODULE_NAME,\r\n  getGlobalStorage,\r\n} from \"@aptero/axolotis-player\";\r\nimport { FrameLoop } from \"@root/lib/modules/frame/FrameLoop\";\r\nimport { ThreeLib } from \"@root/lib/modules/three/ThreeLib\";\r\n\r\nexport class Factory implements WebpackLazyModule, Service<WorldService> {\r\n  constructor() {}\r\n\r\n  async createService(services: LazyServices): Promise<WorldService> {\r\n    return new WorldService(\r\n      services,\r\n      await services.getService<FrameLoop>(\r\n        \"@aptero/axolotis-core-plugins/frame/FrameLoop\"\r\n      ),\r\n      await services.getService<ThreeLib>(\r\n        \"@aptero/axolotis-core-plugins/three/ThreeLib\"\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nlet addOnWorldChangeCallback: (() => void)[] = []; //do not use events emitter here to avoid surcharing dependencies in the code modules\r\nlet addOnWorldAddedCallback: (() => void)[] = []; //do not use events emitter here to avoid surcharing dependencies in the code modules\r\n\r\ninterface Worlds {\r\n  activeWorld: string;\r\n  worlds: { [id: string]: WorldEntity };\r\n}\r\n\r\nif (!getGlobalStorage<Worlds>(\"worlds\").activeWorld) {\r\n  //initialize world service\r\n  getGlobalStorage<Worlds>(\"worlds\").worlds = {};\r\n  getGlobalStorage<Worlds>(\"worlds\").activeWorld = \"NONE\";\r\n}\r\n\r\nexport class Name implements Component {\r\n  constructor(public name: string) {}\r\n  getType(): string {\r\n    return Name.name;\r\n  }\r\n}\r\nlet worldNumber = 0;\r\nexport function registerNewWorld(worldEntity: WorldEntity) {\r\n  const worlds = getGlobalStorage<Worlds>(\"worlds\");\r\n  let componentByType = worldEntity.getFirstComponentByType<Name>(Name.name);\r\n  if (!componentByType) {\r\n    worldEntity.addComponent<Name>(new Name(\"World-\" + worldNumber++));\r\n  }\r\n  let worldName = worldEntity.getFirstComponentByType<Name>(Name.name).name;\r\n  worlds.worlds[worldName] = worldEntity;\r\n  if (worlds.activeWorld === \"NONE\") {\r\n    worlds.activeWorld = worldName;\r\n  }\r\n}\r\n\r\nexport class WorldService implements Component {\r\n  private world: WorldEntity;\r\n\r\n  constructor(\r\n    services: LazyServices,\r\n    frameLoop: FrameLoop,\r\n    threeLib: ThreeLib\r\n  ) {\r\n    registerNewWorld(services.getWorld());\r\n    console.log(\"info\");\r\n    let worldtmp: any = null;\r\n    for (const key in this.getWorlds()) {\r\n      const world = this.getWorlds()[key];\r\n      let wservices = world.getFirstComponentByType<Services>(Services.name);\r\n      if (wservices == services) {\r\n        worldtmp = world;\r\n      }\r\n    }\r\n    if (!worldtmp) {\r\n      throw new Error();\r\n    }\r\n    this.world = worldtmp;\r\n\r\n    //new world service is new world event\r\n    services\r\n      .getService<InitialComponentLoader>(CODE_LOADER_MODULE_NAME)\r\n      .then(async (codeLoader) => {\r\n        await codeLoader.awaitInitialLoading();\r\n        for (const callback of addOnWorldAddedCallback) {\r\n          callback();\r\n        }\r\n      });\r\n    const worlds = getGlobalStorage<Worlds>(\"worlds\");\r\n    if (worlds.activeWorld !== \"NONE\") {\r\n      this.setActiveWorldByName(worlds.activeWorld);\r\n    }\r\n\r\n    /*\r\n    TODO there is a bug with this portal system\r\n    this.addOnWorldChangeCallback(() => {\r\n      window.removeEventListener(\"resize\", threeLib.onWindowResize);\r\n      frameLoop.removeLoop(ThreeLib.name);\r\n      if (this.isActiveWorld()) {\r\n        window.addEventListener(\"resize\", threeLib.onWindowResize, false);\r\n        frameLoop.addLoop(ThreeLib.name, threeLib.render);\r\n      }\r\n    }, true);*/\r\n  }\r\n\r\n  getType(): string {\r\n    return WorldService.name;\r\n  }\r\n\r\n  getWorlds(): { [id: string]: WorldEntity } {\r\n    let globalStorage = getGlobalStorage<Worlds>(\"worlds\");\r\n    return globalStorage.worlds;\r\n  }\r\n\r\n  getActiveWorld() {\r\n    let globalStorage = getGlobalStorage<Worlds>(\"worlds\");\r\n    return this.getWorlds()[globalStorage.activeWorld];\r\n  }\r\n\r\n  isActiveWorld() {\r\n    return this.world == this.getActiveWorld();\r\n  }\r\n\r\n  addOnWorldChangeCallback(callback: () => void, init: boolean = false) {\r\n    addOnWorldChangeCallback.push(callback);\r\n    if (init) {\r\n      callback();\r\n    }\r\n  }\r\n\r\n  addOnWorldAdded(callback: () => void, init: boolean = false) {\r\n    addOnWorldAddedCallback.push(callback);\r\n    if (init) {\r\n      callback();\r\n    }\r\n  }\r\n\r\n  setActiveWorld(world: WorldEntity) {\r\n    for (const key in this.getWorlds()) {\r\n      if (world == this.getWorlds()[key]) {\r\n        this.setActiveWorldByName(key);\r\n        return;\r\n      }\r\n    }\r\n    throw new Error();\r\n  }\r\n\r\n  setActiveWorldByName(name: string) {\r\n    let globalStorage = getGlobalStorage<Worlds>(\"worlds\");\r\n    if (globalStorage.activeWorld !== name) {\r\n      globalStorage.activeWorld = name;\r\n      for (const callback of addOnWorldChangeCallback) {\r\n        callback();\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"names":["Factory","constructor","services","WorldService","getService","addOnWorldChangeCallback","addOnWorldAddedCallback","getGlobalStorage","activeWorld","worlds","Name","name","getType","worldNumber","registerNewWorld","worldEntity","getFirstComponentByType","addComponent","worldName","frameLoop","threeLib","getWorld","console","log","worldtmp","key","this","getWorlds","world","Services","Error","CODE_LOADER_MODULE_NAME","then","async","codeLoader","awaitInitialLoading","callback","setActiveWorldByName","getActiveWorld","globalStorage","isActiveWorld","init","push","addOnWorldAdded","setActiveWorld"],"sourceRoot":""}