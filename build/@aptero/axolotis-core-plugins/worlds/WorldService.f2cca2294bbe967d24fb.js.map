{"version":3,"file":"@aptero/axolotis-core-plugins/worlds/WorldService.f2cca2294bbe967d24fb.js","mappings":";;;;;;;;;;;oQAcO,MAAMA,EACXC,eAEmB,oBAACC,GAClB,OAAO,IAAIC,EAAaD,IAI5B,IAAIE,EAA2C,GAC3CC,EAA0C,GAavC,SAASC,EAAiBC,GAE/B,MAAMC,GAASC,EAAAA,EAAAA,kBAAyB,UACxCD,EAAOA,OAAOE,KAAKH,GACfC,EAAOG,YAAc,IACvBH,EAAOG,YAAc,EACrBH,EAAOI,MAAQJ,EAAOA,OAAOA,EAAOG,eAZnCF,EAAAA,EAAAA,kBAAyB,UAAUE,eAEtCF,EAAAA,EAAAA,kBAAyB,UAAUD,OAAS,IAC5CC,EAAAA,EAAAA,kBAAyB,UAAUE,aAAe,GAa7C,MAAMR,EAGXF,YAAYC,G,iBAAwB,G,EAAA,W,EAAA,M,sFAClCI,EAAiBJ,EAASW,YAC1BC,QAAQC,IAAI,QACZ,IAAIC,EAAgB,KACpB,IAAK,MAAMJ,KAASK,KAAKC,YAAa,CACpBN,EAAMO,wBAAkCC,EAAAA,SAAAA,OACvClB,IACfc,EAAWJ,GAGf,IAAKI,EACH,MAAM,IAAIK,MAEZJ,KAAKL,MAAQI,EAGbd,EACGoB,WAAmCC,EAAAA,yBACnCC,MAAKC,MAAAA,IACJC,EAAWC,sBACX,IAAK,MAAMC,KAAYvB,EACrBuB,QAIFnB,EAAAA,EAAAA,kBAAyB,UAAUE,aAAe,GACpDM,KAAKY,wBACHpB,EAAAA,EAAAA,kBAAyB,UAAUE,aAKzCmB,UACE,OAAO3B,EAAa4B,KAGtBb,YAEE,OADoBT,EAAAA,EAAAA,kBAAyB,UACxBD,OAGvBwB,iBACE,IAAIC,GAAgBxB,EAAAA,EAAAA,kBAAyB,UAC7C,OAAOQ,KAAKC,YAAYe,EAActB,aAGxCuB,gBACE,OAAOjB,KAAKL,OAASK,KAAKe,iBAG5B5B,yBAAyBwB,GAA6C,IAAvBO,EAAuB,wDACpE/B,EAAyBM,KAAKkB,GAC1BO,GACFP,IAIJQ,gBAAgBR,GAA6C,IAAvBO,EAAuB,wDAC3D9B,EAAwBK,KAAKkB,GACzBO,GACFP,IAIJS,eAAezB,GACb,IAAK,IAAI0B,EAAI,EAAGA,EAAIrB,KAAKC,YAAYqB,OAAQD,IAC3C,GAAI1B,GAASK,KAAKC,YAAYoB,GAE5B,YADArB,KAAKY,uBAAuBS,GAIhC,MAAM,IAAIjB,MAGZQ,uBAAuBW,GACrB,IAAI/B,EAAAA,EAAAA,kBAAyB,UAAUE,aAAe6B,EAAQ,EAC5D/B,EAAAA,EAAAA,kBAAyB,UAAUE,YAAc6B,GACjD/B,EAAAA,EAAAA,kBAAyB,UAAUG,MAAQK,KAAKC,YAAYsB,GAC5D,IAAK,MAAMZ,KAAYxB,EACrBwB","sources":["webpack://axolotis-core-plugins/./src/lib/modules/worlds/WorldService.ts"],"sourcesContent":["import { WebpackLazyModule } from \"@root/lib/generated/webpack/WebpackLoader\";\nimport { Service } from \"@aptero/axolotis-player/build/types/modules/core/ecs/Service\";\nimport {\n  InitialComponentLoader,\n  LazyServices,\n  Services,\n  WorldEntity,\n} from \"@aptero/axolotis-player\";\nimport Component from \"@aptero/axolotis-player/build/types/modules/core/ecs/Component\";\nimport {\n  CODE_LOADER_MODULE_NAME,\n  getGlobalStorage,\n} from \"@aptero/axolotis-player\";\n\nexport class Factory implements WebpackLazyModule, Service<WorldService> {\n  constructor() {}\n\n  async createService(services: LazyServices): Promise<WorldService> {\n    return new WorldService(services);\n  }\n}\n\nlet addOnWorldChangeCallback: (() => void)[] = []; //do not use events emitter here to avoid surcharing dependencies in the code modules\nlet addOnWorldAddedCallback: (() => void)[] = []; //do not use events emitter here to avoid surcharing dependencies in the code modules\ninterface Worlds {\n  world: WorldEntity;\n  activeWorld: number;\n  worlds: WorldEntity[];\n}\n\nif (!getGlobalStorage<Worlds>(\"worlds\").activeWorld) {\n  //initialize world service\n  getGlobalStorage<Worlds>(\"worlds\").worlds = [];\n  getGlobalStorage<Worlds>(\"worlds\").activeWorld = -1;\n}\n\nexport function registerNewWorld(worldEntity: WorldEntity) {\n  //TODO have a way to identify world and guarantee unicity here\n  const worlds = getGlobalStorage<Worlds>(\"worlds\");\n  worlds.worlds.push(worldEntity);\n  if (worlds.activeWorld < 0) {\n    worlds.activeWorld = 0;\n    worlds.world = worlds.worlds[worlds.activeWorld];\n  }\n}\n\nexport class WorldService implements Component {\n  private world: WorldEntity;\n\n  constructor(services: LazyServices) {\n    registerNewWorld(services.getWorld());\n    console.log(\"info\");\n    let worldtmp: any = null;\n    for (const world of this.getWorlds()) {\n      let wservices = world.getFirstComponentByType<Services>(Services.name);\n      if (wservices == services) {\n        worldtmp = world;\n      }\n    }\n    if (!worldtmp) {\n      throw new Error();\n    }\n    this.world = worldtmp;\n\n    //new world service is new world event\n    services\n      .getService<InitialComponentLoader>(CODE_LOADER_MODULE_NAME)\n      .then(async (codeLoader) => {\n        codeLoader.awaitInitialLoading();\n        for (const callback of addOnWorldAddedCallback) {\n          callback();\n        }\n      });\n\n    if (getGlobalStorage<Worlds>(\"worlds\").activeWorld >= 0) {\n      this.setActiveWorldByNumber(\n        getGlobalStorage<Worlds>(\"worlds\").activeWorld\n      );\n    }\n  }\n\n  getType(): string {\n    return WorldService.name;\n  }\n\n  getWorlds(): WorldEntity[] {\n    let globalStorage = getGlobalStorage<Worlds>(\"worlds\");\n    return globalStorage.worlds;\n  }\n\n  getActiveWorld() {\n    let globalStorage = getGlobalStorage<Worlds>(\"worlds\");\n    return this.getWorlds()[globalStorage.activeWorld];\n  }\n\n  isActiveWorld() {\n    return this.world == this.getActiveWorld();\n  }\n\n  addOnWorldChangeCallback(callback: () => void, init: boolean = false) {\n    addOnWorldChangeCallback.push(callback);\n    if (init) {\n      callback();\n    }\n  }\n\n  addOnWorldAdded(callback: () => void, init: boolean = false) {\n    addOnWorldAddedCallback.push(callback);\n    if (init) {\n      callback();\n    }\n  }\n\n  setActiveWorld(world: WorldEntity) {\n    for (let i = 0; i < this.getWorlds().length; i++) {\n      if (world == this.getWorlds()[i]) {\n        this.setActiveWorldByNumber(i);\n        return;\n      }\n    }\n    throw new Error();\n  }\n\n  setActiveWorldByNumber(number: number) {\n    if (getGlobalStorage<Worlds>(\"worlds\").activeWorld != number) {\n      getGlobalStorage<Worlds>(\"worlds\").activeWorld = number;\n      getGlobalStorage<Worlds>(\"worlds\").world = this.getWorlds()[number];\n      for (const callback of addOnWorldChangeCallback) {\n        callback();\n      }\n    }\n  }\n}\n"],"names":["Factory","constructor","services","WorldService","addOnWorldChangeCallback","addOnWorldAddedCallback","registerNewWorld","worldEntity","worlds","getGlobalStorage","push","activeWorld","world","getWorld","console","log","worldtmp","this","getWorlds","getFirstComponentByType","Services","Error","getService","CODE_LOADER_MODULE_NAME","then","async","codeLoader","awaitInitialLoading","callback","setActiveWorldByNumber","getType","name","getActiveWorld","globalStorage","isActiveWorld","init","addOnWorldAdded","setActiveWorld","i","length","number"],"sourceRoot":""}