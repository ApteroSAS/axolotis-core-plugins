{"version":3,"file":"@aptero/axolotis-core-plugins/worlds/WorldService.50856e5a6d09579b069b.js","mappings":";;;;;;;;;;;oQAcO,MAAMA,EACXC,eAEmB,oBAACC,GAClB,OAAO,IAAIC,EAAaD,IAI5B,IAAIE,EAA2C,GAC3CC,EAA0C,GAavC,SAASC,EAAiBC,IAC/BC,EAAAA,EAAAA,kBAAyB,UAAUC,OAAOC,KAAKH,IAC3CC,EAAAA,EAAAA,kBAAyB,UAAUG,YAAc,KACnDH,EAAAA,EAAAA,kBAAyB,UAAUG,YAAc,GACjDH,EAAAA,EAAAA,kBAAyB,UAAUI,OACjCJ,EAAAA,EAAAA,kBAAyB,UAAUC,QACjCD,EAAAA,EAAAA,kBAAyB,UAAUG,eAZtCH,EAAAA,EAAAA,kBAAyB,UAAUG,eAEtCH,EAAAA,EAAAA,kBAAyB,UAAUC,OAAS,IAC5CD,EAAAA,EAAAA,kBAAyB,UAAUG,aAAe,GAc7C,MAAMR,EAGXF,YAAYC,G,iBAAwB,G,EAAA,W,EAAA,M,sFAClCW,QAAQC,IAAI,QACZ,IAAIC,EAAgB,KACpB,IAAK,MAAMH,KAASI,KAAKC,YAAa,CAChBL,EAAMM,wBACxBC,EAAAA,SAAAA,OAEmBjB,IACnBa,EAAWH,GAGf,IAAKG,EACH,MAAM,IAAIK,MAEZJ,KAAKJ,MAAQG,EAGbb,EACGmB,WAAmCC,EAAAA,yBACnCC,MAAKC,MAAAA,IACJC,EAAWC,sBACX,IAAK,MAAMC,KAAYtB,EACrBsB,QAIFnB,EAAAA,EAAAA,kBAAyB,UAAUG,aAAe,GACpDK,KAAKY,wBACHpB,EAAAA,EAAAA,kBAAyB,UAAUG,aAKzCkB,UACE,OAAO1B,EAAa2B,KAGtBb,YACE,OAAOT,EAAAA,EAAAA,kBAAyB,UAAUC,OAG5CsB,iBACE,OAAOf,KAAKC,aAAYT,EAAAA,EAAAA,kBAAyB,UAAUG,aAG7DqB,gBACE,OAAOhB,KAAKJ,OAASI,KAAKe,iBAG5B3B,yBAAyBuB,GAA6C,IAAvBM,EAAuB,wDACpE7B,EAAyBM,KAAKiB,GAC1BM,GACFN,IAIJO,gBAAgBP,GAA6C,IAAvBM,EAAuB,wDAC3D5B,EAAwBK,KAAKiB,GACzBM,GACFN,IAIJQ,eAAevB,GACb,IAAK,IAAIwB,EAAI,EAAGA,EAAIpB,KAAKC,YAAYoB,OAAQD,IAC3C,GAAIxB,GAASI,KAAKC,YAAYmB,GAE5B,YADApB,KAAKY,uBAAuBQ,GAIhC,MAAM,IAAIhB,MAGZQ,uBAAuBU,GACrB,IAAI9B,EAAAA,EAAAA,kBAAyB,UAAUG,aAAe2B,EAAQ,EAC5D9B,EAAAA,EAAAA,kBAAyB,UAAUG,YAAc2B,GACjD9B,EAAAA,EAAAA,kBAAyB,UAAUI,MAAQI,KAAKC,YAAYqB,GAC5D,IAAK,MAAMX,KAAYvB,EACrBuB","sources":["webpack://axolotis-core-plugins/./src/lib/modules/worlds/WorldService.ts"],"sourcesContent":["import { WebpackLazyModule } from \"@root/lib/generated/webpack/WebpackLoader\";\nimport { Service } from \"@aptero/axolotis-player/build/types/modules/core/ecs/Service\";\nimport {\n  InitialComponentLoader,\n  LazyServices,\n  Services,\n  WorldEntity,\n} from \"@aptero/axolotis-player\";\nimport Component from \"@aptero/axolotis-player/build/types/modules/core/ecs/Component\";\nimport {\n  CODE_LOADER_MODULE_NAME,\n  getGlobalStorage,\n} from \"@aptero/axolotis-player\";\n\nexport class Factory implements WebpackLazyModule, Service<WorldService> {\n  constructor() {}\n\n  async createService(services: LazyServices): Promise<WorldService> {\n    return new WorldService(services);\n  }\n}\n\nlet addOnWorldChangeCallback: (() => void)[] = []; //do not use events emitter here to avoid surcharing dependencies in the code modules\nlet addOnWorldAddedCallback: (() => void)[] = []; //do not use events emitter here to avoid surcharing dependencies in the code modules\ninterface Worlds {\n  world: WorldEntity;\n  activeWorld: number;\n  worlds: WorldEntity[];\n}\n\nif (!getGlobalStorage<Worlds>(\"worlds\").activeWorld) {\n  //initialize world service\n  getGlobalStorage<Worlds>(\"worlds\").worlds = [];\n  getGlobalStorage<Worlds>(\"worlds\").activeWorld = -1;\n}\n\nexport function registerNewWorld(worldEntity: WorldEntity) {\n  getGlobalStorage<Worlds>(\"worlds\").worlds.push(worldEntity);\n  if (getGlobalStorage<Worlds>(\"worlds\").activeWorld < 0) {\n    getGlobalStorage<Worlds>(\"worlds\").activeWorld = 0;\n    getGlobalStorage<Worlds>(\"worlds\").world =\n      getGlobalStorage<Worlds>(\"worlds\").worlds[\n        getGlobalStorage<Worlds>(\"worlds\").activeWorld\n      ];\n  }\n}\n\nexport class WorldService implements Component {\n  private world: WorldEntity;\n\n  constructor(services: LazyServices) {\n    console.log(\"info\");\n    let worldtmp: any = null;\n    for (const world of this.getWorlds()) {\n      let serviceEntity = world.getFirstComponentByType<Services>(\n        Services.name\n      );\n      if (serviceEntity == services) {\n        worldtmp = world;\n      }\n    }\n    if (!worldtmp) {\n      throw new Error();\n    }\n    this.world = worldtmp;\n\n    //new world service is new world event\n    services\n      .getService<InitialComponentLoader>(CODE_LOADER_MODULE_NAME)\n      .then(async (codeLoader) => {\n        codeLoader.awaitInitialLoading();\n        for (const callback of addOnWorldAddedCallback) {\n          callback();\n        }\n      });\n\n    if (getGlobalStorage<Worlds>(\"worlds\").activeWorld >= 0) {\n      this.setActiveWorldByNumber(\n        getGlobalStorage<Worlds>(\"worlds\").activeWorld\n      );\n    }\n  }\n\n  getType(): string {\n    return WorldService.name;\n  }\n\n  getWorlds():WorldEntity[] {\n    return getGlobalStorage<Worlds>(\"worlds\").worlds;\n  }\n\n  getActiveWorld() {\n    return this.getWorlds()[getGlobalStorage<Worlds>(\"worlds\").activeWorld];\n  }\n\n  isActiveWorld() {\n    return this.world == this.getActiveWorld();\n  }\n\n  addOnWorldChangeCallback(callback: () => void, init: boolean = false) {\n    addOnWorldChangeCallback.push(callback);\n    if (init) {\n      callback();\n    }\n  }\n\n  addOnWorldAdded(callback: () => void, init: boolean = false) {\n    addOnWorldAddedCallback.push(callback);\n    if (init) {\n      callback();\n    }\n  }\n\n  setActiveWorld(world: WorldEntity) {\n    for (let i = 0; i < this.getWorlds().length; i++) {\n      if (world == this.getWorlds()[i]) {\n        this.setActiveWorldByNumber(i);\n        return;\n      }\n    }\n    throw new Error();\n  }\n\n  setActiveWorldByNumber(number: number) {\n    if (getGlobalStorage<Worlds>(\"worlds\").activeWorld != number) {\n      getGlobalStorage<Worlds>(\"worlds\").activeWorld = number;\n      getGlobalStorage<Worlds>(\"worlds\").world = this.getWorlds()[number];\n      for (const callback of addOnWorldChangeCallback) {\n        callback();\n      }\n    }\n  }\n}\n"],"names":["Factory","constructor","services","WorldService","addOnWorldChangeCallback","addOnWorldAddedCallback","registerNewWorld","worldEntity","getGlobalStorage","worlds","push","activeWorld","world","console","log","worldtmp","this","getWorlds","getFirstComponentByType","Services","Error","getService","CODE_LOADER_MODULE_NAME","then","async","codeLoader","awaitInitialLoading","callback","setActiveWorldByNumber","getType","name","getActiveWorld","isActiveWorld","init","addOnWorldAdded","setActiveWorld","i","length","number"],"sourceRoot":""}