{"version":3,"file":"@aptero/axolotis-core-plugins/frame/FrameLoop.0c8b0eb2c719536e870b.js","mappings":";;;;;;;;;;;mVAMO,MAAMA,EACQ,oBAACC,GAClB,IAAIC,QAAmBD,EAASE,WAC9BC,EAAAA,yBAEEC,EAAS,IAAIC,EAIjB,OAHAJ,EAAWK,sBAAsBC,MAAK,KACpCH,EAAOI,6BAEFJ,GAIJ,MAAMC,EAcXI,cAAc,eAJqC,IAIrC,kBAHa,GAGb,0BAF4B,SAE5B,wBAD0B,SAGxCD,0BACE,MAAME,EAAWC,IACfC,KAAKC,gBAAgBR,EAAUS,MAC/B,MAAMC,EAAQJ,EAAIC,KAAKI,SACvBJ,KAAKI,SAAWL,EAChBM,sBAAsBP,GACtB,IAAK,MAAMQ,KAAYN,KAAKO,MAC1BP,KAAKC,gBAAgBK,GACrBN,KAAKO,MAAMD,GAAUH,GACrBH,KAAKQ,cAAcF,GAErBN,KAAKQ,cAAcf,EAAUS,OAE/BG,sBAAsBP,GAGxBW,sBAAsBC,EAAuBC,GAC3CX,KAAKC,gBAAkBS,EACvBV,KAAKQ,cAAgBG,EAGvBC,WAAWC,UACFb,KAAKO,MAAMM,GAClBb,KAAKC,gBAAgBY,GACrBb,KAAKQ,cAAcK,GAGrBC,QAAQD,EAAkBE,GACxB,GAAIf,KAAKO,MAAMM,GACb,MAAM,IAAIG,MAAM,wBAA0BH,GAE5Cb,KAAKO,MAAMM,GAAYE,EAGzBE,UACE,OAAOxB,EAAUS","sources":["webpack://axolotis-core-plugins/./src/lib/modules/frame/FrameLoop.ts"],"sourcesContent":["import { CODE_LOADER_MODULE_NAME } from \"@aptero/axolotis-player\";\r\nimport { InitialComponentLoader, LazyServices } from \"@aptero/axolotis-player\";\r\nimport { WebpackLazyModule } from \"@root/lib/generated/webpack/WebpackLoader\";\r\nimport { Service } from \"@aptero/axolotis-player\";\r\nimport { Component } from \"@aptero/axolotis-player\";\r\n\r\nexport class Factory implements WebpackLazyModule, Service<FrameLoop> {\r\n  async createService(services: LazyServices): Promise<FrameLoop> {\r\n    let codeLoader = await services.getService<InitialComponentLoader>(\r\n      CODE_LOADER_MODULE_NAME\r\n    );\r\n    let module = new FrameLoop();\r\n    codeLoader.awaitInitialLoading().then(() => {\r\n      module.startAnimationFrameLoop();\r\n    });\r\n    return module;\r\n  }\r\n}\r\n\r\nexport class FrameLoop implements Component {\r\n  //TODO frame loop\r\n  // setInterval Frameloop\r\n  // animationFrame\r\n  // Physic update\r\n  // low workload adaptative loop? Like when FPS is green we execute code once evry Frame when it is not we execute once every seconde.\r\n  // worker loop?\r\n  // stats for all those loop (stats.js)\r\n  // API to add task consumer?\r\n  //callbacks:((delta:number)=>void)[] = [];\r\n  loops: { [id: string]: (delta: number) => void } = {};\r\n  private prevTime: number = 0;\r\n  private monitoringStart: (name) => void = () => {};\r\n  private monitoringEnd: (name) => void = () => {};\r\n  constructor() {}\r\n\r\n  startAnimationFrameLoop() {\r\n    const animate = (t) => {\r\n      this.monitoringStart(FrameLoop.name);\r\n      const delta = t - this.prevTime;\r\n      this.prevTime = t;\r\n      requestAnimationFrame(animate);\r\n      for (const callback in this.loops) {\r\n        this.monitoringStart(callback);\r\n        this.loops[callback](delta);\r\n        this.monitoringEnd(callback);\r\n      }\r\n      this.monitoringEnd(FrameLoop.name);\r\n    };\r\n    requestAnimationFrame(animate);\r\n  }\r\n\r\n  setMonitoringCallback(start: (name) => void, end: (name) => void) {\r\n    this.monitoringStart = start;\r\n    this.monitoringEnd = end;\r\n  }\r\n\r\n  removeLoop(loopName: string) {\r\n    delete this.loops[loopName];\r\n    this.monitoringStart(loopName); //set this loop to 0 fix\r\n    this.monitoringEnd(loopName);\r\n  }\r\n\r\n  addLoop(loopName: string, iterationCallback: (delta: number) => void) {\r\n    if (this.loops[loopName]) {\r\n      throw new Error(\"loop already exist : \" + loopName);\r\n    }\r\n    this.loops[loopName] = iterationCallback;\r\n  }\r\n\r\n  getType(): string {\r\n    return FrameLoop.name;\r\n  }\r\n}\r\n"],"names":["Factory","services","codeLoader","getService","CODE_LOADER_MODULE_NAME","module","FrameLoop","awaitInitialLoading","then","startAnimationFrameLoop","constructor","animate","t","this","monitoringStart","name","delta","prevTime","requestAnimationFrame","callback","loops","monitoringEnd","setMonitoringCallback","start","end","removeLoop","loopName","addLoop","iterationCallback","Error","getType"],"sourceRoot":""}