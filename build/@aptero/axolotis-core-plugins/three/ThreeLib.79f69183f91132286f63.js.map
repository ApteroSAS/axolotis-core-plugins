{"version":3,"file":"@aptero/axolotis-core-plugins/three/ThreeLib.79f69183f91132286f63.js","mappings":";;;;;;;;;;;gZAYO,MAAMA,EAA6B,IAZnC,MAAmB,mCACV,IADU,gBAEf,IAEM,gBAACC,EAAoBC,GAIlC,OAHKC,KAAKC,YAAYH,KACpBE,KAAKC,YAAYH,SAAoBC,KAEhCC,KAAKC,YAAYH,K,wHCGrBI,eAAeC,IAMpB,aAJyB,6BAOpBD,eAAeE,IAAoB,MACxC,GAAI,UAACC,OAAOC,gBAAR,QAAC,EAAiBC,SAAU,CAC9B,MAAMC,QAAcL,IACpB,IAAII,EAAW,IAAIC,EAAMC,cAAc,CAAEC,WAAW,IACpDH,EAASI,QAAQN,OAAOO,WAAYP,OAAOQ,aAE3CN,EAASO,YAAcN,EAAMO,sBAC7BR,EAASS,oBAAsB,EAC/BT,EAASU,eAAiBT,EAAMU,aAChCX,EAASY,cAAcd,OAAOe,kBAE9BC,SAASC,KAAKC,YAAYhB,EAASiB,YAC9BnB,OAAOC,WACVD,OAAOC,SAAW,IAEpBD,OAAOC,SAASC,SAAWA,EAE7B,OAAOF,OAAOC,SAASC,SAGlB,MAAMkB,EAQXC,YACUC,EAEAnB,GACR,KAHQmB,UAAAA,EAGR,KADQnB,MAAAA,EACR,gGAR8B,IAQ9B,wDAEQ,aACRR,KAAK4B,MAAQ,IAAI5B,KAAKQ,MAAMqB,MAE5B7B,KAAKO,eAAiBH,IAEtBJ,KAAK8B,OAAS,IAAI9B,KAAKQ,MAAMuB,kBAC3B,GACA1B,OAAOO,WAAaP,OAAOQ,YAC3B,KACA,KAEFb,KAAK8B,OAAOE,SAASC,EAAI,EAEzBjC,KAAKkC,OAAS,KACZ,IAAK,MAAMC,KAAanC,KAAKoC,cAC3BD,IAGFnC,KAAKO,SAAS2B,OAAOlC,KAAK4B,MAAO5B,KAAK8B,QAEtC9B,KAAKO,SAAS8B,WAAY,GAG5BrC,KAAKsC,eAAiB,KACpBtC,KAAK8B,OAAOS,OAASlC,OAAOO,WAAaP,OAAOQ,YAChDb,KAAK8B,OAAOU,yBACZxC,KAAKO,SAASI,QAAQN,OAAOO,WAAYP,OAAOQ,aAChDb,KAAKkC,UAcP7B,OAAOoC,iBAAiB,SAAUzC,KAAKsC,gBAAgB,GACvDtC,KAAK2B,UAAUe,QAAQjB,EAASkB,KAAM3C,KAAKkC,QAG7B,iBAACU,GACf,GAAI/C,EAAagD,OAAOD,GACtB,OAAO/C,EAAagD,OAAOD,GAW7B,GAAIA,EAAKE,SAAS,QAAS,CACzB,MAAMC,QAAelD,EAAamD,UAAU,cAAc9C,SAKrC,WAJO,sDAII+C,cAI1BC,QAAeH,EAAOI,UAAUP,GACtC/C,EAAagD,OAAOD,GAAQM,EAE9B,GAAIN,EAAKE,SAAS,QAAS,CACzB,MAAMC,QAAelD,EAAamD,UAAU,iBAAiB9C,SACzC,IAAIF,KAAKQ,MAAM4C,gBAG7BF,QAAeH,EAAOI,UAAUP,GACtC/C,EAAagD,OAAOD,GAAQM,EAE9B,OAAOrD,EAAagD,OAAOD,GAG7BS,UACE,OAAO5B,EAASkB,MAIb,MAAMW,EACX5B,eAEmB,oBAAC6B,GAClB,IAAI5B,QAAkB4B,EAASC,WAC7B,iDAKF,MAAMC,EAAW,IAAIhC,EACnBE,QAEMxB,KAGR,aADMsD,EAASC,OACRD","sources":["webpack://axolotis-core-plugins/./src/lib/modules/three/ThreeAssetsLoader.ts","webpack://axolotis-core-plugins/./src/lib/modules/three/ThreeLib.ts"],"sourcesContent":["export class AssetsLoader {\n  loaderCache = {};\n  assets = {};\n\n  async getLoader(loaderName: string, loaderLoader: () => void) {\n    if (!this.loaderCache[loaderName]) {\n      this.loaderCache[loaderName] = await loaderLoader();\n    }\n    return this.loaderCache[loaderName];\n  }\n}\n\nexport const assetsLoader: AssetsLoader = new AssetsLoader();\n","import { assetsLoader } from \"@root/lib/modules/three/ThreeAssetsLoader\";\r\nimport { Component } from \"@aptero/axolotis-player\";\r\nimport { PerspectiveCamera, Scene, WebGLRenderer } from \"three\";\r\nimport { FrameLoop } from \"@root/lib/modules/frame/FrameLoop\";\r\n//import { WorldService } from \"@root/lib/modules/worlds/WorldService\";\r\nimport { WebpackLazyModule } from \"@root/lib/generated/webpack/WebpackLoader\";\r\nimport { Service } from \"@aptero/axolotis-player\";\r\nimport { LazyServices } from \"@aptero/axolotis-player\";\r\n\r\ndeclare let window: any;\r\n\r\nexport async function asyncLoadThree() {\r\n  //this async import has the only usage of renamin any import to three (using webpack chunk)\r\n  const THREE: any = await import(\r\n    /*  webpackPrefetch: 0,  webpackMode: 'lazy',  webpackChunkName: \"@aptero/axolotis-core-plugins/three\"  */\r\n    \"three\"\r\n  );\r\n  return THREE;\r\n}\r\n\r\nexport async function getGlobalRenderer() {\r\n  if (!window.axolotis?.renderer) {\r\n    const THREE = await asyncLoadThree();\r\n    let renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n    renderer.toneMapping = THREE.ACESFilmicToneMapping;\r\n    renderer.toneMappingExposure = 1;\r\n    renderer.outputEncoding = THREE.sRGBEncoding;\r\n    renderer.setPixelRatio(window.devicePixelRatio);\r\n\r\n    document.body.appendChild(renderer.domElement);\r\n    if (!window.axolotis) {\r\n      window.axolotis = {};\r\n    }\r\n    window.axolotis.renderer = renderer;\r\n  }\r\n  return window.axolotis.renderer;\r\n}\r\n\r\nexport class ThreeLib implements Component {\r\n  renderer: WebGLRenderer;\r\n  scene: Scene;\r\n  camera: PerspectiveCamera;\r\n  preRenderPass: (() => void)[] = [];\r\n  render: () => void;\r\n  onWindowResize: () => void;\r\n\r\n  constructor(\r\n    private frameLoop: FrameLoop,\r\n    //private worldService: WorldService,\r\n    private THREE\r\n  ) {}\r\n\r\n  async init() {\r\n    this.scene = new this.THREE.Scene();\r\n\r\n    this.renderer = await getGlobalRenderer();\r\n\r\n    this.camera = new this.THREE.PerspectiveCamera(\r\n      75,\r\n      window.innerWidth / window.innerHeight,\r\n      0.001,\r\n      100000\r\n    );\r\n    this.camera.position.z = 2;\r\n\r\n    this.render = () => {\r\n      for (const prerender of this.preRenderPass) {\r\n        prerender();\r\n      }\r\n      // FINAL PASS\r\n      this.renderer.render(this.scene, this.camera);\r\n      // set things back to normal\r\n      this.renderer.autoClear = true;\r\n    };\r\n\r\n    this.onWindowResize = () => {\r\n      this.camera.aspect = window.innerWidth / window.innerHeight;\r\n      this.camera.updateProjectionMatrix();\r\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\r\n      this.render();\r\n    };\r\n\r\n    /*\r\n    this.worldService.addOnWorldChangeCallback(() => {\r\n      window.removeEventListener(\"resize\", onWindowResize);\r\n      this.frameLoop.removeLoop(ThreeLib.name);\r\n      if (this.worldService.isActiveWorld()) {\r\n        window.addEventListener(\"resize\", onWindowResize, false);\r\n        this.frameLoop.addLoop(ThreeLib.name, render);\r\n      }\r\n    }, true);\r\n    */\r\n    //setup three loop\r\n    window.addEventListener(\"resize\", this.onWindowResize, false);\r\n    this.frameLoop.addLoop(ThreeLib.name, this.render);\r\n  }\r\n\r\n  async loadAssets(path: string) {\r\n    if (assetsLoader.assets[path]) {\r\n      return assetsLoader.assets[path];\r\n    }\r\n    /*\r\n    TODO createa a early start download of assets so that the GLB start downloading early in the waterfall\r\n    Not as simple as it seems may be doable using service worker\r\n    fetch(path);//start download of assets\r\n    var oReq = new XMLHttpRequest();\r\n    oReq.addEventListener(\"load\", ()=>{});\r\n    oReq.open(\"GET\", path);\r\n    oReq.send();\r\n    */\r\n    if (path.endsWith(\".glb\")) {\r\n      const loader = await assetsLoader.getLoader(\"GLTFLoader\", async () => {\r\n        const module: any = await import(\r\n          /*  webpackPrefetch: 0,  webpackMode: 'lazy',  webpackChunkName: \"@aptero/axolotis-core-plugins/three/examples/jsm/loaders/GLTFLoader\"  */\r\n          \"three/examples/jsm/loaders/GLTFLoader\"\r\n        );\r\n        const gltfLoader = new module.GLTFLoader();\r\n        //const gltfLoader = new GLTFLoader(new this.THREE.LoadingManager());\r\n        return gltfLoader;\r\n      });\r\n      const result = await loader.loadAsync(path);\r\n      assetsLoader.assets[path] = result;\r\n    }\r\n    if (path.endsWith(\".jpg\")) {\r\n      const loader = await assetsLoader.getLoader(\"TextureLoader\", async () => {\r\n        const texLoader = new this.THREE.TextureLoader();\r\n        return texLoader;\r\n      });\r\n      const result = await loader.loadAsync(path);\r\n      assetsLoader.assets[path] = result;\r\n    }\r\n    return assetsLoader.assets[path];\r\n  }\r\n\r\n  getType(): string {\r\n    return ThreeLib.name;\r\n  }\r\n}\r\n\r\nexport class Factory implements WebpackLazyModule, Service<ThreeLib> {\r\n  constructor() {}\r\n\r\n  async createService(services: LazyServices): Promise<ThreeLib> {\r\n    let frameLoop = await services.getService<FrameLoop>(\r\n      \"@aptero/axolotis-core-plugins/frame/FrameLoop\"\r\n    );\r\n    /*let worldService = await services.getService<WorldService>(\r\n      \"@aptero/axolotis-core-plugins/worlds/WorldService\"\r\n    );*/\r\n    const threeLib = new ThreeLib(\r\n      frameLoop,\r\n      //worldService,\r\n      await asyncLoadThree()\r\n    );\r\n    await threeLib.init();\r\n    return threeLib;\r\n  }\r\n}\r\n"],"names":["assetsLoader","loaderName","loaderLoader","this","loaderCache","async","asyncLoadThree","getGlobalRenderer","window","axolotis","renderer","THREE","WebGLRenderer","antialias","setSize","innerWidth","innerHeight","toneMapping","ACESFilmicToneMapping","toneMappingExposure","outputEncoding","sRGBEncoding","setPixelRatio","devicePixelRatio","document","body","appendChild","domElement","ThreeLib","constructor","frameLoop","scene","Scene","camera","PerspectiveCamera","position","z","render","prerender","preRenderPass","autoClear","onWindowResize","aspect","updateProjectionMatrix","addEventListener","addLoop","name","path","assets","endsWith","loader","getLoader","GLTFLoader","result","loadAsync","TextureLoader","getType","Factory","services","getService","threeLib","init"],"sourceRoot":""}