/*!
 * 
 *   @aptero/axolotis-core-plugins v1.0.0
 *   https://github.com/ApteroSAS/axolotis-player
 *
 *   Copyright (c) Aptero (https://github.com/ApteroSAS/axolotis-player) and project contributors.
 *
 *   This source code is licensed under the MIT license found in the
 *   LICENSE file in the root directory of this source tree.
 *
 */
"use strict";(self.webpackChunkaxolotis_core_plugins=self.webpackChunkaxolotis_core_plugins||[]).push([[452],{950:function(e,n,t){function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}t.r(n),t.d(n,{Factory:function(){return d},ThreeLib:function(){return c},asyncLoadThree:function(){return s},getGlobalRenderer:function(){return o}});const r=new class{constructor(){i(this,"loaderCache",{}),i(this,"assets",{})}async getLoader(e,n){return this.loaderCache[e]||(this.loaderCache[e]=await n()),this.loaderCache[e]}};function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}async function s(){return await t.e(796).then(t.bind(t,212))}async function o(){var e;if(null===(e=window.axolotis)||void 0===e||!e.renderer){const e=await s();let n=new e.WebGLRenderer({antialias:!0});n.setSize(window.innerWidth,window.innerHeight),n.toneMapping=e.ACESFilmicToneMapping,n.toneMappingExposure=1,n.outputEncoding=e.sRGBEncoding,n.setPixelRatio(window.devicePixelRatio),document.body.appendChild(n.domElement),window.axolotis||(window.axolotis={}),window.axolotis.renderer=n}return window.axolotis.renderer}class c{constructor(e,n){this.frameLoop=e,this.THREE=n,a(this,"renderer",void 0),a(this,"scene",void 0),a(this,"camera",void 0),a(this,"preRenderPass",[])}async init(){this.scene=new this.THREE.Scene,this.renderer=await o(),this.camera=new this.THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.001,1e5),this.camera.position.z=2;const e=()=>{for(const e of this.preRenderPass)e();this.renderer.render(this.scene,this.camera),this.renderer.autoClear=!0};window.addEventListener("resize",(()=>{this.camera.aspect=window.innerWidth/window.innerHeight,this.camera.updateProjectionMatrix(),this.renderer.setSize(window.innerWidth,window.innerHeight),e()}),!1),this.frameLoop.addLoop(c.name,e)}async loadAssets(e){if(r.assets[e])return r.assets[e];if(e.endsWith(".glb")){const n=await r.getLoader("GLTFLoader",(async()=>new((await Promise.all([t.e(796),t.e(404)]).then(t.bind(t,217))).GLTFLoader))),i=await n.loadAsync(e);r.assets[e]=i}if(e.endsWith(".jpg")){const n=await r.getLoader("TextureLoader",(async()=>new this.THREE.TextureLoader)),t=await n.loadAsync(e);r.assets[e]=t}return r.assets[e]}getType(){return c.name}}class d{constructor(){}async createService(e){let n=await e.getService("@aptero/axolotis-core-plugins/frame/FrameLoop");const t=new c(n,await s());return await t.init(),t}}}}]);
//# sourceMappingURL=ThreeLib.0d096cdf029542485787.js.map