{"version":3,"file":"@aptero/axolotis-core-plugins/three/ThreeLib.f88b2710c45098a722d7.js","mappings":";;;;;;;;;;;gZAYO,MAAMA,EAA6B,IAZnC,MAAmB,mCACV,IADU,gBAEf,IAEM,gBAACC,EAAoBC,GAIlC,OAHKC,KAAKC,YAAYH,KACpBE,KAAKC,YAAYH,SAAoBC,KAEhCC,KAAKC,YAAYH,K,wHCGrBI,eAAeC,IAMpB,aAJyB,6BAOpBD,eAAeE,IAAoB,MACxC,GAAI,UAACC,OAAOC,gBAAR,QAAC,EAAiBC,SAAU,CAC9B,MAAMC,QAAcL,IACpB,IAAII,EAAW,IAAIC,EAAMC,cAAc,CAAEC,WAAW,IACpDH,EAASI,QAAQN,OAAOO,WAAYP,OAAOQ,aAE3CN,EAASO,YAAcN,EAAMO,sBAC7BR,EAASS,oBAAsB,EAC/BT,EAASU,eAAiBT,EAAMU,aAChCX,EAASY,cAAcd,OAAOe,kBAE9BC,SAASC,KAAKC,YAAYhB,EAASiB,YAC9BnB,OAAOC,WACVD,OAAOC,SAAW,IAEpBD,OAAOC,SAASC,SAAWA,EAE7B,OAAOF,OAAOC,SAASC,SAGlB,MAAMkB,EAQXC,YACUC,EAEAnB,GACR,KAHQmB,UAAAA,EAGR,KADQnB,MAAAA,EACR,gGAR8B,IAQ9B,wDAEQ,aACRR,KAAK4B,MAAQ,IAAI5B,KAAKQ,MAAMqB,MAE5B7B,KAAKO,eAAiBH,IAEtBJ,KAAK8B,OAAS,IAAI9B,KAAKQ,MAAMuB,kBAC3B,GACA1B,OAAOO,WAAaP,OAAOQ,YAC3B,KACA,KAEFb,KAAK8B,OAAOE,SAASC,EAAI,EAEzBjC,KAAKkC,OAAS,KACZ,IAAK,MAAMC,KAAanC,KAAKoC,cAC3BD,IAGFnC,KAAKO,SAAS2B,OAAOlC,KAAK4B,MAAO5B,KAAK8B,QAEtC9B,KAAKO,SAAS8B,WAAY,GAG5BrC,KAAKsC,eAAiB,KACpBtC,KAAK8B,OAAOS,OAASlC,OAAOO,WAAaP,OAAOQ,YAChDb,KAAK8B,OAAOU,yBACZxC,KAAKO,SAASI,QAAQN,OAAOO,WAAYP,OAAOQ,aAChDb,KAAKkC,UAcP7B,OAAOoC,iBAAiB,SAAUzC,KAAKsC,gBAAgB,GACvDtC,KAAK2B,UAAUe,QAAQjB,EAASkB,KAAM3C,KAAKkC,QAG7B,iBAACU,GACf,GAAI/C,EAAagD,OAAOD,GACtB,OAAO/C,EAAagD,OAAOD,GAW7B,GAAIA,EAAKE,SAAS,QAAS,CACzB,MAAMC,QAAelD,EAAamD,UAAU,cAAc9C,SAKrC,WAJO,sDAII+C,cAI1BC,QAAeH,EAAOI,UAAUP,GACtC/C,EAAagD,OAAOD,GAAQM,EAE9B,GAAIN,EAAKE,SAAS,QAAS,CACzB,MAAMC,QAAelD,EAAamD,UAAU,iBAAiB9C,SACzC,IAAIF,KAAKQ,MAAM4C,gBAG7BF,QAAeH,EAAOI,UAAUP,GACtC/C,EAAagD,OAAOD,GAAQM,EAE9B,OAAOrD,EAAagD,OAAOD,GAG7BS,UACE,OAAO5B,EAASkB,MAIb,MAAMW,EACX5B,eAEmB,oBAAC6B,GAClB,IAAI5B,QAAkB4B,EAASC,WAC7B,iDAKF,MAAMC,EAAW,IAAIhC,EACnBE,QAEMxB,KAGR,aADMsD,EAASC,OACRD","sources":["webpack://axolotis-core-plugins/./src/lib/modules/three/ThreeAssetsLoader.ts","webpack://axolotis-core-plugins/./src/lib/modules/three/ThreeLib.ts"],"sourcesContent":["export class AssetsLoader {\n  loaderCache = {};\n  assets = {};\n\n  async getLoader(loaderName: string, loaderLoader: () => void) {\n    if (!this.loaderCache[loaderName]) {\n      this.loaderCache[loaderName] = await loaderLoader();\n    }\n    return this.loaderCache[loaderName];\n  }\n}\n\nexport const assetsLoader: AssetsLoader = new AssetsLoader();\n","import { assetsLoader } from \"@root/lib/modules/three/ThreeAssetsLoader\";\nimport { Component } from \"@aptero/axolotis-player\";\nimport { PerspectiveCamera, Scene, WebGLRenderer } from \"three\";\nimport { FrameLoop } from \"@root/lib/modules/frame/FrameLoop\";\n//import { WorldService } from \"@root/lib/modules/worlds/WorldService\";\nimport { WebpackLazyModule } from \"@root/lib/generated/webpack/WebpackLoader\";\nimport { Service } from \"@aptero/axolotis-player\";\nimport { LazyServices } from \"@aptero/axolotis-player\";\n\ndeclare let window: any;\n\nexport async function asyncLoadThree() {\n  //this async import has the only usage of renamin any import to three (using webpack chunk)\n  const THREE: any = await import(\n    /*  webpackPrefetch: 0,  webpackMode: 'lazy',  webpackChunkName: \"@aptero/axolotis-core-plugins/three\"  */\n    \"three\"\n  );\n  return THREE;\n}\n\nexport async function getGlobalRenderer() {\n  if (!window.axolotis?.renderer) {\n    const THREE = await asyncLoadThree();\n    let renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n\n    renderer.toneMapping = THREE.ACESFilmicToneMapping;\n    renderer.toneMappingExposure = 1;\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.setPixelRatio(window.devicePixelRatio);\n\n    document.body.appendChild(renderer.domElement);\n    if (!window.axolotis) {\n      window.axolotis = {};\n    }\n    window.axolotis.renderer = renderer;\n  }\n  return window.axolotis.renderer;\n}\n\nexport class ThreeLib implements Component {\n  renderer: WebGLRenderer;\n  scene: Scene;\n  camera: PerspectiveCamera;\n  preRenderPass: (() => void)[] = [];\n  render: () => void;\n  onWindowResize: () => void;\n\n  constructor(\n    private frameLoop: FrameLoop,\n    //private worldService: WorldService,\n    private THREE\n  ) {}\n\n  async init() {\n    this.scene = new this.THREE.Scene();\n\n    this.renderer = await getGlobalRenderer();\n\n    this.camera = new this.THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.001,\n      100000\n    );\n    this.camera.position.z = 2;\n\n    this.render = () => {\n      for (const prerender of this.preRenderPass) {\n        prerender();\n      }\n      // FINAL PASS\n      this.renderer.render(this.scene, this.camera);\n      // set things back to normal\n      this.renderer.autoClear = true;\n    };\n\n    this.onWindowResize = () => {\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      this.render();\n    };\n\n    /*\n    this.worldService.addOnWorldChangeCallback(() => {\n      window.removeEventListener(\"resize\", onWindowResize);\n      this.frameLoop.removeLoop(ThreeLib.name);\n      if (this.worldService.isActiveWorld()) {\n        window.addEventListener(\"resize\", onWindowResize, false);\n        this.frameLoop.addLoop(ThreeLib.name, render);\n      }\n    }, true);\n    */\n    //setup three loop\n    window.addEventListener(\"resize\", this.onWindowResize, false);\n    this.frameLoop.addLoop(ThreeLib.name, this.render);\n  }\n\n  async loadAssets(path: string) {\n    if (assetsLoader.assets[path]) {\n      return assetsLoader.assets[path];\n    }\n    /*\n    TODO createa a early start download of assets so that the GLB start downloading early in the waterfall\n    Not as simple as it seems may be doable using service worker\n    fetch(path);//start download of assets\n    var oReq = new XMLHttpRequest();\n    oReq.addEventListener(\"load\", ()=>{});\n    oReq.open(\"GET\", path);\n    oReq.send();\n    */\n    if (path.endsWith(\".glb\")) {\n      const loader = await assetsLoader.getLoader(\"GLTFLoader\", async () => {\n        const module: any = await import(\n          /*  webpackPrefetch: 0,  webpackMode: 'lazy',  webpackChunkName: \"@aptero/axolotis-core-plugins/three/examples/jsm/loaders/GLTFLoader\"  */\n          \"three/examples/jsm/loaders/GLTFLoader\"\n        );\n        const gltfLoader = new module.GLTFLoader();\n        //const gltfLoader = new GLTFLoader(new this.THREE.LoadingManager());\n        return gltfLoader;\n      });\n      const result = await loader.loadAsync(path);\n      assetsLoader.assets[path] = result;\n    }\n    if (path.endsWith(\".jpg\")) {\n      const loader = await assetsLoader.getLoader(\"TextureLoader\", async () => {\n        const texLoader = new this.THREE.TextureLoader();\n        return texLoader;\n      });\n      const result = await loader.loadAsync(path);\n      assetsLoader.assets[path] = result;\n    }\n    return assetsLoader.assets[path];\n  }\n\n  getType(): string {\n    return ThreeLib.name;\n  }\n}\n\nexport class Factory implements WebpackLazyModule, Service<ThreeLib> {\n  constructor() {}\n\n  async createService(services: LazyServices): Promise<ThreeLib> {\n    let frameLoop = await services.getService<FrameLoop>(\n      \"@aptero/axolotis-core-plugins/frame/FrameLoop\"\n    );\n    /*let worldService = await services.getService<WorldService>(\n      \"@aptero/axolotis-core-plugins/worlds/WorldService\"\n    );*/\n    const threeLib = new ThreeLib(\n      frameLoop,\n      //worldService,\n      await asyncLoadThree()\n    );\n    await threeLib.init();\n    return threeLib;\n  }\n}\n"],"names":["assetsLoader","loaderName","loaderLoader","this","loaderCache","async","asyncLoadThree","getGlobalRenderer","window","axolotis","renderer","THREE","WebGLRenderer","antialias","setSize","innerWidth","innerHeight","toneMapping","ACESFilmicToneMapping","toneMappingExposure","outputEncoding","sRGBEncoding","setPixelRatio","devicePixelRatio","document","body","appendChild","domElement","ThreeLib","constructor","frameLoop","scene","Scene","camera","PerspectiveCamera","position","z","render","prerender","preRenderPass","autoClear","onWindowResize","aspect","updateProjectionMatrix","addEventListener","addLoop","name","path","assets","endsWith","loader","getLoader","GLTFLoader","result","loadAsync","TextureLoader","getType","Factory","services","getService","threeLib","init"],"sourceRoot":""}