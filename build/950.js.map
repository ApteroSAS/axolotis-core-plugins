{"version":3,"file":"950.js","mappings":";;;;;;;;;;;6WAYO,MAAMA,EAA6B,IAZnC,MAAmB,mCACV,IADU,gBAEf,IAEM,gBAACC,EAAoBC,GAIlC,OAHKC,KAAKC,YAAYH,KACpBE,KAAKC,YAAYH,SAAoBC,KAEhCC,KAAKC,YAAYH,K,wHCKrB,SAASI,IAAoB,MAClC,GAAI,UAACC,OAAOC,gBAAR,QAAC,EAAiBC,SAAU,CAC9B,IAAIA,EAAW,IAAIC,EAAAA,cAAoB,CAAEC,WAAW,IACpDF,EAASG,QAAQL,OAAOM,WAAYN,OAAOO,aAE3CL,EAASM,YAAcL,EAAAA,sBACvBD,EAASO,oBAAsB,EAC/BP,EAASQ,eAAiBP,EAAAA,aAC1BD,EAASS,cAAcX,OAAOY,kBAE9BC,SAASC,KAAKC,YAAYb,EAASc,YAC9BhB,OAAOC,WACVD,OAAOC,SAAW,IAEpBD,OAAOC,SAASC,SAAWA,EAE7B,OAAOF,OAAOC,SAASC,SAGlB,MAAMe,EAKXC,YAAYC,EAAsBC,GAA4B,gGAD9B,IAE9BvB,KAAKwB,MAAQ,IAAIlB,EAAAA,MAEjBN,KAAKK,SAAWH,IAEhBF,KAAKyB,OAAS,IAAInB,EAAAA,kBAChB,GACAH,OAAOM,WAAaN,OAAOO,YAC3B,KACA,KAEFV,KAAKyB,OAAOC,SAASC,EAAI,EAEzB,MAAMC,EAAS,KACb,IAAK,MAAMC,KAAa7B,KAAK8B,cAC3BD,IAGF7B,KAAKK,SAASuB,OAAO5B,KAAKwB,MAAOxB,KAAKyB,QAEtCzB,KAAKK,SAAS0B,WAAY,GAGtBC,EAAiB,KACrBhC,KAAKyB,OAAOQ,OAAS9B,OAAOM,WAAaN,OAAOO,YAChDV,KAAKyB,OAAOS,yBACZlC,KAAKK,SAASG,QAAQL,OAAOM,WAAYN,OAAOO,aAChDkB,KAGFL,EAAaY,0BAAyB,KACpChC,OAAOiC,oBAAoB,SAAUJ,GACrCV,EAAUe,WAAWjB,EAASkB,MAC1Bf,EAAagB,kBACfpC,OAAOqC,iBAAiB,SAAUR,GAAgB,GAClDV,EAAUmB,QAAQrB,EAASkB,KAAMV,OAElC,GAGW,iBAACc,GACf,GAAI7C,EAAa8C,OAAOD,GACtB,OAAO7C,EAAa8C,OAAOD,GAW7B,GAAIA,EAAKE,SAAS,QAAS,CACzB,MAAMC,QAAehD,EAAaiD,UAAU,cAAcC,SAIrC,WAHW,8BAGIC,cAG9BC,QAAeJ,EAAOK,UAAUR,GACtC7C,EAAa8C,OAAOD,GAAQO,EAE9B,GAAIP,EAAKE,SAAS,QAAS,CACzB,MAAMC,QAAehD,EAAaiD,UAAU,iBAAiBC,SAEzC,WADO,uCACGI,iBAGxBF,QAAeJ,EAAOK,UAAUR,GACtC7C,EAAa8C,OAAOD,GAAQO,EAE9B,OAAOpD,EAAa8C,OAAOD,GAG7BU,UACE,OAAOhC,EAASkB,MAIb,MAAMe,EACXhC,eAEmB,oBAACiC,GAClB,IAAIhC,QAAkBgC,EAASC,WAC7B,mDAEEhC,QAAqB+B,EAASC,WAChC,2DAEF,OAAO,IAAInC,EAASE,EAAWC","sources":["webpack://axolotis-player/./src/lib/modules/three/ThreeAssetsLoader.ts","webpack://axolotis-player/./src/lib/modules/three/ThreeLib.ts"],"sourcesContent":["export class AssetsLoader {\n  loaderCache = {};\n  assets = {};\n\n  async getLoader(loaderName: string, loaderLoader: () => void) {\n    if (!this.loaderCache[loaderName]) {\n      this.loaderCache[loaderName] = await loaderLoader();\n    }\n    return this.loaderCache[loaderName];\n  }\n}\n\nexport const assetsLoader: AssetsLoader = new AssetsLoader();\n","import * as THREE from \"three\";\n\nimport { assetsLoader } from \"@root/lib/modules/three/ThreeAssetsLoader\";\nimport Component from \"@aptero/axolotis-player/build/types/modules/core/ecs/Component\";\nimport { WebpackLazyModule } from \"@aptero/axolotis-player/build/types/modules/core/loader/WebpackLoader\";\nimport {\n  FrameLoop,\n  LazyServices,\n  WorldService,\n} from \"@aptero/axolotis-player/build/types\";\nimport { Service } from \"@aptero/axolotis-player/build/types/modules/core/service/LazyServices\";\n\ndeclare let window: any;\nexport function getGlobalRenderer() {\n  if (!window.axolotis?.renderer) {\n    let renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n\n    renderer.toneMapping = THREE.ACESFilmicToneMapping;\n    renderer.toneMappingExposure = 1;\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.setPixelRatio(window.devicePixelRatio);\n\n    document.body.appendChild(renderer.domElement);\n    if (!window.axolotis) {\n      window.axolotis = {};\n    }\n    window.axolotis.renderer = renderer;\n  }\n  return window.axolotis.renderer;\n}\n\nexport class ThreeLib implements Component {\n  renderer: THREE.WebGLRenderer;\n  scene: THREE.Scene;\n  camera: THREE.PerspectiveCamera;\n  preRenderPass: (() => void)[] = [];\n  constructor(frameLoop: FrameLoop, worldService: WorldService) {\n    this.scene = new THREE.Scene();\n\n    this.renderer = getGlobalRenderer();\n\n    this.camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.001,\n      100000\n    );\n    this.camera.position.z = 2;\n\n    const render = () => {\n      for (const prerender of this.preRenderPass) {\n        prerender();\n      }\n      // FINAL PASS\n      this.renderer.render(this.scene, this.camera);\n      // set things back to normal\n      this.renderer.autoClear = true;\n    };\n\n    const onWindowResize = () => {\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      render();\n    };\n\n    worldService.addOnWorldChangeCallback(() => {\n      window.removeEventListener(\"resize\", onWindowResize);\n      frameLoop.removeLoop(ThreeLib.name);\n      if (worldService.isActiveWorld()) {\n        window.addEventListener(\"resize\", onWindowResize, false);\n        frameLoop.addLoop(ThreeLib.name, render);\n      }\n    }, true);\n  }\n\n  async loadAssets(path: string) {\n    if (assetsLoader.assets[path]) {\n      return assetsLoader.assets[path];\n    }\n    /*\n    TODO createa a early start download of assets so that the GLB start downloading early in the waterfall\n    Not as simple as it seems may be doable using service worker\n    fetch(path);//start download of assets\n    var oReq = new XMLHttpRequest();\n    oReq.addEventListener(\"load\", ()=>{});\n    oReq.open(\"GET\", path);\n    oReq.send();\n    */\n    if (path.endsWith(\".glb\")) {\n      const loader = await assetsLoader.getLoader(\"GLTFLoader\", async () => {\n        const GLTFLoader: any = await import(\n          \"three/examples/jsm/loaders/GLTFLoader\"\n        );\n        const gltfLoader = new GLTFLoader.GLTFLoader();\n        return gltfLoader;\n      });\n      const result = await loader.loadAsync(path);\n      assetsLoader.assets[path] = result;\n    }\n    if (path.endsWith(\".jpg\")) {\n      const loader = await assetsLoader.getLoader(\"TextureLoader\", async () => {\n        const THREE: any = await import(\"three\");\n        const texLoader = new THREE.TextureLoader();\n        return texLoader;\n      });\n      const result = await loader.loadAsync(path);\n      assetsLoader.assets[path] = result;\n    }\n    return assetsLoader.assets[path];\n  }\n\n  getType(): string {\n    return ThreeLib.name;\n  }\n}\n\nexport class Factory implements WebpackLazyModule, Service<ThreeLib> {\n  constructor() {}\n\n  async createService(services: LazyServices): Promise<ThreeLib> {\n    let frameLoop = await services.getService<FrameLoop>(\n      \"@aptero/axolotis-core-plugins/modules/FrameLoop\"\n    );\n    let worldService = await services.getService<WorldService>(\n      \"@aptero/axolotis-core-plugins/modules/core/WorldService\"\n    );\n    return new ThreeLib(frameLoop, worldService);\n  }\n}\n"],"names":["assetsLoader","loaderName","loaderLoader","this","loaderCache","getGlobalRenderer","window","axolotis","renderer","THREE","antialias","setSize","innerWidth","innerHeight","toneMapping","toneMappingExposure","outputEncoding","setPixelRatio","devicePixelRatio","document","body","appendChild","domElement","ThreeLib","constructor","frameLoop","worldService","scene","camera","position","z","render","prerender","preRenderPass","autoClear","onWindowResize","aspect","updateProjectionMatrix","addOnWorldChangeCallback","removeEventListener","removeLoop","name","isActiveWorld","addEventListener","addLoop","path","assets","endsWith","loader","getLoader","async","GLTFLoader","result","loadAsync","TextureLoader","getType","Factory","services","getService"],"sourceRoot":""}