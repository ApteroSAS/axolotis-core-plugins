{"version":3,"file":"237.js","mappings":";;;;;;;;;;;4UAWO,MAAMA,EACTC,eAEmB,oBAACC,GAChB,MAAMC,QAAqBD,EAASE,WAAyB,mCACvDC,QAA2BF,EAAaG,iBAAiBC,wBAAuCC,EAAAA,cAAAA,MAChGC,QAAmBJ,EAAmBD,WAAgC,+CACtEM,QAAkBR,EAASE,WAAsB,2BACjDO,QAAcT,EAASE,WAAqB,gCAClD,OAAO,IAAIQ,EAAeT,EAAaO,EAAUC,EAAMF,EAAWI,UAI1E,MAAMC,EAAS,GAER,MAAMF,EAETX,YAAoBC,EAAuBQ,EAA4BC,EAAgBE,GAAiB,KAApFX,SAAAA,EAAoF,KAAjCS,MAAAA,EAAiC,WAWpG,GAXoG,sBAqCrE,IArCqE,4BAsCpE,IArChCI,KAAKC,mBAAmBH,EAAQX,EAASI,kBACzCI,EAAUO,QAAQL,EAAeM,MAAKC,IAClC,IAAI,MAAMC,KAAQL,KAAKM,aACnBD,EAAKD,MAGbJ,KAAKJ,MAAMW,cAAcC,MAAK,KAC1BR,KAAKS,YAIbA,SACI,MAAMC,EAAKV,KAAKJ,MAAMe,SAASC,aAE/BZ,KAAKJ,MAAMe,SAASE,OAAM,GAAK,GAAK,GAEpCb,KAAKJ,MAAMe,SAASG,WAAY,EAEhC,IAAI,MAAMT,KAAQL,KAAKe,mBACnBV,IAGJK,EAAGM,WAAU,GAAK,GAAK,GAAK,GAC5BN,EAAGO,WAAU,GAGjBC,UACI,OAAOrB,EAAeM,KAG1BF,mBAAmBkB,EAAWC,GACtBrB,EAAOoB,KACPpB,EAAOoB,GAAOC,GAOtBC,cAAcC,GACVtB,KAAKM,aAAaE,KAAKc,GAG3BC,oBAAoBD,GAChBtB,KAAKe,mBAAmBP,KAAKc","sources":["webpack://axolotis-player/./src/lib/modules/portals/PortalsService.ts"],"sourcesContent":["import Component from \"@aptero/axolotis-player/build/types/modules/core/ecs/Component\";\r\nimport { WorldEntity } from \"@aptero/axolotis-player/build/types/modules/core/ecs/WorldEntity\";\r\nimport { CodeLoaderComponent } from \"@aptero/axolotis-player/build/types/modules/core/loader/CodeLoaderComponent\";\r\nimport { WebpackLazyModule } from \"@aptero/axolotis-player/build/types/modules/core/loader/WebpackLoader\";\r\nimport {LazyServices, Service } from \"@aptero/axolotis-player/build/types/modules/core/service/LazyServices\";\r\nimport { ServiceEntity } from \"@aptero/axolotis-player\";\r\nimport { WorldService } from \"@aptero/axolotis-player/build/types/modules/core/WorldService\";\r\nimport { FrameLoop } from \"@aptero/axolotis-player/build/types/modules/FrameLoop\";\r\nimport { ThreeLib } from \"../three/ThreeLib\";\r\n\r\n\r\nexport class Factory implements WebpackLazyModule, Service<PortalsService>{\r\n    constructor() {}\r\n\r\n    async createService(services:LazyServices): Promise<PortalsService> {\r\n        const worldService = await services.getService<WorldService>(\"@root/modules/core/WorldService\");\r\n        const actualWorldService = await worldService.getActiveWorld().getFirstComponentByType<ServiceEntity>(ServiceEntity.name);\r\n        const codeLoader = await actualWorldService.getService<CodeLoaderComponent>(\"@root/modules/core/loader/CodeLoaderService\");\r\n        const frameLoop = await services.getService<FrameLoop>(\"@root/modules/FrameLoop\");\r\n        const three = await services.getService<ThreeLib>(\"@root/modules/three/ThreeLib\");\r\n        return new PortalsService(worldService,frameLoop,three,codeLoader.roomUrl);\r\n    }\r\n}\r\n\r\nconst worlds = {};\r\n\r\nexport class PortalsService implements Component{\r\n\r\n    constructor(private services: WorldService,frameLoop:FrameLoop,private three:ThreeLib, roomUrl: string) {\r\n        this.notifyInitialWorld(roomUrl,services.getActiveWorld());\r\n        frameLoop.addLoop(PortalsService.name,delta => {\r\n            for(const loop of this.portalsLoops){\r\n                loop(delta);\r\n            }\r\n        })\r\n        this.three.preRenderPass.push(() => {\r\n            this.render();\r\n        });\r\n    }\r\n    i = 0;\r\n    render(){\r\n        const gl = this.three.renderer.getContext();\r\n        // clear buffers now: color, depth, stencil\r\n        this.three.renderer.clear(true,true,true);\r\n        // do not clear buffers before each render pass\r\n        this.three.renderer.autoClear = false;\r\n\r\n        for(const loop of this.portalsRenderLoops){\r\n            loop();\r\n        }\r\n\r\n        gl.colorMask(true,true,true,true);\r\n        gl.depthMask(true);\r\n    }\r\n\r\n    getType(): string {\r\n        return PortalsService.name;\r\n    }\r\n\r\n    notifyInitialWorld(url:string,world:WorldEntity){\r\n        if(!worlds[url]){\r\n            worlds[url] = world;\r\n        }\r\n    }\r\n\r\n    portalsLoops:((delta) => void)[] = [];\r\n    portalsRenderLoops:(() => void)[] = [];\r\n\r\n    addPortalLoop(callback: (delta) => void) {\r\n        this.portalsLoops.push(callback);\r\n    }\r\n\r\n    addPortalRenderLoop(callback: () => void) {\r\n        this.portalsRenderLoops.push(callback);\r\n    }\r\n}\r\n"],"names":["Factory","constructor","services","worldService","getService","actualWorldService","getActiveWorld","getFirstComponentByType","ServiceEntity","codeLoader","frameLoop","three","PortalsService","roomUrl","worlds","this","notifyInitialWorld","addLoop","name","delta","loop","portalsLoops","preRenderPass","push","render","gl","renderer","getContext","clear","autoClear","portalsRenderLoops","colorMask","depthMask","getType","url","world","addPortalLoop","callback","addPortalRenderLoop"],"sourceRoot":""}