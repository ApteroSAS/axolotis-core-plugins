/*!
 * 
 *   @aptero/axolotis-core-plugin v1.0.0
 *   https://github.com/ApteroSAS/axolotis-player
 *
 *   Copyright (c) Aptero (https://github.com/ApteroSAS/axolotis-player) and project contributors.
 *
 *   This source code is licensed under the MIT license found in the
 *   LICENSE file in the root directory of this source tree.
 *
 */
"use strict";(self.webpackChunkaxolotis_player=self.webpackChunkaxolotis_player||[]).push([[950],{950:function(e,n,r){r.r(n),r.d(n,{Factory:function(){return c},ThreeLib:function(){return d},getGlobalRenderer:function(){return s}});var t=r(212);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}const a=new class{constructor(){i(this,"loaderCache",{}),i(this,"assets",{})}async getLoader(e,n){return this.loaderCache[e]||(this.loaderCache[e]=await n()),this.loaderCache[e]}};function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(){var e;if(null===(e=window.axolotis)||void 0===e||!e.renderer){let e=new t.WebGLRenderer({antialias:!0});e.setSize(window.innerWidth,window.innerHeight),e.toneMapping=t.ACESFilmicToneMapping,e.toneMappingExposure=1,e.outputEncoding=t.sRGBEncoding,e.setPixelRatio(window.devicePixelRatio),document.body.appendChild(e.domElement),window.axolotis||(window.axolotis={}),window.axolotis.renderer=e}return window.axolotis.renderer}class d{constructor(e,n){o(this,"renderer",void 0),o(this,"scene",void 0),o(this,"camera",void 0),o(this,"preRenderPass",[]),this.scene=new t.Scene,this.renderer=s(),this.camera=new t.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.001,1e5),this.camera.position.z=2;const r=()=>{for(const e of this.preRenderPass)e();this.renderer.render(this.scene,this.camera),this.renderer.autoClear=!0},i=()=>{this.camera.aspect=window.innerWidth/window.innerHeight,this.camera.updateProjectionMatrix(),this.renderer.setSize(window.innerWidth,window.innerHeight),r()};n.addOnWorldChangeCallback((()=>{window.removeEventListener("resize",i),e.removeLoop(d.name),n.isActiveWorld()&&(window.addEventListener("resize",i,!1),e.addLoop(d.name,r))}),!0)}async loadAssets(e){if(a.assets[e])return a.assets[e];if(e.endsWith(".glb")){const n=await a.getLoader("GLTFLoader",(async()=>new((await r.e(217).then(r.bind(r,217))).GLTFLoader))),t=await n.loadAsync(e);a.assets[e]=t}if(e.endsWith(".jpg")){const n=await a.getLoader("TextureLoader",(async()=>new((await Promise.resolve().then(r.bind(r,212))).TextureLoader))),t=await n.loadAsync(e);a.assets[e]=t}return a.assets[e]}getType(){return d.name}}class c{constructor(){}async createService(e){let n=await e.getService("@aptero/axolotis-player/modules/FrameLoop"),r=await e.getService("@aptero/axolotis-player/modules/core/WorldService");return new d(n,r)}}}}]);
//# sourceMappingURL=950.js.map